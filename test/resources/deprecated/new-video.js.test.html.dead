<!DOCTYPE html><html><head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Test DFP Video</title>
<link rel="stylesheet" href="../css/qunit-1.10.0pre.css" type="text/css" media="screen">
<link rel="stylesheet" type="text/css" media="all" href="http://s1.ft-static.com/m/style/739995366/bundles/user.css">
<!---insert IE stuff here-->
<!--[if IE]>
<link rel="stylesheet" type="text/css" media="all" href="http://s1.ft-static.com/m/style/524381152/bundles/userie.css" />
<![endif]-->
<!---end of IE stuff -->

<link rel="stylesheet" href="http://s1.ft-static.com/m/video.ft.com/style/gzip_N1117508437/bundles/videoAll.css">
<style>
	iframe {
		padding: 0;
		margin: 0;
		border: 3px solid red;
		overflow: hidden;
	}
</style>
<script>

	

	

	/*members AYSC, ENV, FT_U, Properties, ad_server,
		additionalAdTargetingParams, adpos, ads, adverts, attr, banlb, baseAdvert,
		beginVideo, buildURLForVideo, cookies, dfp_site, dfp_zone, endVideo, env,
		hasCalledInitDFP, mpu, register, request, requestVideoSync, tile, urlStem,
		videoAdverts, getVideoSyncAdverts, getVideoAdverts, getNormalAdverts, newssubs,
		diagnostics, requestUrl, length, resetLibrary, Video, extend, ADVERTISING, 
		AJAX_DEFAULT_TIMEOUT, APP, ASSANKA_ANNOTATION_HOST, AYSC, BCReadAPIToken, 
		Bitly, CM_REQUEST_HTML_PATH, COMPONENT_PUBLISH_MULTIPLIER,
		COMPONENT_SAVE_MULTIPLIER, CONST, CORPORATE_AMO_BASE, CORPORATE_BARRIER_BASE,
		ENV, EXPERIENCE, FTQA, FT_U, IMG_BASE, LIGHTBOX_AUTOMATION_SETTINGS,
		LIGHTBOX_PROMOTE_TIMEOUT, PAGE_LONG_AJAX_TIMEOUT, PAGE_PUBLISH_TIMEOUT, 
		PAGE_PUBLISH_UNLOCKED_TIMEOUT, Page, PageConstants, Properties, SCRIPT_BASE,
		SEARCH_RESULTS_STATUS_POLL_INTERVAL, TIMEOUT, TOOLBOX_SEARCH, TagContainer,
		VIDEO_PLAYER, Video, adServerURL, ad_server, additionalAdTargetingParams,
		ads, apiKey, applicationHostname, banlb, banlb2, baseAdvert, baseURl,
		beginVideo, brand, buildURLForVideo, changeVideo, cookies, dfp_site,
		dfp_zone, display, elementID, env, extend, fallbackUrl, getAdPolicy,
		getAlpha, getElementByID, getGoogleTagAdNetworkSiteZoneString, getModule,
		getNormalAdverts, getVideoAdverts, getVideoSyncAdverts, initialBrand,
		initialPageComponent, initialPlaylist, initialSection, initialSpecialBadging,
		initialVideoId, initialisePage, latestVideosLength, length, lib, loaded,
		login, loginForm, mostPopularVideosLength, mpu, newssubs, newssubs2,
		nextTestPlan, noConflict, pageComponent, playlist, preInit, primaryDFPZone,
		productPrefix, productTag, readToken, ready, reloadMetadata, requestNewssubs,
		section, specialBadging, url, urlStem, videoId, videoPage, videoPlayerId,
		writeScript, writeScriptMock, initialiseGoogleTagAdSlots
	*/

	pageUUID = "new_video_test";
	var FT = FT || {};
	
	FT.Video = {};
	FT.env = {
		"dfp_site": "test.5887.video",
		"dfp_zone": "video-hub"
	};

	// Mock the properties object so we are considered to be non-live
	FT.Properties = { 'ENV': "ci" };

	FT.Properties.extend=function (opts) {var o; for( o in opts) {this[o]=opts[o];}};
	FT.Properties.extend({APP:"global",ENV:"local",BCReadAPIToken:"JPqBh6fm9xN8DI8Fx-r4q3UKCW2My5bxA6_zDYKIUZzODRDB3wZIFg..",CM_REQUEST_HTML_PATH:"/m/html/cm_request.htm",CORPORATE_BARRIER_BASE:"http://www.ft.com/m/registration.ft.com/corporate/ns/cb/",CORPORATE_AMO_BASE:"http://dev.media.ft.com/m/registration.ft.com/corporate/ns/amo/"});
	FT.Properties.extend({Bitly:{login:'ftshare',baseURl:'http://api.bitly.com/v3/',apiKey:'R_2b14237f91d76519080dd5c0faf84cb7'}});
	FT.Properties.extend({TIMEOUT:{COMPONENT_PUBLISH_MULTIPLIER:10000,COMPONENT_SAVE_MULTIPLIER:10000,PAGE_PUBLISH_TIMEOUT:300000,PAGE_PUBLISH_UNLOCKED_TIMEOUT:90000,PAGE_LONG_AJAX_TIMEOUT:600000,AJAX_DEFAULT_TIMEOUT:30000,LIGHTBOX_AUTOMATION_SETTINGS:10000,LIGHTBOX_PROMOTE_TIMEOUT:90000,SEARCH_RESULTS_STATUS_POLL_INTERVAL:30000,TOOLBOX_SEARCH:90000}});
	FT.Properties.extend({TagContainer:{url:"//s4.test.ft-static.com/opentag/opentag-27295-31201.js",fallbackUrl:"//d3c3cq33003psk.cloudfront.net/opentag-27295-31201.js",loaded:false}});
	FT.Properties.extend({ENV:"ci",BCReadAPIToken:"8LjOvl7btdZiTFL3E5a3gPq9uLBIDGp7qTnXnHM0mQ5G_Tjp2GIPfQ..",SCRIPT_BASE:"http://s2.ft-static.com/m/js/",IMG_BASE:"http://im.ft-static.com/m/img/",CORPORATE_BARRIER_BASE:"http://www.ft.com/m/registration.ft.com/corporate/ns/cb/",CORPORATE_AMO_BASE:"http://s2.ft-static.com/m/registration.ft.com/corporate/ns/amo/",ASSANKA_ANNOTATION_HOST:"mbanewslines.ft.com"});
	FT.Properties.extend({TagContainer:{url:"//s4.at least.com/opentag/opentag-27295-31253.js",fallbackUrl:"//d3c3cq33003psk.cloudfront.net/opentag-27295-31253.js",loaded:false}});

	var CheckAds = ['banlb', 'mpu'];

</script>
      
<script src="../lib/jquery/jquery-1.7.2.js"></script>
<script src="../js/util/jquery-ft-namespacing.js"></script>
<script src="../lib/jquery/jquery.cookie.js"></script>
<script src="../js/util/cookie.js"></script>
<script src="../../../../../../../main/webapp/media/js/FT/RenderHeadBundle/pre-init.js"></script>
<script src="../js/util/Lib.js"></script>
<script src="../js/ft/HTMLAds.js"></script>
<script src="../js/ft/DartForPublishers.js"></script>

<!--  Video Head Bundle- note that the jQuery included here overrides the Head Bundle jQuery -->
<script src="http://s2.ft-static.com/m/video.ft.com/script/gzip_1226788820/bundles/videoHeadAll.js"></script>
<script>
	var $j = jQuery.noConflict();

	if (FT.Properties.ENV === 'p') {
		FT.Properties.ENV = 'live';
	}
</script>

<!--  google tag lib - needed for video-helpers -->
<script src="http://www.googletagservices.com/tag/static/google_services_async.js"></script>

<script src="../../../../../qunit/../js/util/QUnitChainer.js"></script>
<script src="../js/util/test-helpers.html.js"></script>
<script src="../lib/qunit/qunit-1.10.0pre.js"></script>

<script>
	//cookies can now be passed within a  get string to the page
	setCookies();
	var MockSubdir = true; 
</script>

<!-- used for unit testing -->
<script src="../js/util/mock-ads.html.js"></script>

<script>
	var $j = jQuery.noConflict();
</script>

<script>

	// Clear the cookies which cause values to be inserted into the Ad calls.
	//initCookies();

	var Tests = {
		'banlb': TestMockAd.banlb2,
		'newssubs': TestMockAd.newssubs2,
		'mpu': TestMockAd.mpu
	};

	var Plan = {};
	Plan.nextTestPlan =  'miniplayer_test.html';	

	FT.$(document).ready(function () {
		QUnitChainer.init(Plan);

		FT.lib.writeScriptMock = function (URL) {
			mockAdContent(URL, Tests); // Ads injected immediately
		};

		//now we find what test mode we are in and either call DFP (Integration) or Mock the ad call (unit)
		var testMode = unitOrIntegrationMode(FT.cookies.FTQA);

		if (testMode === 'unit') {
			alert("sorry, you can not run this test plan in Unit test mode.\nPlease change your FTQA cookie to 'integration' to run as integration tests");
			//if unit test, then we override FT.lib.writeScript with the call to Mocking
			FT.lib.writeScript = FT.lib.writeScriptMock;
		}

		// Clear the cookies which cause values to be inserted into the Ad calls.
		initCookies();

		function testBeginVideo() {
			FT.ads.beginVideo();

			//initVidCompanions(CheckAds);

			deepEqual(FT.ads.getVideoAdverts().length, 0,                                                        'getVideoAdverts() should be');
			deepEqual(FT.ads.getVideoSyncAdverts().length, 0,                                                    'getVideoSyncAdverts() should be');
			deepEqual(FT.ads.getNormalAdverts(), [],                                                   'getNormalAdverts() should be');
			equal(FT.ads.baseAdvert.ad_server, undefined,                                                  'ad_server should be reset to');
			equal(FT.ads.baseAdvert.dfp_site, undefined,                                                   'dfp_site should be reset to');
			equal(FT.ads.baseAdvert.dfp_zone, undefined,                                                   'dfp_zone should be reset to');
		}

		function testAfterError() {
			deepEqual(FT.ads.getVideoAdverts().length, 1,                                                        'getVideoAdverts() should be');
			deepEqual(FT.ads.getVideoSyncAdverts().length, 0,                                                    'getVideoSyncAdverts() should be');
			deepEqual(FT.ads.getNormalAdverts(), [],                                                   'getNormalAdverts() should be');
		}

		function testAfterBuild() {
			deepEqual(FT.ads.getVideoAdverts(), ['video'],                                                       'getVideoAdverts() should be');
			deepEqual(FT.ads.getVideoSyncAdverts().length, 0,                                                    'getVideoSyncAdverts() should be');
			deepEqual(FT.ads.getNormalAdverts(), [],                                                   'getNormalAdverts() should be');
		}

		function testAfterVideo(SyncAds) {
			SyncAds = SyncAds || ['banlb', 'mpu'];
			deepEqual(FT.ads.getVideoAdverts(), ['video'],                                                       'getVideoAdverts() should be');
			deepEqual(FT.ads.getVideoSyncAdverts(), SyncAds,                                                     'getVideoSyncAdverts() should be');
			deepEqual(FT.ads.getNormalAdverts(), ['newssubs'],                                                   'getNormalAdverts() should be');
		}

		asyncTest('register() [ASYNC]', function () {
			setTimeout(function () {
				expect(3);
				// First verify the ad calls embedded in the page recorded properly.
				deepEqual(FT.ads.getVideoAdverts().length, 1,                                                        'getVideoAdverts() should be');
				deepEqual(FT.ads.getVideoSyncAdverts(), [],                                            'getVideoSyncAdverts() should be');
				deepEqual(FT.ads.getNormalAdverts(), [],                                                   'Although newssubs is defined, the page is re-initialised by the video player loading, so getNormalAdverts() should be null');
				start();
			}, 1000);
		});

		asyncTest('buildURLForVideo - error cases [ASYNC]', function () {
			setTimeout(function () {
				expect(16);
				var site = FT.env.dfp_site, zone = FT.env.dfp_zone, result;
				testBeginVideo();

				equal(FT.ads.buildURLForVideo().urlStem, 'http://ad.doubleclick.net/pfadx/test.5887.unclassified/unclassified;sz=592x333;pos=video',     'given undefined arguments, uses default site/zone should return');
				equal(get_diagnostic('video', 'checkSiteZone'), 'dfp_site/zone are invalid',                   "diagnostic for invalid zone should be");
				testAfterError();
				// Restore site/zone
				FT.env.dfp_site = site;
				FT.env.dfp_zone = zone;

				// Ensure video ad position exists so a call to beginVideo will not delete the newssubs position
				result = FT.ads.buildURLForVideo('build-url-test');

				FT.ads.beginVideo();
				equal(FT.ads.buildURLForVideo(null).urlStem, 'http://ad.doubleclick.net/pfadx/test.5887.unclassified/unclassified;sz=592x333;pos=video',     'given null arguments, uses default site/zone should return');
				equal(get_diagnostic('video', 'checkSiteZone'), 'dfp_site/zone are invalid',                   "diagnostic for invalid zone should be");
				testAfterError();
				// Ensure video ad position exists so a call to beingVideo will not delete the newssubs position
				result = FT.ads.buildURLForVideo('build-url-test');
				// Restore site/zone
				FT.env.dfp_site = site;
				FT.env.dfp_zone = zone;
				start();
			}, 1000);
		});

		asyncTest('buildURLForVideo - basic [ASYNC]', function () {
			setTimeout(function () {
				expect(24);
				testBeginVideo();

				var result = FT.ads.buildURLForVideo('zone');
				equal(result.urlStem, 'http://ad.doubleclick.net/pfadx/test.5887.video/zone;sz=592x333;pos=video',     'urlStem should be');

				matches(result.additionalAdTargetingParams, 'u=uuid=new_video_test,ts=\\d{14}',                                                  'additionalAdTargetingParams for no cookies should be');
				equal(get_diagnostic('video', 'urlStem'), result.urlStem,                                      "diagnostic for urlStem should be");
				matches(get_diagnostic('video', 'additionalAdTargetingParams'), 'u=uuid=new_video_test,ts=\\d{14}',                       "diagnostic for additionalAdTargetingParams should be");

				equal(FT.ads.baseAdvert.ad_server, 'ad.doubleclick.net',                                       'ad_server should be reset to');
				equal(FT.ads.baseAdvert.dfp_site, 'test.5887.video',                                             'dfp_site should be reset to');
				equal(FT.ads.baseAdvert.dfp_zone, 'zone',                                                      'dfp_zone should be reset to');
				equal(FT.env.dfp_zone, 'zone',                                                                 'FT.env.dfp_zone should be changed to');

				testAfterBuild();

				testBeginVideo();
				equal(FT.env.dfp_zone, 'zone',                                                                 'FT.env.dfp_zone should be remain as');
				// Ensure video ad position exists so a call to beingVideo will not delete the newssubs position
				result = FT.ads.buildURLForVideo('build-url-test');
				start();
			}, 1000);
		});

		asyncTest('buildURLForVideo - AYSC [ASYNC]', function () {
			setTimeout(function () {
				expect(15);
				testBeginVideo();
				equal(FT.env.dfp_zone, 'build-url-test',                                                       'FT.env.dfp_zone should be remain as');

				FT.cookies.AYSC = '_02F_05ITT_06RET_07RX_13GBR_14USA__15GB__191945_20N_218_';
				var result = FT.ads.buildURLForVideo('zone1');

				equal(result.urlStem, 'http://ad.uk.doubleclick.net/pfadx/test.5887.video/zone1;sz=592x333;pos=video',     'urlStem for uk targeting should be');
				matches(result.additionalAdTargetingParams, '07=rx;06=ret;05=itt;19=1945;21=8;20=n;02=f;14=usa;u=uuid=new_video_test,ts=\\d{14}', 'additionalAdTargetingParams should be');
				equal(get_diagnostic('video', 'urlStem'), result.urlStem,                                      "diagnostic for urlStem should be");
				matches(get_diagnostic('video', 'additionalAdTargetingParams'), '07=rx;06=ret;05=itt;19=1945;21=8;20=n;02=f;14=usa;u=uuid=new_video_test,ts=\\d{14}',     "diagnostic for additionalAdTargetingParams should be");
				equal(FT.env.dfp_zone, 'zone1',                                                                'FT.env.dfp_zone should be changed to');

				testAfterBuild();
				FT.env.dfp_zone = "build-url-test";
				start();
			}, 1000);
		});

		asyncTest('buildURLForVideo - FT_U and AYSC [ASYNC]', function () {
			setTimeout(function () {
				expect(14);
				testBeginVideo();

				FT.cookies.AYSC = '_02F_05ITT_06RET_07RX_13USA_14USA__15US__191945_20N_218_';
				FT.cookies.FT_U = '_EID=2548659_';
				var result = FT.ads.buildURLForVideo('zone2');

				equal(result.urlStem, 'http://ad.us.doubleclick.net/pfadx/test.5887.video/zone2;sz=592x333;pos=video',     'urlStem for us targeting should be');
				matches(result.additionalAdTargetingParams, '07=rx;06=ret;eid=2548659;05=itt;19=1945;21=8;20=n;02=f;14=usa;u=eid=2548659,uuid=new_video_test,ts=\\d{14}',     'additionalAdTargetingParams should be');
				equal(get_diagnostic('video', 'urlStem'), result.urlStem,                                      "diagnostic for urlStem should be");
				matches(get_diagnostic('video', 'additionalAdTargetingParams'), '07=rx;06=ret;eid=2548659;05=itt;19=1945;21=8;20=n;02=f;14=usa;u=eid=2548659,uuid=new_video_test,ts=\\d{14}',     "diagnostic for additionalAdTargetingParams should be");
				equal(FT.env.dfp_zone, 'zone2',                                                                'FT.env.dfp_zone should be changed to');

				testAfterBuild();
				start();
			}, 30);
		});

		asyncTest('buildURLForVideo - No AYSC - yes FT_U [ASYNC]', function () {
			setTimeout(function () {
				expect(14);
				testBeginVideo();

				FT.cookies.AYSC = '';
				FT.cookies.FT_U = '_EID=2548659_';
				var result = FT.ads.buildURLForVideo('zone3');

				equal(result.urlStem, 'http://ad.doubleclick.net/pfadx/test.5887.video/zone3;sz=592x333;pos=video',     'urlStem for unknown targeting should be');
				matches(result.additionalAdTargetingParams, 'eid=\\d{6,};u=eid=\\d{6,},uuid=new_video_test,ts=\\d{14}',                         'additionalAdTargetingParams should be');
				equal(get_diagnostic('video', 'urlStem'), result.urlStem,                                      "diagnostic for urlStem should be");
				matches(get_diagnostic('video', 'additionalAdTargetingParams'), 'eid=\\d{6,};u=eid=\\d{6,},uuid=new_video_test,ts=\\d{14}',     "diagnostic for additionalAdTargetingParams should be");
				equal(FT.env.dfp_zone, 'zone3',                                                                'FT.env.dfp_zone should be changed to');

				testAfterBuild();

				start();
			}, 30);
		});

		asyncTest('buildURLForVideo (optional position name) [ASYNC]', function () {
			setTimeout(function () {
				expect(14);

				// TODO impelement optional position name
				if (pending(14)) {	
					start();
					return;
				}
				testBeginVideo();

				FT.cookies.AYSC = '';
				FT.cookies.FT_U = '';
				var result = FT.ads.buildURLForVideo('zone', 'video');
				result = result || {'urlStem': 'ERROR', 'additionalAdTargetingParams': 'ERROR'};

				equal(result.urlStem, 'http://ad.doubleclick.net/pfadx/test.5887.video/zone;sz=1x1;pos=video', 'urlStem for mini player should be');
				equal(result.additionalAdTargetingParams, '',                                                   'additionalAdTargetingParams should be');
				equal(get_diagnostic('minivid', 'urlStem'), result.urlStem,                                    "diagnostic for urlStem should be");
				equal(get_diagnostic('minivid', 'additionalAdTargetingParams'), 'eid=2548659;u=eid=2548659',   "diagnostic for additionalAdTargetingParams should be");
				equal(FT.env.dfp_zone, 'zone',                                                                 'FT.env.dfp_zone should be changed to');

				testAfterBuild();

				// Ensure video ad position exists so a call to being Video will not delete the newssubs position
				result = FT.ads.buildURLForVideo('build-url-test');

				start();
			}, 30);
		});

		asyncTest('preRollExtend [ASYNC]', function () {

			setTimeout(function () {
				expect(2);

				var modVP, modExperience, modAdvertising, existingAdPolicy, existingAdServerURL,
					skipAdLink, skipAdLinkID, linkVisibility;

				newOnTemplateLoaded("myExperience");

				modVP = globalBCExp.getModule(APIModules.VIDEO_PLAYER);
				//modVP.play();

				modExperience = globalBCExp.getModule(APIModules.EXPERIENCE);
				modAdvertising = globalBCExp.getModule(APIModules.ADVERTISING);
				existingAdPolicy = modAdvertising.getAdPolicy();
				existingAdServerURL = existingAdPolicy.adServerURL;

				skipAdLink = modExperience.getElementByID("skipAdLink");
				skipAdLinkID   = skipAdLink.elementID;
				linkVisibility = skipAdLink.getAlpha();

				equal(skipAdLinkID, "skipAdLink", 'link to skip to FT video should have an ID "skipAdLink"');
				matches(existingAdServerURL, "sz=592x333;pos=video", 'pre roll URL');

				start();
			}, 4000);

		});
	});

	</script>
	<style type="text/css">
		#ft-search {position:static !important; width: 355px; }
		#ft-search input.text { float: left; position:static !important; background-color: #fff !important; }
		#ft-search select.select { margin: 4px 0 0 6px; }
	</style>
</head>

<body>
	<h1 id="qunit-header"><a href="/~robinmarr/ft/svn/online/website/ft-cmsWeb/src/test/js/qunit/FT/RenderHeadBundle/Advertising/video/new_video_test.html">Test DFP Video</a> </h1>
	<h2 id="qunit-banner" class=""></h2>
	<h2 id="qunit-userAgent">Mozilla/5.0 (Macintosh; Intel Mac OS X) AppleWebKit/534.34 (KHTML, like Gecko) PhantomJS/1.7.0 Safari/534.34</h2>

	<hr>
	<script>
		if (FT.ads && FT.ads.CONST) {
			//delete FT.ads.CONST.AdFormat['minivid']; 
		}
	</script>
	<form>
		<input type="button" name="expand" value="expand" onclick="expandAll();" alt="show all Ad divs on the page"> <input type="button" name="diagnose" value="diagnose" onclick="showDiagnosis();" alt="display Ad diagnostics"> <input type="button" name="stop timer" value="stop timer" onclick="stopTimer();" alt="stop the interval timer">
	</form>
	<hr>
	<div id="mode"></div>
	<p id="qunit-testresult" class="result">Running: <br><span class="test-name">register() [ASYNC]</span></p><ol id="qunit-tests"><li class="fail" id="qunit-test-output0"><strong><span class="test-name">global failure</span> <b class="counts">(<b class="failed">1</b>, <b class="passed">0</b>, 1)</b></strong><a href="/~robinmarr/ft/svn/online/website/ft-cmsWeb/src/test/js/qunit/FT/RenderHeadBundle/Advertising/video/new_video_test.html?testNumber=1">Rerun</a><ol><li class="fail"><span class="test-message">TypeError: 'undefined' is not a function (evaluating '$('#' + tryBanlb)')</span><table><tbody><tr class="test-source"><th>Source: </th><td><pre>http://localhost/~robinmarr/ft/svn/online/website/ft-cmsWeb/src/../js/ft/DartForPublishers.js:1292</pre></td></tr></tbody></table></li></ol></li><li class="running" id="qunit-test-output1"><strong><span class="test-name">register() [ASYNC]</span></strong><a href="/~robinmarr/ft/svn/online/website/ft-cmsWeb/src/test/js/qunit/FT/RenderHeadBundle/Advertising/video/new_video_test.html?testNumber=2">Rerun</a></li><li class="running" id="qunit-test-output2"><strong><span class="test-name">buildURLForVideo - error cases [ASYNC]</span></strong><a href="/~robinmarr/ft/svn/online/website/ft-cmsWeb/src/test/js/qunit/FT/RenderHeadBundle/Advertising/video/new_video_test.html?testNumber=3">Rerun</a></li><li class="running" id="qunit-test-output3"><strong><span class="test-name">buildURLForVideo - basic [ASYNC]</span></strong><a href="/~robinmarr/ft/svn/online/website/ft-cmsWeb/src/test/js/qunit/FT/RenderHeadBundle/Advertising/video/new_video_test.html?testNumber=4">Rerun</a></li><li class="running" id="qunit-test-output4"><strong><span class="test-name">buildURLForVideo - AYSC [ASYNC]</span></strong><a href="/~robinmarr/ft/svn/online/website/ft-cmsWeb/src/test/js/qunit/FT/RenderHeadBundle/Advertising/video/new_video_test.html?testNumber=5">Rerun</a></li><li class="running" id="qunit-test-output5"><strong><span class="test-name">buildURLForVideo - FT_U and AYSC [ASYNC]</span></strong><a href="/~robinmarr/ft/svn/online/website/ft-cmsWeb/src/test/js/qunit/FT/RenderHeadBundle/Advertising/video/new_video_test.html?testNumber=6">Rerun</a></li><li class="running" id="qunit-test-output6"><strong><span class="test-name">buildURLForVideo - No AYSC - yes FT_U [ASYNC]</span></strong><a href="/~robinmarr/ft/svn/online/website/ft-cmsWeb/src/test/js/qunit/FT/RenderHeadBundle/Advertising/video/new_video_test.html?testNumber=7">Rerun</a></li><li class="running" id="qunit-test-output7"><strong><span class="test-name">buildURLForVideo (optional position name) [ASYNC]</span></strong><a href="/~robinmarr/ft/svn/online/website/ft-cmsWeb/src/test/js/qunit/FT/RenderHeadBundle/Advertising/video/new_video_test.html?testNumber=8">Rerun</a></li><li class="running" id="qunit-test-output8"><strong><span class="test-name">preRollExtend [ASYNC]</span></strong><a href="/~robinmarr/ft/svn/online/website/ft-cmsWeb/src/test/js/qunit/FT/RenderHeadBundle/Advertising/video/new_video_test.html?testNumber=9">Rerun</a></li><li class="running" id="qunit-test-output9"><strong><span class="test-name">global failure</span></strong><a href="/~robinmarr/ft/svn/online/website/ft-cmsWeb/src/test/js/qunit/FT/RenderHeadBundle/Advertising/video/new_video_test.html?testNumber=10">Rerun</a></li></ol>
	<div id="main"></div>
	<!-- if in integration mode, make two calls to the adserver in order to correctly set the cookie for master / companion tracking -->
	<div id="dccookie" style="display: none;">
		<!---<script>unitOrIntegrationMessage(testMode);</script>-->
	</div>
	<div>
		<div id="banlb" class="advertising" width="728" height="90">
			<script>googletag.display(FT.Video.getGoogleTagAdNetworkSiteZoneString(), [728, 90]); </script><div id="gpt_unit_/test.5887.video/video-hub/_0" style="margin: 0px; width: 728px; height: 90px"></div>
		</div>
		<div id="newssubs" class="advertising" width="728" height="90">
			<script>
			FT.ads.requestNewssubs();
            </script>
		</div>
		<div id="mpu" class="advertising" width="336" height="280">
			<script>googletag.display(FT.Video.getGoogleTagAdNetworkSiteZoneString(), [300, 250]); </script><div id="gpt_unit_/test.5887.video/video-hub/_1" style="margin: 0px; width: 300px; height: 250px"></div>
		</div>
		<div class="freestyle">
			<script>
				FT.Video.PageConstants = FT.Video.PageConstants || {};
				FT.Video.PageConstants.initialSection = "world";
				FT.Video.PageConstants.initialBrand = "short-view";
				FT.Video.PageConstants.initialVideoId = "79763693001";
				FT.Video.PageConstants.readToken = "8LjOvl7btdaMMPHKBkwP72iYF1yuJvCHHFurAzVrFVgZmKpoBYDIYw..";
				FT.Video.PageConstants.videoPlayerId = "1327970668001";
				//FT.Video.PageConstants.videoPlayerId = "1492090403001";
				//FT.Video.PageConstants.videoPlayerId = "1511870334001";
				FT.Video.PageConstants.latestVideosLength = "";
				FT.Video.PageConstants.mostPopularVideosLength = "";
				FT.Video.PageConstants.initialPlaylist = "editorschoice";
				FT.Video.PageConstants.videoPage = "false";
				FT.Video.PageConstants.initialPageComponent = "editorsChoice";
				FT.Video.PageConstants.initialSpecialBadging = "Editor's Choice";
				FT.Video.PageConstants.applicationHostname = "http://falcon.ft.com/";
				FT.Video.PageConstants.productPrefix = "";
				FT.Video.PageConstants.productTag = "";
				//FT.Video.PageConstants.primaryDFPZone = "video-hub";
				FT.Video.PageConstants.primaryDFPZone = "thirty-second-preroll";
				//FT.Video.PageConstants.primaryDFPZone = "before-video-plays";

				$j(function () {
					FT.Video.Page.initialisePage();
					FT.Video.Page.changeVideo({
						videoId: FT.Video.PageConstants.initialVideoId,
						section: FT.Video.PageConstants.initialSection,
						brand: FT.Video.PageConstants.initialBrand,
						reloadMetadata: false,
						pageComponent: FT.Video.PageConstants.initialPageComponent,
						playlist: FT.Video.PageConstants.initialPlaylist,
						specialBadging: FT.Video.PageConstants.initialSpecialBadging
					});

					//specific section/brand page/tab link e.g.http://video.ft.com/latest or http://video.ft.com/world
				});
			</script>
		</div>
		<div id="current_video_widget">
				<div>
					<font color="red">You should see a 30 - second pre roll ad with skip function 
					after 15 seconds before the main video!</font>
				</div>
			<div id="videoplayer">
				<noscript>&lt;!--NOSCRIPT COMMENT --&gt;</noscript>
			</div>
		</div>

		<div id="tabs_container">
			<div id="tabs" class="ui-tabs ui-widget ui-widget-content ui-corner-all">
				<ul class="tabs-nav ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all">
					<li class="ui-state-default ui-corner-top ui-tabs-selected ui-state-active"><a href="#tabs-1"><span></span>Editor's Choice</a>
					</li>
					<li class="ui-state-default ui-corner-top"><a href="#tabs-2"><span></span>Next in section</a>
					</li>
				</ul>
				<script>
					FT.Video.additionalTabs = [];
				</script>
			</div>
		</div>
	</div>

	<!--[if IE]></div><![endif]-->

	<!-- Foot bundle unbundled -->
	<!-- <script src="../../../../../../main/webapp/media/js/FT/CommonFootBundle/Lib.Render.js" ></script> -->
	<!-- <script src="../../../../../../main/webapp/media/js/FT/CommonFootBundle/init-core.js" ></script> -->
	<!-- <script src="../../../../../../main/webapp/media/js/FT/CommonFootBundle/Conker.js" ></script> -->
	<!-- <script src="../../../../../../main/webapp/media/js/FT/CommonFootBundle/ContentTabs.js" ></script> -->
	<!-- <script src="../../../../../../main/webapp/media/js/FT/CommonFootBundle/DeviceSwitching.js" ></script> -->
	<!-- <script src="../../../../../../main/webapp/media/js/FT/CommonFootBundle/EditionChanger.js" ></script> -->
	<!-- <script src="../../../../../../main/webapp/media/js/FT/CommonFootBundle/ExpandablePicture.js" ></script> -->
	<!-- <script src="../../../../../../main/webapp/media/js/FT/CommonFootBundle/FlashManager.js" ></script> -->
	<!-- <script src="../../../../../../main/webapp/media/js/FT/CommonFootBundle/JobsBox.js" ></script> -->
	<!-- <script src="../../../../../../main/webapp/media/js/FT/CommonFootBundle/Navigation.js" ></script> -->
	<!-- <script src="../../../../../../main/webapp/media/js/FT/CommonFootBundle/Optimost.js" ></script> -->
	<!-- <script src="../../../../../../main/webapp/media/js/FT/CommonFootBundle/Page.js" ></script> -->
	<!-- <script src="../../../../../../main/webapp/media/js/FT/CommonFootBundle/Podcast.js" ></script> -->
	<!-- <script src="../../../../../../main/webapp/media/js/FT/CommonFootBundle/Promobox.js" ></script> -->
	<!-- <script src="../../../../../../main/webapp/media/js/FT/CommonFootBundle/Pullquote.js" ></script> -->
	<!-- <script src="../../../../../../main/webapp/media/js/FT/CommonFootBundle/SiTrackLinks.js" ></script> -->
	<!-- <script src="../../../../../../main/webapp/media/js/FT/CommonFootBundle/SiteSearch.js" ></script> -->
	<!-- <script src="../../../../../../main/webapp/media/js/FT/CommonFootBundle/Slideshow.js" ></script> -->
	<!-- <script src="../../../../../../main/webapp/media/js/FT/CommonFootBundle/StoryTools.js" ></script> -->
	<!-- <script src="../../../../../../main/webapp/media/js/FT/CommonFootBundle/Tynt.js" ></script> -->
	<!-- <script src="../../../../../../main/webapp/media/js/FT/CommonFootBundle/YahooFinanceReferrer.js" ></script> -->

	<!-- End of unbundled foot bundle -->
	
	<!-- KUDOS -->
	<script src="http://s2.ft-static.com/m/video.ft.com/script/gzip_5383705/bundles/videoFooterAll.js"></script>

	<!-- google tag lib -->
	<script language="javascript" src="http://www.googletagservices.com/tag/static/google_services.js"></script>
	<script>
	FT.Video.initialiseGoogleTagAdSlots();
	</script><script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_companion_ad.js"></script>

	<!-- brightcove libraries -->
	<script language="JavaScript" src="http://admin.brightcove.com/js/BrightcoveExperiences_all.js"></script>
	
	<script src="../../../../../../../main/webapp/media/js/FT/CommonFootBundle/brightcove.js"></script>

	<!-- end brightcove libs -->




</body></html>