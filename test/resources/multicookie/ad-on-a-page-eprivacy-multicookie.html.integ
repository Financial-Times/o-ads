<!DOCTYPE html>

<html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<META HTTP-EQUIV="CACHE-CONTROL" CONTENT="NO-CACHE">
<title>Test Ad on a page - Eprivacy Cookie testing</title>
<link rel="stylesheet" href="../../../lib/qunit/qunit.css"
	type="text/css" media="screen" />
<style type="text/css">
#banlb-not {
	height: 100px;
	width: 300px;
	background-color: pink;
	border: 1px solid black;
}

#mpu-not {
	height: 200px;
	width: 300px;
	background-color: blue;
	border: 1px solid black;
}

a img {
	border: none;
}

div {
	border: 1px solid black;
}

.advertising {
	border: 1px solid red;
}

.tempAds {
	display: none;
}

.warning {
	background-color: red;
}

#feedback {
	border: none;
}

#xpopad {
	display: none;
}
</style>

<script type="text/javascript">

/*jslint evil: true, white: true, browser: true, onevar: false, undef: true,
    nomen: true, plusplus: true, eqeqeq: true, bitwise: true, regexp: true,
    newcap: true, immed: true, maxerr: 1000, indent: 3 */

/*globals document, equal, expect, jQuery, ok, test,
    testImageAd, testRefreshAd, initCookies, unitOrIntegrationMessage, unitOrIntegrationMode, TestMockNoAd, TestMockAd,
    mockAdContent
*/

/*members AYSC, ENV, FT_U, Properties, adName, ads, adverts, asset,
   banlb, cookies, corppop, description, dfp_site, dfp_zone, doublet, env,
   hlfmpu, intro, isLegacyAPI, length, mktsdata, newssubs, next, refresh,
   refreshTimer, regex, request, requestNewssubs, response,
   timeIntervalTolerance, timeoutTolerance, tlbxrib, useDFP, write,
   writeScript, writeScriptMock, FTQA, banlb2, newssubs2, initDFP, lib
*/

var FT = FT || {};
FT.env =
{
   "dfp_site": "test.5887.dev",
   "dfp_zone": "cognitive-match-test",
   "asset":    "page",

   // Override timeout values to ensure the ad calls have time to come back
   // before the positions are collapsed. This is to ensure we can test the page successfully.
   "timeoutTolerance": 1500000,
   "timeIntervalTolerance": 3000000
};
// Mock the properties object so we are considered to be non-live
FT.Properties = { 'ENV': "ci" };
var CheckAds = ['intro', 'banlb', 'newssubs', 'tlbxrib', 'mktsdata', 'hlfmpu', 'doublet', 'oob', 'corppop', 'refresh'];
      	
//alert(document.cookie);
</script>

<script src="../../../lib/QUnitChainer.js"></script>
<script src="../../../lib/Advertising/test-helpers.html.js"></script>
<script src="../../../lib/Advertising/page-helpers.html.js"></script>
<script src="../../../../../../main/webapp/media/js/lib/jQueryCoreBundle/jquery-1.7.2.min.js"></script>
<script src="../../../../../../main/webapp/media/js/lib/jQueryCoreBundle/jquery-ft-namespacing.js"></script>
<script src="../../../lib/qunit/qunit.js"></script>

<script type="text/javascript">
//cookies can now be passed within a  get string to the page
setCookies();
</script>

<script src="../../../../../../main/webapp/media/js/FT/CommonHeadBundle/Lib.js"></script>
<script src="../../../../../../main/webapp/media/js/FT/RenderHeadBundle/Advertising/HTMLAds.js"></script>
<script src="../../../../../../main/webapp/media/js/FT/RenderHeadBundle/Advertising/DartForPublishers.js"></script>
<script src="../../../lib/Advertising/mock-ads.html.js"></script>
<script type="text/javascript">

// Clear the cookies which cause values to be inserted into the Ad calls.
//initCookies();
	   
//default values for serving behavioural ads
var privacy_icon_divResult = 1; //privacy ad div is present in mpu
var privacy_icon_imgSrcResult = 1; //privacy icon image source is present in privacy ad div
var noAdsInMpuDiv = 2; //privacy ad and mpu is present in mpu div
var bhtKV = "bht=true" //we expect that this key-value wll be present in each ad call
var AYSC_2Present = "true" //AYSC field 2 should be present within each ad call and be populated with AudSci values
var mockedMpu = TestMockAd.mpuBehav //mocked behavioural mpu ad

//audience science or DFP / Google behavioural targeting opted out by user
if (typeof(FT.cookies.rsi_segs) === "undefined"){

   privacy_icon_divResult = 0; //privacy ad div is not present in mpu
   privacy_icon_imgSrcResult = 0; //privacy icon image source is not present in privacy ad div
   noAdsInMpuDiv = 1; //only mpu is present in mpu div
   bhtKV = "bht=false" //either this k-v value will not be present or it will be false in each ad call
   AYSC_2Present = "false" //AYSC field 2 should be present within each ad call and be populated with AudSci values
   mockedMpu = TestMockAd.mpu //mocked normal mpu ad

}

//here we must defined expect behaviour if the user has opted out of (a0 AudSci and (b) DFP / Google as separate and joint cases.

var Tests = {
   'intro': TestMockAd.intro,
   'banlb': TestMockAd.banlb3,
   'newssubs': TestMockAd.newssubs2,
   'tlbxrib': TestMockAd.tlbxrib,
   'mktsdata': TestMockAd.mktsdata,
   'mpu': mockedMpu,
   'doublet': TestMockAd.doublet,
   'refresh': TestMockAd.refresh
};

var Plan = {};
Plan.nextTestPlan =  'ad-on-a-page-flash.html';
QUnitChainer.init(Plan);

FT.ads.initDFP();
FT.lib.writeScriptMock = function (URL)
{
   mockAdContent(URL, Tests); // Ads injected immediately
};


//now we find what test mode we are in and either call DFP (Integration) or Mock the ad call (unit)
var testMode = unitOrIntegrationMode(FT.cookies.FTQA);

//we set this to below zero so we can force build of ad urls 
//in tests without exceeding tile limits (16)
FT.ads.baseAdvert.tile = -10;

if (testMode === 'unit')
{
   //if unit test, then we override FT.lib.writeScript with the call to Mocking
   FT.lib.writeScript = FT.lib.writeScriptMock;
   //HTML Ad call for new Corppops: in unit test mode  we override the urlstem so we can serve the html locally
   FT.corppop.HTMLAdData.urlStem = '';
}

test("Page Environment", function ()
{
   expect(5);

   ok(FT.env,                                                                                      "FT.env should be defined");
   ok(FT.cookies,                                                                                  "FT.cookies should be defined");
   equal(FT.cookies.FT_U, undefined,                                                              "FT.cookies.FT_U should be ");
   ok(FT.env.useDFP,                                                                               "FT.env.useDFP should be set to true");
   ok(!FT.env.isLegacyAPI,                                                                         "legacy API should not be used");
});

test("intro", function ()
{
   expect(3);
   equal(FT.$('#intro_overlay').length, 1,                                                      'intro ad should be inserted into the DOM with count');
   matches(FT.ads.buildURL('intro'),bhtKV,															"we expect the value of bht key value to be " + bhtKV);
   matches(/a=([A-Za-z0-9]+)/.test(FT.ads.buildURL('intro')),AYSC_2Present,								    "we expect the result of ad url including AudSci data to be " + AYSC_2Present);
});

test("banlb", function ()
{
   expect(7);
   ok(true,                                                                                        "occasionally fails due to receipt of collapsed banlb master for 728x90 despite also getting a valid image -- investigate");
   testImageAd('banlb', 2);
   matches(FT.ads.buildURL('banlb'),bhtKV,															"we expect the value of bht key value to be " + bhtKV);
   matches(/a=([A-Za-z0-9]+)/.test(FT.ads.buildURL('banlb')),AYSC_2Present,								    "we expect the result of ad url including AudSci data to be " + AYSC_2Present);
});

test("audience science", function (){
	expect(1);
	matches(/(,a=([A-Za-z0-9]+))+/.test(FT.ads.buildURL('banlb')),"true", "u param should contain 'a' values, e.g. ',a=z834' ");
});

test("interstitial off banlb", function ()
{
   expect(2);
   
   //the decoupling of corppop from the adserver means that we will no longer be able to detect corpops via the adserver logic
   //and therefore whether interstitial ads should be served or not.
   //consequently interstitials AND corppops may appear, though the number of interstitials should never be more than 1
   var numberInterstitials = FT.$('#interstitial_overlay').length;
   ok(numberInterstitials < 2, 																	'no more than one interstitial ad should not be present in DOM');

   var totalPopAds = FT.$('#popad').length;
   var totalPopAdsinCorpClass = FT.$('.corpSignPopad').length

   testPopAds (totalPopAds,totalPopAdsinCorpClass);
   
});

test("newssubs", function ()
{
   expect(6);
   testImageAd('newssubs');
   matches(FT.ads.buildURL('newssubs'),bhtKV,															"we expect the value of bht key value to be " + bhtKV);
   matches(/a=([A-Za-z0-9]+)/.test(FT.ads.buildURL('newssubs')),AYSC_2Present,								    "we expect the result of ad url including AudSci data to be " + AYSC_2Present);
});

test('tlbxrib', function ()
{
   expect(6);
   testImageAd('tlbxrib');
   matches(FT.ads.buildURL('tlbxrib'),bhtKV,															"we expect the value of bht key value to be " + bhtKV);
   matches(/a=([A-Za-z0-9]+)/.test(FT.ads.buildURL('tlbxrib')),AYSC_2Present,								    "we expect the result of ad url including AudSci data to be " + AYSC_2Present);
});

test('mktsdata', function ()
{
   expect(7);
   testImageAd('mktsdata');
   matches(FT.ads.buildURL('mktsdata'),bhtKV,															"we expect the value of bht key value to be " + bhtKV);
   matches(/a=([A-Za-z0-9]+)/.test(FT.ads.buildURL('mktsdata')),AYSC_2Present,								    "we expect the result of ad url including AudSci data to be " + AYSC_2Present);
   // test that we're getting the correct template-configured mktsdata ad back:
   equal(FT.$('#mktsdata span.sponsor').length, 1,                                              'should have a span.sponsor with count');
});

test('mpu', function ()
{
   expect(7);
   testImageAd('mpu',noAdsInMpuDiv);
   equal(FT.$('#collision_marker').length, privacy_icon_divResult,                                           		   'a div with id of collision_marker');
   matches(FT.ads.buildURL('mpu'),bhtKV,															"we expect the value of bht key value to be " + bhtKV);
   matches(/a=([A-Za-z0-9]+)/.test(FT.ads.buildURL('mpu')),AYSC_2Present,								    "we expect the result of ad url including AudSci data to be " + AYSC_2Present);
});

test('mpu', function ()
{
   rsinetsegs = [];
   expect(7);
   testImageAd('mpu',noAdsInMpuDiv);
   equal(FT.$('#collision_marker').length, privacy_icon_divResult,                                           		   'a div with id of collision_marker');
   matches(FT.ads.buildURL('mpu'),bhtKV,															"we expect the value of bht key value to be " + bhtKV);
   matches(/a=([A-Za-z0-9]+)/.test(FT.ads.buildURL('mpu')),AYSC_2Present,								    "we expect the result of ad url including AudSci data to be " + AYSC_2Present);
});

test("doublet", function ()
{
   expect(4);
   equal(FT.$('#doublet .doublet-wrapper.doublet_first').length, 1,                             'doublet_first should occur with count');
   equal(FT.$('#doublet .doublet-wrapper.doublet_first').next('.doublet-wrapper.doublet_last').length, 1,     'doublet_last should be next with count');
   matches(FT.ads.buildURL('doublet'),bhtKV,															"we expect the value of bht key value to be " + bhtKV);
   matches(/a=([A-Za-z0-9]+)/.test(FT.ads.buildURL('doublet')),AYSC_2Present,								    "we expect the result of ad url including AudSci data to be " + AYSC_2Present);
});

test("refresh", function ()
{
   expect(11);
   testRefreshAd('refresh',undefined);
   equal(FT.ads.adverts.refresh.response.adName, 'refresh adjustment 32767',                      'refresh should correctly store obj value as');
   equal(FT.ads.adverts.refresh.response.refreshTimer, 32767000,                                  'refresh should correctly store refreshTimer value as');
   matches(FT.ads.buildURL('refresh'),bhtKV,															"we expect the value of bht key value to be " + bhtKV);
   matches(/a=([A-Za-z0-9]+)/.test(FT.ads.buildURL('refresh')),AYSC_2Present,								    "we expect the result of ad url including AudSci data to be " + AYSC_2Present);
});

      </script>
</head>

<body>
	<h1 id="qunit-header">Test Ad on a page - Eprivacy cookie test</h1>
	<h2 id="qunit-banner"></h2>
	<h2 id="qunit-userAgent"></h2>
	<p>
		The purpose of this page is to test the behaviour of serving
		behavioural or non-bhavioural advertisng based on certain cookie
		permuations. <a href="http://www.ft.com/home/uk">http://www.ft.com/home/uk</a>
	</p>
	<p>The ads are booked under
	<ol>
		<li>Advertiser:<a title="Must use IE for this link"
			href='http://dfp.doubleclick.net/sso?useSso=true&networkid=5887&advertiserid=2389285'>2389285<a>
					FT DFP Test 1 Account 
		</li>
		<li>Order:<a title="Must use IE for this link"
			href='http://dfp.doubleclick.net/sso?useSso=true&networkid=5887&orderid=3903162'>4974994<a>
					Ongoing Test 
		</li>
		<li>Ad: Ongoing mpu 360x280 ID: <a
			title="Must use IE for this link"
			href='http://dfp.doubleclick.net/sso?useSso=true&networkid=5887&&adid=217726086'>241600620</a>
			and others.</li>
	</ol>
	</p>
	<p>
		And are targeted to DFP site/zone<b> <script
				type='text/javascript'>
document.write(FT.env.dfp_site + '/' + FT.env.dfp_zone);
      </script>
		</b>
	</p>
	<hr>
	<B>AudScience: <script>if (typeof(FT.cookies.rsi_segs) !== "undefined"){document.write(FT.cookies.rsi_segs );}</script>
	</B>
	<BR>
	<B>DFP / Google: <script></script>
	</B>
	<br>
	<hr>
	<form>
		<input type='button' name='expand' value='expand'
			onclick='expandAll()' alt='show all Ad divs on the page'> <input
			type='button' name='diagnose' value='diagnose'
			onclick='showDiagnosis()' alt='display Ad diagnostics'> <input
			type='button' name='stop timer' value='stop timer'
			onclick='stopTimer()' alt='stop the interval timer'>
	</form>
	<hr>
	<div id="mode"></div>
	<ol id="qunit-tests">
		<li></li>
	</ol>

	<div id="main"></div>

	<!-- if in integration mode, make two calls to the adserver in order to correctly set the cookie for master / companion tracking -->
	<div id="dccookie" style="display: none">
		<script>unitOrIntegrationMessage(testMode);</script>
	</div>
	<hr>

	<p>From here down the page's div structure resembles the home page
		structure. Div's to hold the final ad location are just below.</p>
	<p>If no ads show, then there is something wrong with the code or
		with the ad targeting.</p>
	<div id='father-of-intro'>
		<div id="fullpage-container">Ad request fullpage-container</div>
		<script type="text/javascript">
FT.cookies.FTQA = "ord=123123123";
FT.ads.request('intro');
</script>
	</div>
	<div class="clearfix container">
		clearfix container
		<div class="master-column middleSection" data-zone="middleSection">
			master-column middleSection
			<div class="master-row topAds">
				master-row topAds
				<div id="banlb" class="advertising">
					Ad request banlb
					<script type="text/javascript">
FT.ads.request("banlb");
            </script>
				</div>
				<div id="newssubs" class="advertising">
					Ad request newssubs
					<script>

FT.ads.requestNewssubs();

            </script>
				</div>
			</div>
			<div class="master-row railSection" data-zone="railSection">
				master-row railSection
				<div id="tlbxrib" class="advertising">
					Ad request tlbxrib
					<script type="text/javascript">
FT.ads.request("tlbxrib");
            </script>
				</div>
				<div class="freestyle">
					freestyle
					<div id="wsodHomePageModule" class="rightRailComponent">
						Ad request wsodHomePageModule
						<div id="wsodHomePageModuleContent">
							Ad request wsodHomePageModuleContent
							<div class="advertising" id="mktsdata">
								Ad request mktsdata
								<!-- <span class="advert" style="width: 75px; height: 25px; margin-top: -3px;"> - -->
								<script type="text/javascript">
FT.ads.request("mktsdata");
                        </script>
								<!-- </span>  - -->
							</div>
						</div>
					</div>
				</div>

				<div id="mpu" class="advertising">
					Ad request mpu
					<script type="text/javascript">
FT.ads.request("mpu");
            </script>
				</div>
				<div class="railComponent togglable maximised advertising">
					railComponent togglable maximised advertising <span
						class="toggleButton"> </span>
					<h3 class="">
						<span class="railComponentHeading"> Highlights </span>
					</h3>
					<div class="toggleContent">
						toggleContent
						<div id="doublet">
							Ad request doublet
							<script type="text/javascript">
FT.ads.request("doublet");
                  </script>
						</div>
					</div>
				</div>

			</div>
		</div>
		<div class="adRequests">
			adRequests
			<div id="oob">
				Ad request oob
				<script type="text/javascript">
FT.ads.request('oob');
         </script>
			</div>
			<div id="corppop">
				Ad request corppop
				<script type="text/javascript">
FT.ads.request('corppop');
         </script>
			</div>
			<div id="refresh" class="advertising">
				Ad request refresh
				<script type="text/javascript">
FT.ads.request('refresh');
         </script>
			</div>

		</div>
	</div>

	<hr>
	<form>
		<input type='button' name='expand' value='expand'
			onclick='expandAll()' alt='show all Ad divs on the page'> <input
			type='button' name='diagnose' value='diagnose'
			onclick='showDiagnosis()' alt='display Ad diagnostics'> <input
			type='button' name='stop timer' value='stop timer'
			onclick='stopTimer()' alt='stop the interval timer'>
	</form>
	<hr>

</body>
</html>