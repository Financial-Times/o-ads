<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<META HTTP-EQUIV="CACHE-CONTROL" CONTENT="NO-CACHE">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<title>No ads Test DFP Ad on a page</title>
<link rel="stylesheet" href="../css/qunit-1.10.0pre.css" media="screen" />
<link rel="stylesheet" href="../css/tests.css" media="screen" />

<script>

/*jslint evil: true, white: true, browser: true, onevar: false, undef: true,
    nomen: true, plusplus: true, eqeqeq: true, bitwise: true, regexp: true,
    newcap: true, immed: true, maxerr: 1000, indent: 3 */

/*globals RegExp, equal, expect, initTest, jQuery, locateDiv, matches,
   ok, test, testNoAd, initCookies, testNoIntro, testNoInterstitial,
   testNoDoublet,unitOrIntegrationMessage, unitOrIntegrationMode,
   TestMockNoAd, TestMockAd, mockAdContent, MockSubdir
*/

/*members AYSC, ENV, FT_U, Properties, adName, ads, adverts, attr, banlb,
   constructor, cookies, corppop, css, description, dfp_site, dfp_zone, div,
   doublet, env, find, hlfmpu, img, intro, isLegacyAPI, length, mktsdata,
   name, newssubs, oob, refresh, refreshTimer, regex, request,
   requestNewssubs, response, siblings, test, timeIntervalTolerance,
   timeoutTolerance, tlbxrib, type, useDFP, writeScript, writeScriptMock,
   FTQA, initDFP, lib
*/

var FT = FT || {};

FT.env =
{
   "dfp_site": "test.5887.dev",
   "dfp_zone": "no-ads-targeted-here",
   // Override timeout values to ensure the ad calls have time to come back
   // before the positions are collapsed. This is to ensure we can test the page successfully.
   "timeoutTolerance": 150000,
   "timeIntervalTolerance": 300000
};
// Mock the properties object so we are considered to be non-live
FT.Properties = { 'ENV': "ci" };
var CheckAds = ['intro', 'banlb', 'newssubs', 'tlbxrib', 'mktsdata', 'hlfmpu', 'doublet', 'oob', 'corppop', 'refresh'];

      </script>

    <script type="text/javascript" src="../lib/jquery/jquery-1.7.2.js"></script>
    <script type="text/javascript" src="../lib/jquery/jquery.cookie.js"></script>
    <script type="text/javascript" src="../lib/qunit/qunit-1.10.0pre.js"></script>
    <script src="../js/util/QUnitChainer.js"></script>
    <script src="../js/util/qunitMock.lib.js"></script>
    <script src="../js/util/jquery-ft-namespacing.js"></script>
    <script src="../js/util/test-helpers.html.js"></script>
    <script src="../js/util/page-helpers.html.js"></script>
    <script src="../lib/sinon/sinon-1.1.1.js"></script>
    <script src="../lib/sinon/sinon-ie-1.1.1.js"></script>  

    <script>
    //cookies can now be passed within a  get string to the page
    setCookies();
    var MockSubdir = false;
    </script>
    <script src="../js/ft/advertising.utils.js"></script>
    <script src="../js/ft/advertising.utils.cookie.js"></script>
    <script src="../js/ft/HTMLAds.js"></script>
    <script src="../js/ft/DartForPublishers.js"></script>
    <script src="../js/util/mock-ads.html.js"></script>
<script>

// Clear the cookies which cause values to be inserted into the Ad calls.
//initCookies();

var Tests = {
   'intro': TestMockNoAd.intro,
   'banlb': TestMockNoAd.banlb,
   'newssubs': TestMockNoAd.newssubs,
   'tlbxrib': TestMockNoAd.tlbxrib,
   'mktsdata': TestMockNoAd.mktsdata,
   'hlfmpu': TestMockNoAd.hlfmpu,
   'doublet': TestMockNoAd.doublet,
   'oob': TestMockNoAd.oob,
   'corppop': TestMockNoAd.corppop,
   'refresh': TestMockNoAd.refresh
};

var Plan = {};
Plan.nextTestPlan =  'ad-on-a-page-localcorpop-noads.js.test.htm';
QUnitChainer.init(Plan);


FT.ads.initDFP();
//now we find what test mode we are in and either call DFP (Integration) or Mock the ad call (unit)
var testMode = unitOrIntegrationMode(FT._ads.utils.cookie("FTQA"));

if (testMode === 'unit') {
   //if unit test, then we override FT.lib.writeScript with the call to Mocking
   FT._ads.utils.writeScript = function (URL) {
       mockAdContent(URL, Tests); // Ads injected immediately
    };
}

// Clear the cookies which cause values to be inserted into the Ad calls.
//initCookies();

var mockCookies = {};

module("Ads", {
    setup: function() {
        FT._ads.utils.cookies = mockObject(mockCookies);
    }
});

test("Page Environment", function () {
   ok(FT.env,                                                                                      "FT.env should be defined");
   ok(FT.env.useDFP,                                                                               "FT.env.useDFP should be set to true");
   ok(!FT.env.isLegacyAPI,                                                                         "legacy API should not be used");
});

test("intro when no ads targeted", function ()
{
   expect(7);
   testNoIntro();
});

test("banlb when no ads targeted", function ()
{
   expect(7);
   testNoAd('banlb');
});

test("interstitial off banlb when no ads targeted", function ()
{
   expect(2);
   testNoInterstitial();
});

test("corppop off banlb when no ads targeted", function ()
{
   expect(2);
   equal($('#corppop_overlay').length, 0,                                                    '#corpop_overlay should not be in the DOM');
   equal($('.corppop_single_occurence').length, 0,                                           'there should no corp pop ad');
});

test("companion newssubs for banlb when no ads targeted", function ()
{
   expect(7);
   testNoAd('newssubs');
});

test("tlbxrib when no ads targeted", function ()
{
   expect(7);
   testNoAd('tlbxrib');
});

test("mktsdata when no ads targeted", function ()
{
   expect(7);
   testNoAd('mktsdata');
});

test("hlfmpu when no ads targeted", function ()
{
   expect(7);
   testNoAd('hlfmpu');
});

test("doublet when no ads targeted", function ()
{
   expect(8);
   testNoDoublet();
});

test("refresh ad when no ads targeted", function ()
{
   expect(8);
   testNoAd('refresh');
   if (FT.ads.adverts.refresh.response)
   {
      equal(FT.ads.adverts.refresh.response.refreshTimer, undefined,                              'refresh object refreshTimer should be');
   }
});

      </script>
</head>

<body>
	<h1 id="qunit-header">Ad on a page - no ads targeted</h1>
	<h2 id="qunit-banner"></h2>
	<h2 id="qunit-userAgent"></h2>

	<p>
		The purpose of this page is to see the Falcon FT.ads library working
		with Dart for Publishers using the deepEqual page structure that is in use
		on the Falcon home pages i.e. <a href="http://www.ft.com/home/uk">http://www.ft.com/home/uk</a>
	</p>
	<p>
		<b>This pages tests with targeting settings chosen to deliver no
			ads, to check div collapse</b>
	</p>
	<p>
		See <a href="ad-on-a-page.html">ad-on-a-page.html</a> for using the
		Falcon API with targeted ads.
	</p>
	<p>
		See <a href="ad-on-a-page-legacy.html">ad-on-a-page-legacy.html</a>
		for using the Legacy Ads API with the Falcon library as for example on
		the blogs pages <a href="http://blogs.ft.com/dearlucy">http://blogs.ft.com/dearlucy</a>
	</p>

	<hr>
	<form>
		<input type='button' name='expand' value='expand'
			onclick='expandAll()' alt='show all Ad divs on the page'> <input
			type='button' name='diagnose' value='diagnose'
			onclick='showDiagnosis()' alt='display Ad diagnostics'> <input
			type='button' name='stop timer' value='stop timer'
			onclick='stopTimer()' alt='stop the interval timer'>
	</form>
	<hr>
	<div id="mode"></div>
	<ol id="qunit-tests">
		<li></li>
	</ol>

	<div id="main"></div>
	<!-- if in integration mode, make two calls to the adserver in order to correctly set the cookie for master / companion tracking -->
	<div id="dccookie" style="display: none">
		<script>unitOrIntegrationMessage(testMode);</script>
	</div>

	<hr>
	<p>From here down the page's div structure resembles the home page
		structure. Div's to hold the final ad location are just below.</p>
	<p>If no ads show, then there is something wrong with the code or
		with the ad targeting.</p>

	<div id='father-of-intro'>
		<div id="fullpage-container">Ad request fullpage-container</div>
		<script>
FT.ads.request('intro');
</script>
	</div>
	<div class="clearfix container">
		clearfix container
		<div class="master-column middleSection" data-zone="middleSection">
			master-column middleSection
			<div class="master-row topAds">
				master-row topAds
				<div id="banlb" class="advertising">
					Ad request banlb
					<script>
// Add AYSC cookie to this call only to possibly allow the corporate popup
mockCookies.AYSC = '_27541c6c_';
FT.ads.request("banlb");
mockCookies.AYSC = undefined;
            </script>
				</div>
				<div id="newssubs" class="advertising">
					Ad request newssubs
					<script>

FT.ads.requestNewssubs();

            </script>
				</div>
			</div>
			<div class="master-row railSection" data-zone="railSection">
				master-row railSection
				<div id="tlbxrib" class="advertising">
					Ad request tlbxrib
					<script>
FT.ads.request("tlbxrib");
            </script>
				</div>
				<div class="freestyle">
					freestyle
					<div id="wsodHomePageModule" class="rightRailComponent">
						Ad request wsodHomePageModule
						<div id="wsodHomePageModuleContent">
							Ad request wsodHomePageModuleContent
							<div class="advertising" id="mktsdata">
								Ad request mktsdata
								<!--  <span class="advert" style="width: 75px; height: 25px; margin-top: -3px;"> - -->
								<script>
FT.ads.request("mktsdata");
                        </script>
								<!--   </span> - -->
							</div>
						</div>
					</div>
				</div>

				<div id="hlfmpu" class="advertising">
					Ad request hlfmpu
					<script>
FT.ads.request("hlfmpu");
            </script>
				</div>
				<div class="railComponent togglable maximised advertising">
					railComponent togglable maximised advertising <span
						class="toggleButton"> </span>
					<h3 class="">
						<span class="railComponentHeading"> Highlights </span>
					</h3>
					<div class="toggleContent">
						toggleContent
						<div id="doublet">
							Ad request doublet
							<script>
FT.ads.request("doublet");
                  </script>
						</div>
					</div>
				</div>

			</div>
		</div>
		<div class="adRequests">
			adRequests
			<div id="oob" class="advertising">
				Ad request oob
				<script>
FT.ads.request('oob');
         </script>
			</div>
			<div id="corppop" class="advertising">
				Ad request corppop
				<script>
FT.ads.request('corppop');
         </script>
			</div>
			<div id="refresh" class="advertising">
				Ad request refresh
				<script>
FT.ads.request('refresh');
         </script>
			</div>

		</div>
	</div>

	<hr>
	<form>
		<input type='button' name='expand' value='expand'
			onclick='expandAll()' alt='show all Ad divs on the page'> <input
			type='button' name='diagnose' value='diagnose'
			onclick='showDiagnosis()' alt='display Ad diagnostics'> <input
			type='button' name='stop timer' value='stop timer'
			onclick='stopTimer()' alt='stop the interval timer'>
	</form>
	<hr>
</body>
</html>
