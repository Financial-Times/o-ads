<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<META HTTP-EQUIV="CACHE-CONTROL" CONTENT="NO-CACHE">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<title>Test Ad on a page - Locally served corporate access
	popup with no DFP ads booked</title>
<link rel="stylesheet" href="../css/qunit-1.10.0pre.css" media="screen" />
<link rel="stylesheet" href="../css/tests.css" media="screen" />

<script>

/*jslint evil: true, white: true, browser: true, onevar: false, undef: true,
    nomen: true, plusplus: true, eqeqeq: true, bitwise: true, regexp: true,
    newcap: true, immed: true, maxerr: 1000, indent: 3 */

/*globals document, equal, expect, jQuery, ok, test,
    testImageAd, testRefreshAd, initCookies, unitOrIntegrationMessage, unitOrIntegrationMode, TestMockNoAd, TestMockAd,
    mockAdContent, MockSubdir
*/

/*members AYSC, ENV, FT_U, Properties, adName, ads, adverts, asset,
   banlb, cookies, corppop, description, dfp_site, dfp_zone, doublet, env,
   hlfmpu, intro, isLegacyAPI, length, mktsdata, newssubs, next, refresh,
   refreshTimer, regex, request, requestNewssubs, response,
   timeIntervalTolerance, timeoutTolerance, tlbxrib, useDFP, write,
   writeScript, writeScriptMock, FTQA, banlb2, newssubs2, initDFP, lib
*/

var FT = FT || {};
FT.env = {
   "dfp_site": "test.5887.dev",
   "dfp_zone": "no-ads-targeted-here",
   "asset":    "page",

   // Override timeout values to ensure the ad calls have time to come back
   // before the positions are collapsed. This is to ensure we can test the page successfully.
   "timeoutTolerance": 1500000,
   "timeIntervalTolerance": 3000000
};
// Mock the properties object so we are considered to be non-live
FT.Properties = { 'ENV': "ci" };
var CheckAds = ['intro', 'banlb', 'newssubs', 'tlbxrib', 'mktsdata', 'hlfmpu', 'doublet', 'oob', 'corppop', 'refresh'];

</script>

<script src="../js/util/QUnitChainer.js"></script>
<script src="../js/util/test-helpers.html.js"></script>
<script src="../js/util/page-helpers.html.js"></script>
<script src="../lib/jquery/jquery-1.7.2.js"></script>
<script src="../js/util/jquery-ft-namespacing.js"></script>
<script src="../lib/qunit/qunit-1.10.0pre.js"></script>
<script src="../js/util/qunitMock.lib.js"></script>

<script>
//cookies can now be passed within a  get string to the page
//setCookies();
var MockSubdir = false;
// cookie consent is required for corporate popup to function
createConsentCookie();
</script>

    <script src="../js/ft/advertising.utils.js"></script>
    <script src="../js/ft/advertising.utils.cookie.js"></script>
    <script src="../js/ft/HTMLAds.js"></script>
    <script src="../js/ft/DartForPublishers.js"></script>
    <script src="../js/util/mock-ads.html.js"></script>
<script>

// Clear the cookies which cause values to be inserted into the Ad calls.
//initCookies();

var Tests = {
   'intro': TestMockNoAd.intro,
   'banlb': TestMockNoAd.banlb,
   'newssubs': TestMockNoAd.newssubs,
   'tlbxrib': TestMockNoAd.tlbxrib,
   'mktsdata': TestMockNoAd.mktsdata,
   'hlfmpu': TestMockNoAd.hlfmpu,
   'doublet': TestMockNoAd.doublet,
   'refresh': TestMockNoAd.refresh
};

var Plan = {};
Plan.nextTestPlan =  'ad-on-a-page-localcorpop-amo2.js.test.htm';
QUnitChainer.init(Plan);

FT.ads.initDFP();

//now we find what test mode we are in and either call DFP (Integration) or Mock the ad call (unit)
var testMode = unitOrIntegrationMode(FT._ads.utils.cookie("FTQA"));

if (testMode === 'unit') {
   //if unit test, then we override FT.lib.writeScript with the call to Mocking
   FT._ads.utils.writeScript = function (URL) {
       mockAdContent(URL, Tests); // Ads injected immediately
    };
   //HTML Ad call for new Corppops: in unit test mode  we override the urlstem so we can serve the html locally
   FT.corppop.HTMLAdData.urlStem = '';
}

// Clear the cookies which cause values to be inserted into the Ad calls.
//initCookies();

var mockCookies = {};
module("Ads", {
    setup: function() {
        clearMockCookies();
        FT._ads.utils.cookies = mockObject(mockCookies);
    }
});

test("Page Environment", function () {
   ok(FT.env,                                                                                      "FT.env should be defined");
   ok(FT.env.useDFP,                                                                               "FT.env.useDFP should be set to true");
   ok(!FT.env.isLegacyAPI,                                                                         "legacy API should not be used");
});

test("intro when no ads targeted", function (){
	expect(7);
	testNoIntro();
});

//test("banlb when no ads targeted", function (){
//	expect(7);
//	testNoAd('banlb', undefined, undefined, 2, undefined, 'yes');
//});

test("interstitial off banlb", function (){
   expect(2);

   //the decoupling of corppop from the adserver means that we will no longer be able to detect corpops via the adserver logic
   //and therefore whether interstitial ads should be served or not.
   //consequently interstitials AND corppops may appear, though the number of interstitials should never be more than 1
   var numberInterstitials = $('#interstitial_overlay').length;
   ok(numberInterstitials < 2, 'no more than one interstitial ad should not be present in DOM');

   var totalPopAds = $('#popad').length;
   var totalPopAdsinCorpClass = $('.corpSignPopad').length;

   testPopAds (totalPopAds,totalPopAdsinCorpClass);

});

//test("corppop html ad injected into banlb", function () {
//    equal($('#corppop_overlay').length, 1, 'div with #corppop #corppop_overlay should have count');
//    equal($('.corpSignPopad').length, 1, 'there should only be 1 corp pop ad');
//
//    mockCookies.AYSC = "_22PL0AAAAA_2712345_";
//    testAYSC22(FT.cookie.get("AYSC"),FT.ads.CONST.SubsLevelReplaceLookup);
//});

test("companion newssubs for banlb when no ads targeted", function (){
	expect(7);
	testNoAd('newssubs');
});

test("tlbxrib when no ads targeted", function (){
	expect(7);
	testNoAd('tlbxrib');
});

test("mktsdata when no ads targeted", function (){
	expect(7);
	testNoAd('mktsdata');
});

test("hlfmpu when no ads targeted", function (){
	expect(7);
	testNoAd('hlfmpu');
});

test("doublet when no ads targeted", function (){
	expect(8);
	testNoDoublet();
});

test("refresh ad when no ads targeted", function () {
	expect(8);
	testNoAd('refresh',undefined);
	if (FT.ads.adverts.refresh.response) {
		equal(FT.ads.adverts.refresh.response.refreshTimer, undefined,                              'refresh object refreshTimer should be');
	}
});

      </script>
</head>

<body>
	<h1 id="qunit-header">Test Ad on a page - Locally served corporate
		access popup with no DFP ads booked</h1>
	<h2 id="qunit-banner"></h2>
	<h2 id="qunit-userAgent"></h2>
	<p>
		The purpose of this page is to see the Falcon FT.ads library working
		with Dart for Publishers using the deepEqual page structure that is in use
		on the Falcon home pages i.e. <a href="http://www.ft.com/home/uk">http://www.ft.com/home/uk</a>
	</p>
	<p>
		<b>This page tests with targeting settings chosen to deliver ads
			and the corporate popup as an interstitial.</b>
	</p>
	<p>The ads are booked under
	<ol>
		<li>Advertiser:<a title="Must use IE for this link"
			href='http://dfp.doubleclick.net/sso?useSso=true&networkid=5887&advertiserid=2389285'>2389285</a>
					FT DFP Test 1 Account
		</li>
		<li>Order:<a title="Must use IE for this link"
			href='http://dfp.doubleclick.net/sso?useSso=true&networkid=5887&orderid=3903162'>3903162</a>
					Ongoing Test
		</li>
		<li>Ad: Ongoing banlb 468x60 ID: <a
			title="Must use IE for this link"
			href='http://dfp.doubleclick.net/sso?useSso=true&networkid=5887&&adid=217726086'>217726086</a>
			and others.</li>
	</ol>
	</p>
	<p>
		And are targeted to DFP site/zone<b> <script
				type='text/javascript'>
document.write(FT.env.dfp_site + '/' + FT.env.dfp_zone);
      </script>
		</b>
	</p>
	<p>
		See <a href="ad-on-a-page-noads.html">ad-on-a-page-noads.html</a> for
		using the Falcon API with no targeted ads to see div collapse.
	</p>
	<p>
		See <a href="ad-on-a-page-legacy.html">ad-on-a-page-legacy.html</a>
		for using the Legacy Ads API with the Falcon library as for example on
		the blogs pages <a href="http://blogs.ft.com/dearlucy">http://blogs.ft.com/dearlucy</a>
	</p>
	<hr>
	<form>
		<input type='button' name='expand' value='expand'
			onclick='expandAll()' alt='show all Ad divs on the page'> <input
			type='button' name='diagnose' value='diagnose'
			onclick='showDiagnosis()' alt='display Ad diagnostics'> <input
			type='button' name='stop timer' value='stop timer'
			onclick='stopTimer()' alt='stop the interval timer'>
	</form>
	<hr />
	<div id="mode"></div>
	<ol id="qunit-tests">
		<li></li>
	</ol>

	<div id="main"></div>

	<!-- if in integration mode, make two calls to the adserver in order to correctly set the cookie for master / companion tracking -->
	<div id="dccookie" style="display: none">
		<script>unitOrIntegrationMessage(testMode);</script>
	</div>

	<hr />
	<p>From here down the page's div structure resembles the home page
		structure. Div's to hold the final ad location are just below.</p>
	<p>If no ads show, then there is something wrong with the code or
		with the ad targeting.</p>
	<div id='father-of-intro'>
		<div id="fullpage-container">Ad request fullpage-container</div>
		<script>
FT.ads.request('intro');
</script>
	</div>
	<div class="clearfix container">
		clearfix container
		<div class="master-column middleSection" data-zone="middleSection">
			master-column middleSection
			<div class="master-row topAds">
				master-row topAds
				<div id="banlb" class="advertising">
					Ad request banlb
					<script>
// Add cookies only to this ad call to force the corporate popup
//we define the _22 field to allow corppops to appear on this page
//the _27 field defines the corporate ID and the filename to fetch for the HTML Ad
//nothing booked against this value in DFP, so interstitial is served
mockCookies.AYSC = '_22PL0AAAAA_2712345_';
FT.ads.request("banlb");
            </script>
				</div>
				<div id="newssubs" class="advertising">
					Ad request newssubs
					<script>
FT.ads.requestNewssubs();
            </script>
				</div>
			</div>
			<div class="master-row railSection" data-zone="railSection">
				master-row railSection
				<div id="tlbxrib" class="advertising">
					Ad request tlbxrib
					<script>
FT.ads.request("tlbxrib");
            </script>
				</div>
				<div class="freestyle">
					freestyle
					<div id="wsodHomePageModule" class="rightRailComponent">
						Ad request wsodHomePageModule
						<div id="wsodHomePageModuleContent">
							Ad request wsodHomePageModuleContent
							<div class="advertising" id="mktsdata">
								Ad request mktsdata
								<!--  <span class="advert" style="width: 75px; height: 25px; margin-top: -3px;"> --->
								<script>
FT.ads.request("mktsdata");
                        </script>
								<!-- </span> --->
							</div>
						</div>
					</div>
				</div>

				<div id="hlfmpu" class="advertising">
					Ad request hlfmpu
					<script>
FT.ads.request("hlfmpu");
            </script>
				</div>
				<div class="railComponent togglable maximised advertising">
					railComponent togglable maximised advertising <span
						class="toggleButton"> </span>
					<h3 class="">
						<span class="railComponentHeading"> Highlights </span>
					</h3>
					<div class="toggleContent">
						toggleContent
						<div id="doublet">
							Ad request doublet
							<script>
FT.ads.request("doublet");
                  </script>
						</div>
					</div>
				</div>

			</div>
		</div>
		<div class="adRequests">
			adRequests
			<div id="oob">
				Ad request oob
				<script>
FT.ads.request('oob');
         </script>
			</div>
			<div id="corppop">
				Ad request corppop
				<script>
         //we define the _22 field to allow corppops to appear on this page
         //the _27 field defines the corporate ID and the filename to fetch for the HTML Ad
FT.ads.request('corppop');
         </script>
			</div>
			<div id="refresh" class="advertising">
				Ad request refresh
				<script>
FT.ads.request('refresh');
         </script>
			</div>

		</div>
	</div>

	<hr>
	<form>
		<input type='button' name='expand' value='expand'
			onclick='expandAll()' alt='show all Ad divs on the page'> <input
			type='button' name='diagnose' value='diagnose'
			onclick='showDiagnosis()' alt='display Ad diagnostics'> <input
			type='button' name='stop timer' value='stop timer'
			onclick='stopTimer()' alt='stop the interval timer'>
	</form>
	<hr>
		<script>
            //clean up cookies set in test
            eraseConsentCookie();
         </script>
</body>
</html>
