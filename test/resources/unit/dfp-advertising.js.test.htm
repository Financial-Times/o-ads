<!DOCTYPE html>
<!--
	Line up test case descriptions in this file:
pushd jstest/js; mv dfp-advertising.html dfp-advertising.html.bak; perl ../support/align-tests.pl dfp-advertising.html.bak > dfp-advertising.html; less dfp-advertising.html; popd
-->
<html>
<head>
<title>Test Plan DartForPublishers.js</title>
<META http-equiv="CACHE-CONTROL" content="NO-CACHE">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link rel="stylesheet" href="../css/qunit-1.10.0pre.css" type='text/css' media='screen'/>
<link rel="stylesheet" href="../css/tests.css" type='text/css' media='screen'/>
<script src="../lib/jquery/jquery-1.7.2.js"></script>
<script src="../lib/jquery/jquery.cookie.js"></script>
<script src="../lib/qunit/qunit-1.10.0pre.js"></script>
<script src="../js/util/QUnitChainer.js"></script>
<script src="../js/util/qunitMock.lib.js"></script>
<script src="../js/util/test-helpers.html.js"></script>
<script src="../js/util/page-helpers.html.js"></script>
<script src="../lib/sinon/sinon-1.1.1.js"></script>
<script src="../lib/sinon/sinon-ie-1.1.1.js"></script>
<script>

    /*jslint evil: true, white: true, browser: true, undef: true,
     nomen: false, vars: true, plusplus: false, bitwise: true,
     regexp: true, newcap: true, maxerr: 1000, indent: 4
     */

    /*globals $, get_diagnostic, window, module, test, expect, pending, ok,
     same, differs, deepEqual, matches, arrayLike, type, type_size, getType,
     debug, jsDump
     */

    /*members "01", AYSC, AdFormat, AdPos, AdServerCodes, Advertising,
     AudSci, AudSciResult, AudSciResultShort, AudSciResultSplit, Base36,
     Base36Result, CONST, Comprehensive, DearLucy,
     rLucyNonLive, DefaultAdTag, ENV, FTQA, FT_U, ISOGoodMap, ISOInvalid,
     InvalidISO2Codes, KeyOrder, MaxAYSCFields, OmitPVTRES, OmitXXX,
     Properties, RSI_SEGS, SlvCorp, SlvLv1, SlvLv2, SlvNope, SlvReg, TEST,
     Unclassified, UnusedAysc, _order, a, adServerCountry, adState1,
     addDiagnostic, ads, adverts, ae, al, ar, at, au, audSciInitial,
     audSciMax, ba, baseAdvert, be, bg, br, bs, buildURL, erightsID, by, ca, callType,
     ch, checkAdServerCountry, checkAdState, checkSiteZone,
     checkSubmitLongestUrl, cl, cleanKeywords, cn, co, cookies, cz, dcopt,
     de, decodeAudSci, detectAdMode, detectDFPTargeting, dfp_site,
     dfp_targeting, dfp_zone, div, dk, ee, eg, encodeAudSci, env, envOrig,
     es, fi, floor, foreach, fr, fromBase36, func, gb, getAdContainer,
     getAdFormat, getCookie, getDFPSite, getElementById, getKeys,
     getKeywordsParam, getLongestUrl, getNamedAdContainer, gg, gr, gt,
     hasAdClass, hasCalledInitDFP, hasClassName, hasDiv, hasInterstitial,
     hasOwnProperty, hashCookies, hello, hk, hr, hu, id, ie, il, im, in,
     initDFP, initialHTML, injectUnclassifiedTrackCall, injectUrlTrackCall,
     innerHTML, instanceProperty, is, isLegacyAPI, isDefaultAdModeDFP,
     isSystemDefault, isUnclassified, it, jar, je, join, jp, kr, kw, length,
     lib, location, lt, lu, lv, ma, md, me, mk, mx, my, name, nl, no, nz,
     obj, ord, parse, ph, pk, pl, pos, prototypalProerty, prototype, pt,
     push, random, ready, replace, request, requestNewssubs, requestUrl,
     resetLibrary, ro, rs, ru, sa, se, setDefaultSiteZone, setInitialAdState,
     sg, shift, shouldSubmitToTrack, showDiagnostics, si, sk, sort, split,
     src, state, submitToTrack, sz, t, targeting, th, tile, toBase36, tr,
     trackUrl, tw, u, ua, uk, urlThreshold, urlThresholdMax, url_location,
     us, useDFP, value, ve, write, z, za, AdStateKeysInit, AdStateKeysChanged,
     isEmptyAd, isAdStateEmpty, shouldAdBeZeroHeight, alwaysHide,
     getAdInnerHTML, getAdContainers, pageUUID, getUUIDFromString,bht, FT_Remember,
     nextTestPlan, init, DearLucyNonLive, AudSciResultShort1, AudSciResultShort2,
     AudSciResultShort3, AudSciResultShort4, AudSciResultSplit1, AudSciResultSplit2
     */

    "use strict";
    var FT = FT || {};
    FT.env = {
        "dfp_site":"test.5887.dev",
        "dfp_zone":"dfp-advertising-test"
    };
    FT.envOrig = {
        "dfp_site":"test.5887.dev",
        "dfp_zone":"dfp-advertising-test"
    };
    // Mock the properties object so we are considered to be non-live
    FT.Properties = { 'ENV':"ci" };

    // AUTO-GENERATED CONSTANTS ========================================
    // These were generated by perl script:
    // online/website/commons/trunk/javascript/ft-advertising/src/test/support/country-codes/country-codes.pl
    // Using an XLS file provided by Doubleclick containing the valid Ad
    // servers and an ISO3 to ISO2 mapping file from the Quova project
    // See also ISO2 and ISO3 country code documentation:
    // http://en.wikipedia.org/wiki/ISO_3166-1_alpha-3
    // http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2

    var Plan = {};
    Plan.nextTestPlan = 'dfp-advertising-refer-page.html';
    QUnitChainer.init(Plan);

    var TEST = {};
    TEST.AdServerCodes = ['ae', 'al', 'ar', 'at', 'au', 'ba', 'be', 'bg', 'br', 'bs', 'by', 'ca', 'ch', 'cl', 'cn', 'co', 'cz', 'de', 'dk', 'ee', 'eg', 'es', 'fi', 'fr', 'gr', 'gt', 'hk', 'hr', 'hu', 'ie', 'il', 'in', 'is', 'it', 'jp', 'kr', 'kw', 'lt', 'lu', 'lv', 'ma', 'md', 'me', 'mk', 'mx', 'my', 'nl', 'no', 'nz', 'ph', 'pk', 'pl', 'pt', 'ro', 'rs', 'ru', 'sa', 'se', 'sg', 'si', 'sk', 'th', 'tr', 'tw', 'ua', 'uk', 'us', 've', 'za'];

    // Some new additions to ISO2 and invalid values to check
    TEST.InvalidISO2Codes = ['xx', 'gb', 'gg', 'im', 'je']; // 'me', 'ro', 'rs' are now supported
    TEST.ISOGoodMap = {
        // Quova ISO2 with Valid DFP Ad Servers
        'al':'al', 'ae':'ae', 'ar':'ar', 'au':'au', 'at':'at', 'be':'be', 'bg':'bg', 'bs':'bs', 'ba':'ba', 'by':'by', 'br':'br',
        'ca':'ca', 'ch':'ch', 'cl':'cl', 'cn':'cn', 'co':'co', 'cz':'cz', 'de':'de', 'dk':'dk', 'eg':'eg', 'es':'es', 'ee':'ee',
        'fi':'fi', 'fr':'fr', 'uk':'uk', 'gb':'uk', 'gg':'uk', 'gr':'gr', 'gt':'gt', 'hk':'hk', 'hr':'hr', 'hu':'hu', 'im':'uk',
        'in':'in', 'ie':'ie', 'is':'is', 'il':'il', 'it':'it', 'je':'uk', 'jp':'jp', 'kr':'kr', 'kw':'kw', 'lt':'lt', 'lu':'lu',
        'lv':'lv', 'ma':'ma', 'md':'md', 'mx':'mx', 'mk':'mk', 'me':'me', 'my':'my', 'nl':'nl', 'no':'no', 'nz':'nz', 'pk':'pk',
        'ph':'ph', 'pl':'pl', 'pt':'pt', 'ro':'ro', 'ru':'ru', 'sa':'sa', 'sg':'sg', 'rs':'rs', 'sk':'sk', 'si':'si', 'se':'se',
        'th':'th', 'tr':'tr', 'tw':'tw', 'ua':'ua', 'us':'us', 've':'ve', 'za':'za'
    };

    TEST.ISOInvalid = [
        // ISO2 with Invalid DFP Ad Servers
        'aw', 'af', 'ao', 'ai', 'ad', 'an', 'am', 'as', 'aq', 'tf', 'ag', 'az', 'bi', 'bj', 'bf', 'bd', 'bh', 'bz', 'bm', 'bo', 'bb', 'bn', 'bt', 'bv',
        'bw', 'cf', 'cc', 'ci', 'cm', 'cd', 'cg', 'ck', 'km', 'cv', 'cr', 'cu', 'cx', 'ky', 'cy', 'dj', 'dm', 'do', 'dz', 'ec', 'er', 'eh', 'et', 'fj',
        'fk', 'fo', 'fm', 'fx', 'ga', 'ge', 'gh', 'gi', 'gn', 'gp', 'gm', 'gw', 'gq', 'gd', 'gl', 'gf', 'gu', 'gy', 'hm', 'hn', 'ht', 'id', 'io', 'ir',
        'iq', 'jm', 'jo', 'kz', 'ke', 'kg', 'kh', 'ki', 'kn', 'la', 'lb', 'lr', 'ly', 'lc', 'li', 'lk', 'ls', 'mo', 'mc', 'mg', 'mv', 'mh', 'ml', 'mt',
        'mm', 'mn', 'mp', 'mz', 'mr', 'ms', 'mq', 'mu', 'mw', 'yt', 'na', 'nc', 'ne', 'nf', 'ng', 'ni', 'nu', 'np', 'nr', 'om', 'pa', 'pn', 'pe', 'pw',
        'pg', 'pr', 'kp', 'py', 'ps', 'pf', 'qa', 're', 'rw', 'cs', 'sd', 'sn', 'gs', 'sh', 'sj', 'sb', 'sl', 'sv', 'sm', 'so', 'pm', 'st', 'sr', 'sz',
        'sc', 'sy', 'tc', 'td', 'tg', 'tj', 'tk', 'tm', 'tp', 'to', 'tt', 'tn', 'tv', 'tz', 'ug', 'um', 'uy', 'uz', 'va', 'vc', 'vg', 'vi', 'vn', 'vu',
        'wf', 'ws', 'ye', 'yu', 'zm', 'zw'
    ];
    // END OF AUTO-GENERATED CONSTANTS =================================

    TEST.DefaultAdTag = {
        'env':{
            'dfp_site':'test.5887.dev',
            'dfp_zone':'build-url-test'
        },
        'pos':'banlb'
    };
    TEST.DearLucy = {
        'dfp_site':'ftcom.5887.blogs',
        'dfp_zone':'dear-lucy-blog'
    };
    TEST.DearLucyNonLive = {
        'dfp_site':'test.5887.blogs',
        'dfp_zone':'dear-lucy-blog'
    };
    TEST.Unclassified = {
        'dfp_site':'ftcom.5887.unclassified',
        'dfp_zone':'unclassified'
    };

    TEST.AdPos = [
        'intro', 'banlb', 'newssubs', 'tlbxrib', 'mktsdata', 'hlfmpu', 'doublet', 'refresh', 'searchbox', 'mpu', 'mpusky', 'vidbut1',
        'vidbut2', 'vidbut3', 'video', 'minivid', 'wdesky', 'marketingrib', 'tradcent', 'lhn',
        '-'
    ];

    // Correct order of keys in the Ad call URL to prevent data truncation - TODO still to change
    // Documented in Targeting/KeyPriority.xls in DFP project share and on Twiki
    // http://epcvs.osb.ft.com/twiki/bin/view/Projects/DartForPublishers#Order_of_key_values_placed_into
    //TEST.KeyOrder = "sz,dcopt,07,a,06,slv,eid,05,19,21,27,20,02,14,cn,01,kw,u,pos,bht,tile,ord";  // TODO referrer, investor relations
    TEST.KeyOrder = "sz,dcopt,07,kuid,khost,ksg,a,06,05,27,eid,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,19,20,21,slv,02,14,cn,01,kw,loc,uuid,auuid,ts,cc,pos,bht,fts,socref,tile,ord";
    //TEST.Comprehensive = "sz,dcopt,07,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,06,slv,eid,05,19,21,27,20,02,14,cn,01,kw,u,pos,bht,tile,ord";
    TEST.Comprehensive = "sz,dcopt,07,kuid,khost,ksg,ksg,ksg,ksg,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,06,05,27,eid,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,19,20,21,slv,02,14,cn,01,kw,uuid,ts,cc,pos,bht,tile,ord";

    // AYSC values which should not appear in the Ad call URL
    TEST.MaxAYSCFields = 60;
    TEST.UnusedAysc = ['00', '03', '04', '08', '09', '10', '11', '12', '13', '15', '16', '17', '18', '22', '23', '24', '25', '26', '28', '29', '30', '31', '32', '32', '33', '34', '35', '36', '37', '38', '39'];
    // AYSC values which are omitted from the Ad call URL if they have specific values
    TEST.OmitXXX = ['02', '05', '06', '07', '20', '21', '19'];
    TEST.OmitPVTRES = ['14', '27', '24' ];

    // Test values for subscription level ID matching
    TEST.SlvCorp = ['P0P1Tools', 'P0P2Tools', 'NP0P1Tools', 'NP0P2Tools', 'P0P2Admin', 'P0P1P1Tools', 'P0P1P2Tools', 'P0L1Ape', 'P0L2Dog', 'L0L1Ties', 'L0L2Tent', 'L0P1Towels', 'L0P2What'];
    TEST.SlvLv1 = ['P1Tools', 'L1Edit', 'P0P1Tools'];
    TEST.SlvLv2 = ['P2Tools', 'L2Edit', 'P0P2Tools', 'NP0P2Tools'];
    TEST.SlvReg = ['P0Tools', 'L0Edit'];
    TEST.SlvAYSC97 = ['c', ''];

    TEST.SlvNope = ['P0P1T', 'P2', 'L2', 'P1', 'L1', 'P0', 'L0', 'P1L1', 'nomatch'];

    TEST.Base36 = [907717, 8724, 707711, 0, 2599999]; // 3 real values plus min/max possible values to test
    TEST.Base36Result = ['jged', '6qc', 'f62n', '0', '1jq67'];

    TEST.AudSci = [
        'H07711_10108|J07717_10089|J07717_10097|J07717_10098|J07717_10236|J07717_10288|J07717_10294|J07717_10295|J07717_10299|J07717_10369|J07717_10555|J07717_10545|H07711_10127',
        'J07717_10383|J07717_10092|J07717_10097|J07717_10098|J07717_10105|J07717_10236|J07717_10288|J07717_10295|J07717_10299|J07717_10369|J07717_10370|J07717_10555|J07717_10545|J07717_10221',
        'J07717_10098|J07717_10236|J07717_10288|J07717_10295|J07717_10299|J07717_10369|J07717_10555',
        'J07717_10383|J07717_10576|J07717_10089|J07717_10502|J07717_10236|J07717_10286|J07717_10288|J07717_10295|J07717_10299|J07717_10301|J07717_10322|J07717_10344|J07717_10345|J07717_10357|J07717_10369|J07717_10530|J07717_10555|J07717_10545|J07717_10221|J07717_10580|J07717_10590|J07717_10597|J07717_10606|J07717_10610|J07717_10612|J07717_10617|J07717_10618|J07717_10619|J07717_10620|J07717_10633|J07717_10644|J07717_10647|J07717_10648|J07717_10649|J07717_10653',
        'J07717_10383|J07717_10576|J07717_10089|J07717_10502|J07717_10236|J07717_10286|J07717_10288|J07717_10295|J07717_10299|J07717_10301|J07717_10322|J07717_10344|J07717_10345|J07717_10357|J07717_10369|J07717_10530|J07717_10555|J07717_10545|J07717_10221|J07717_10580|J07717_10590|J07717_10597|J07717_10606|J07717_10610|J07717_10612|J07717_10617|J07717_10618|J07717_10619|J07717_10620|J07717_10633|J07717_10644|J07717_10647|J07717_10648|J07717_10649|J07717_10653|J07717_10724'
    ];

    TEST.AudSciResult = [
        'a=h6fna7;a=z89;a=z97;a=z98;a=z236;a=z288;a=z294;a=z295;a=z299;a=z369;a=z555;a=z545;a=h7kdbz',
        'a=z383;a=z92;a=z97;a=z98;a=z105;a=z236;a=z288;a=z295;a=z299;a=z369;a=z370;a=z555;a=z545;a=z221',
        'a=z98;a=z236;a=z288;a=z295;a=z299;a=z369;a=z555',
        'a=z383;a=z576;a=z89;a=z502;a=z236;a=z286;a=z288;a=z295;a=z299;a=z301;a=z322;a=z344;a=z345;a=z357;a=z369;a=z530;a=z555;a=z545;a=z221;a=z580;a=z590;a=z597;a=z606;a=z610;a=z612;a=z617;a=z618;a=z619;a=z620;a=z633;a=z644;a=z647;a=z648;a=z649;a=z653',
        'a=z383;a=z576;a=z89;a=z502;a=z236;a=z286;a=z288;a=z295;a=z299;a=z301;a=z322;a=z344;a=z345;a=z357;a=z369;a=z530;a=z555;a=z545;a=z221;a=z580;a=z590;a=z597;a=z606;a=z610;a=z612;a=z617;a=z618;a=z619;a=z620;a=z633;a=z644;a=z647;a=z648;a=z649;a=z653;a=z724'
    ];

    TEST.AudSciResultShort1 = 'a=h6fna7;a=z89;a=z97';
    TEST.AudSciResultShort2 = ';a=z98;a=z236';
    TEST.AudSciResultShort3 = 'a=h6fna7;a=z576;a=z89';
    TEST.AudSciResultShort4 = ';a=z502;a=z236';
    TEST.AudSciResultSplit1 = 'a=h6fna7;a=z89;a=z97;a=z98;a=z236;eid=4326601';
    TEST.AudSciResultSplit2 = '';

    TEST.krux = {
        segs: 'seg1,seg2,seg3,seg4',
        urlSegs: ';ksg=seg1;ksg=seg2;ksg=seg3;ksg=seg4;',
        userid: 'kxuser',
        host: encodeURIComponent(location.hostname)
    }

    TEST.AdStateKeysInit = "alwaysHide, hasDiv, hasInterstitial, initialHTML, isEmptyAd, isSystemDefault, requestsInterstitial, state";
    TEST.AdStateKeysChanged = "alwaysHide, hasDiv, hasInterstitial, initialHTML, innerHTML, isEmptyAd, isSystemDefault, requestsInterstitial, state";

    var pageUUID = '';
    function getUUIDFromString(stringForExtractingUUID) {
        return '';
    }

    var mockCookies = {};
    // TODO mock a referring url
    //FT.ads.baseAdvert['referrer'] = "http://www.ft.com/home/uk" ;
    // mock keywords
    //FT.ads.baseAdvert['keyword'] = "ivi/lon" ;
</script>
<!--
	<script src="../../dist/advertising-latest.js"></script>
-->

<script src="../js/ft/advertising.utils.js"></script>
<script src="../js/ft/advertising.utils.cookie.js"></script>
<script src="../js/ft/HTMLAds.js"></script>
<script src="../js/ft/DartForPublishers.js"></script>

<script src="../js/util/mock-ads.html.js"></script>

<script>
    var testMode = unitOrIntegrationMode(FT._ads.utils.cookies.FTQA);
</script>
</head>
<body>
<h1 id="qunit-header">DartForPublishers.js</h1>

<h2 id="qunit-banner"></h2>

<h2 id="qunit-userAgent"></h2>

<h2 id="mode"></h2>


<ol id="qunit-tests"></ol>

<div id="main"></div>

<hr/>
<b>Divs to hold the ads are here visible/hidden.</b>

<div id="expendable" class="advertising">expandable Ad goes here</div>
<div id="header" class="clearfix">content here</div>
<div id="banlb" class="advertising">banlb Ad goes here</div>
<div id="renderImageDiv" class="advertising">renderImageDiv Ad goes here</div>

<!-- Delayed render ad -->
<div id="mpu" class="advertising">mpu Ad goes here</div>
<hr/>

<div class="adRequests">
    <div id="temp-mpu" class="tempAds">
        <script>
            //FT.ads.request('mpu');
            //var name = "mpu";
            //FT.ads.setTimer( name );
        </script>
    </div>

    <div id="live-ad-call" class="tempAds">
        <table>
            <tr>
                <th>live-ad-call (hardcoded) (disabled)<br/> <!-- begin ad tag -->
                    <div>
                        <script>
                            //<![CDATA[
                            TEST.ord = window.TEST.ord || Math.floor(Math.random() * 1E16);
                            TEST.targeting = 'ftcom.5887.blogs/dear-lucy-blog;sz=728x90';
                            //TEST.targeting = 'test.5887.dev/build-url-test;sz=728x90';
                            //document.write('<script src="http://ad.doubleclick.net/adj/' + TEST.targeting + ';ord=' + TEST.ord + '?"><\/script>');
                            //]]>
                        </script>
                    </div>
                    <!-- end ad tag -->
                </th>
            </tr>
        </table>
    </div>

    <div id="test-call" class="tempAds">
        <table>
            <tr>
                <th>test-call (hardcoded) (disabled)<br>

                    <div>
                        <script>
                            //document.write('<script src="http://ad.doubleclick.net/adj/test.5887.dev/build-url-test;sz=468x60,728x90;pos=banlb;bht=false;tile=1;ord=' + TEST.ord + '?"></' + 'script>');
                        </script>
                    </div>
                </th>
            </tr>
        </table>
    </div>

</div>
<hr/>
<b>Divs present here for testing the div location logic</b>

<div id="hasAdClassTests">
    <div id="not-an-ad">
        A div which has none of the expected ad classes on it.
    </div>
    <div id="falcon-ad" class="advertising">
        A falcon ad div with advertising class on it.
    </div>
    <div id="legacy-ad-placeholder" class="ad-placeholder">
        A legacy ad div with placeholder class on it.
    </div>
    <div id="legacy-ad-container" class="ad-container">
        A legacy ad div with container class on it.
    </div>
    <div id="not-exact-class" class="padvertising advertisings ad-placeholder-thing ad-container-thing">
        A falcon ad div with no exact advertising class
    </div>
</div>
<div id="getAdContainerTests">
    <div id='parent-collapse' class="advertising">
        Parent Div containing an ad
        <div id="ad-pos-1">
            An ad position where parent has the advertising class on it.
        </div>
    </div>
    <div id='grandparent-collapse' class='advertising'>
        Grandparent Div containing an ad
        <div>
            <div id="ad-pos-2">
                An ad position where grandparent has the advertising class on it.
            </div>
        </div>
    </div>
    <div id='great-grandparent-collapse' class='advertising'>
        Great-grandparent Div containing an ad
        <div>
            <div>
                <div id="ad-pos-3">
                    An ad position where great-grandparent has the advertising class on it.
                </div>
            </div>
        </div>
    </div>
    <div id='great-great-grandparent-collapse' class='advertising'>
        Great-Great-grandparent Div containing an ad
        <div>
            <div>
                <div>
                    <div id="ad-pos-4">
                        An ad position where great-great-grandparent has the advertising class on it.
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id='great-great-great-grandparent-collapse' class='advertising'>
        Great-Great-Great-grandparent Div containing an ad
        <div>
            <div>
                <div>
                    <div>
                        <div id="ad-pos-5">
                            An ad position where great-great-great-grandparent has the advertising class on it.
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id='too-many-parent-collapse' class='advertising'>
        Too many parent Div before ad class found
        <div>
            <div>
                <div>
                    <div class='ad-container'>
                        <!-- legacy class not detected in falcon mode -->
                        <div>
                            <div id="ad-pos-6">
                                An ad position where parent too far away has the advertising class on it.
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="getAdContainerTestsLegacy">
    <div id='parent-collapse-legacy' class="ad-placeholder">
        Parent Div containing an ad
        <div id="ad-placeholder-ad-pos-legacy-1">
            An ad position placeholder where parent has the advertising class on it.
        </div>
        <div id="ad-container-ad-pos-legacy-1">
            An ad position container where parent has the advertising class on it.
        </div>
    </div>
    <div id='grandparent-collapse-legacy' class='ad-container'>
        Grandparent Div containing an ad
        <div>
            <div id="ad-placeholder-ad-pos-legacy-2">An ad position
                placeholder where grandparent has the advertising class on it.
            </div>
            <div id="ad-container-ad-pos-legacy-2">An ad position
                container where grandparent has the advertising class on it.
            </div>
        </div>
    </div>
    <div id='great-grandparent-collapse-legacy' class='ad-placeholder'>
        Great-grandparent Div containing an ad
        <div>
            <div>
                <div id="ad-placeholder-ad-pos-legacy-3">
                    An ad position placeholder where great-grandparent has the advertising class on it.
                </div>
                <div id="ad-container-ad-pos-legacy-3">
                    An ad position container where great-grandparent has the advertising class on it.
                </div>
            </div>
        </div>
    </div>
    <div id='great-great-grandparent-collapse-legacy' class='ad-container'>
        Great-Great-grandparent Div containing an ad
        <div>
            <div>
                <div>
                    <div id="ad-placeholder-ad-pos-legacy-4">An ad position
                        placeholder where great-great-grandparent has the advertising
                        class on it.
                    </div>
                    <div id="ad-container-ad-pos-legacy-4">An ad position
                        container where great-great-grandparent has the advertising class
                        on it.
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id='too-many-parent-collapse-legacy' class='ad-placeholder'>
        Too many parent Div before ad class found
        <div>
            <div>
                <div class='advertising'>
                    <!-- falcon class not detected in legacy mode -->
                    <div>
                        <div>
                            <div id="ad-container-ad-pos-legacy-6">An ad position
                                container where parent too far away has the advertising class
                                on it.
                            </div>
                            <div id="ad-placeholder-ad-pos-legacy-6">An ad position
                                placeholder where parent too far away has the advertising class
                                on it.
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<hr/>
<b>Divs present here for testing setInitialAdState and checkAdState functions</b>

<div id="adStateTests">
    <div id="adState1" class="advertising">
        <script>
            var x = "FT.ads.request('adState1');";
        </script>
    </div>
    <div id="adStateChanged" class="advertising">
        <script>
            var x = "FT.ads.request('adState1');";
            x = "more added to the div";
        </script>
    </div>
    <div id="adStateSysDefault" class="advertising">
        <script>
            var x = "FT.ads.request('adState1');";
            x = "http://s0.2mdn.net/viewad/817-grey.gif";
        </script>
    </div>
    <div id="adStateInterstitial" class="advertising">
        <script>
            var x = "FT.ads.request('adState1');";
            x = "<!-- Begin Interstitial Ad -->";
        </script>
    </div>
    <div id="adStateEmptyAd" class="advertising">
        <script>
            var x = "FT.ads.request('adState1');";
            x = "http://s0.2mdn.net/6253412893/ft-no-ad-320x250.gif";
        </script>
    </div>
    <div id="adStateEmptyInterstitial" class="advertising">
        <script>
            var x = "FT.ads.request('adState1');";
            x = "http://s0.2mdn.net/6253412893/ft-no-ad-320x250.gif";
            x = "<!-- Begin Interstitial Ad -->";
        </script>
    </div>
    <div id="adStateSysDefaultInterstitial" class="advertising">
        <script>
            var x = "FT.ads.request('adState1');";
            x = "http://s0.2mdn.net/viewad/817-grey.gif";
            x = "<!-- Begin Interstitial Ad -->";
        </script>
    </div>
</div>

<script>
function myparseInt(string) {
    // to avoid jslint messages
    return parseInt(string, 10);
}

function show_env(msg) {
    debug("Showing Test Harness for " + msg);
    var AdsInfo = {};
    for (var prop in FT.ads) {
        if (typeof(FT.ads[prop]) !== 'function') {
            AdsInfo[prop] = FT.ads[prop];
        }
    }
    debug("FT.Properties = " + jsDump.parse(FT.Properties));
    debug("FT.env = " + jsDump.parse(FT.env));
    debug("FT.ads (filtered) = " + jsDump.parse(AdsInfo));
}

// Similar to perl's x operator
// r = x("123", 3) => '123123123'
function x(string, repeats) {
    var result = '';
    for (var loop = 0; loop < repeats; loop++) {
        result += string;
    }
    return result;
}

function hasIDX(List, idx) {
    idx = idx < 10 ? '0' + idx : '' + idx;
    for (var loop = 0; loop < List.length; ++loop) {
        if (List[loop] === idx) {
            return true;
        }
    }
    return false;
}

// Extract all the DFP parameters from the ad call URL
// http://ad.doubleclick.net/adj/test.5887.dev/bsac1;sz=468x60,728x90;pos=banlb;ord=1234567890?
// results in {
//	 _order: ['sz', 'pos', 'ord'],
//	 sz: '468x60,728x90',
//	 pos: 'banlb',
//	 ord: '1234567890?'
// }
function extract_params(url) {
    var Order = [];
    var Params = { '_order':Order };
    var SplitURL = url.split(';');
    for (var idx = 1; idx < SplitURL.length; ++idx) {
        var Parts = SplitURL[idx].split('=');
        var key = Parts.shift();
        var value = Parts.join('=');
        Order.push(key);
        if (Params[key]) {
            Params[key] = Params[key] + ";" + value;
        } else {
            Params[key] = value;
        }
    }
    return Params;
}

// TODO: This stuff should be in the QUnit module setup function?
// Resets all global variables to indicate a new page and new ad request.
function beginNewPage(message, Args) {
    Args = Args || {};
    Args.env = Args.env || {};
    FT.env = $.extend({}, {
        'dfp_site':'test.5887.dev',
        'dfp_zone':'build-url-test'
    }, Args.env);
    if (Args.ENV) {
        FT.Properties.ENV = Args.ENV;
    }
    FT.ads.resetLibrary();
}

function maybeInitFixture() {
    if (!FT.ads.hasCalledInitDFP) {
        FT.ads.initDFP();
        beginNewPage('maybeInitFixture for running a single test suite.');
    }
    ok(FT.ads.hasCalledInitDFP, 'DFP Ads system should be initialized');
}

function testDetectAdMode(FTQA, env, result, message) {
    if (FTQA) {
        mockCookies.FTQA = FTQA;
    } else {
        mockCookies.noFTQA = "true";
    }
    equal(FT.ads.detectAdMode(env), result, message);
}

function testInvalidSiteZone(result, message, diagnostic, pos) {
    pos = pos || 'banlb';
    diagnostic = diagnostic || 'dfp_site/zone are invalid';
    equal(result, 'default', message + ": dfp site/zone invalid - uses default");
    equal(get_diagnostic(pos, 'checkSiteZone'), diagnostic, "Diagnostic recorded about invalid site/zone");
    equal(FT.env.dfp_site, TEST.Unclassified.dfp_site, 'FT.env.dfp_site should be');
    equal(FT.env.dfp_zone, TEST.Unclassified.dfp_zone, 'FT.env.dfp_zone should be');
}

function testInvalidAdSlot(result, message, diagnostic, pos) {
    pos = pos || 'banlb';
    diagnostic = diagnostic || 'dfp_site/zone are invalid';
    equal(result, 'invalid', message + ": dfp site/zone invalid");
    equal(get_diagnostic(pos, 'checkSiteZone'), diagnostic, "Diagnostic recorded about invalid site/zone");
    differs(FT.env.dfp_site, TEST.Unclassified.dfp_site, 'FT.env.dfp_site should be');
    differs(FT.env.dfp_zone, TEST.Unclassified.dfp_zone, 'FT.env.dfp_zone should be');
}

function testValidSiteZone(result, message, pos) {
    equal(result, 'ok', message + ": dfp site/zone is valid");
    equal(get_diagnostic(pos, 'checkSiteZone'), undefined, " No Diagnostic recorded");
    differs(FT.env.dfp_site, TEST.Unclassified.dfp_site, 'FT.env.dfp_site should not be');
    differs(FT.env.dfp_zone, TEST.Unclassified.dfp_zone, 'FT.env.dfp_zone should not be');
}

function testBuildURL(message, Args) {
    Args = Args || {};
    Args = $.extend({}, TEST.DefaultAdTag, Args);
    FT.ads.setInitialAdState(Args.pos);
    var url = FT.ads.buildURL(Args.pos);
    ok(true, "== BEGIN: " + message + " [" + url + "]");
    return url;
}

function testErightsID(message) {
    var eid = FT.ads.erightsID();
    ok(true, "== BEGIN: " + message);
    return eid;
}


function testIsLoggedIn(message) {
    var isLoggedIn = FT.ads.isLoggedIn();
    ok(true, "== BEGIN: " + message);
    return isLoggedIn;
}


function testGetIP(message) {
    var ip = FT.ads.getIP();
    ok(true, "== BEGIN: " + message);
    return ip;
}

function testEncodeIP(ip, message) {
    var encodedIP = FT.ads.encodeIP(ip);
    ok(true, "== BEGIN: " + message);
    return encodedIP;
}

function testHasAdClass(name, result, explanation) {
    var rTestDiv = document.getElementById(name);
    ok(rTestDiv, "Test div " + name + " exists");
    if (rTestDiv) {
        equal(FT.ads.hasAdClass(rTestDiv), result, "Div " + name + " " + explanation);
    }
}

function testGetNamedAdContainer(name, result, explanation) {
    var rDiv = FT.ads.getNamedAdContainer(name);
    var id = '-none-';
    if (rDiv) {
        id = rDiv.id;
        rDiv = true;
    }
    equal(rDiv, result ? true : null, "Div " + name + " " + explanation);
    if (rDiv) {
        equal(id, result, "Div " + name + " has id " + explanation);
    }
}

function testGetAdContainers(name, result, explanation) {
    var Containers = FT.ads.getAdContainers(name);
    var Names = [];
    if (Containers.length) {
        for (var idx = 0; idx < Containers.length; ++idx) {
            Names.push(Containers[idx].name);
        }
        equal(Names.join(", "), result, "Div " + name + " (name) " + explanation);
    } else {
        equal(Containers.length, result, "Div " + name + " (name) " + explanation);
    }
}

function testGetAdContainer(name, result, explanation) {
    var rContainer = FT.ads.getAdContainer(name);
    var rDiv = false;
    if (rContainer.div) {
        rDiv = true;
    }
    equal(rDiv, result ? true : false, "Div " + name + " (div) " + explanation);
    equal(rContainer.name, result, "Div " + name + " (name) " + explanation);
}

function testGetAdInnerHTML(name, result, explanation) {
    var content = FT.ads.getAdInnerHTML(name);
    if (content) {
        content = content.replace(/&lt;/gi, ' ');
        content = content.replace(/&gt;/gi, ' ');
        content = content.replace(/</g, ' ');
        content = content.replace(/>/g, ' ');
        content = content.replace(/\s+/g, ' ');
        content = content.replace(/^\s+/g, '');
        content = content.replace(/\s+$/g, '');
    }
    equal(content, result, "Div " + name + " (name) " + explanation);
}

function testAdCall(pos, message) {
    mockCookies.AYSC = "_011967_02M_04greater%2520london_05ITT_06TEC_07MA_12SE19HL_13GBR_14GBR_15UK_17london_18london_190500_20n_2112_22P0P2Tools_24europe_25PVT_26PVT_273f5a2e_40forty_41fortyone_42fortytwo_43fortythree_44fortyfour_45fortyfive_46fortysix_47fortyseven_48fortyeight_49fortynine_50fifty_51fiftyone_52fiftytwo_53fiftythree_54fiftyfour_55fiftyfive_56fiftysix_57fiftyseven_58fiftyeight_59fiftynine_60sixty_";
    mockCookies.FT_U = "_EID=4326601_PID=4004326601_TIME=%5BThu%2C+07-May-2009+13%3A27%3A45+GMT%5D_SKEY=9e7iw%2BskQZwnnX2e29as1w%3D%3D_RI=1_";
    mockCookies.rsi_segs = "H07711_10108|J07717_10576|J07717_10089|J07717_10502|J07717_10236|J07717_10286|J07717_10288|J07717_10295|J07717_10299|J07717_10301|J07717_10322|J07717_10344|J07717_10345|J07717_10357|J07717_10369|J07717_10530|J07717_10555|J07717_10545|J07717_10221|H07711_10127";
    var url = testBuildURL(message, {
                'pos':pos
            }
    );
    FT.ads.addDiagnostic(pos, { "requestUrl":url });
}

function testAdState(pos, rResult, what, callType) {
    callType = callType || "normal";
    equal(FT.ads.adverts[pos].callType, callType, what + " FT.ads.adverts." + pos + ".callType should be ");
    for (var key in rResult) {
        if (rResult.hasOwnProperty(key)) {
            if (getType(rResult[key]) === "regexp") {
                matches(FT.ads.adverts[pos].state[key], rResult[key], what + " FT.ads.adverts." + pos + ".state." + key + " should be ");
            } else {
                equal(FT.ads.adverts[pos].state[key], rResult[key], what + " FT.ads.adverts." + pos + ".state." + key + " should be ");
            }
        }
    }
}

function getCurrentYear() {
    var currDate = new Date();
    return currDate.getFullYear();
}

function testCorpCookieMatchAndBuildAdURL(expectedUrl, expectedCorpMatch) {
    var htmlAds = new FT.HTMLAds();
    htmlAds.urlStem = '';
    var AYSC97 = FT._ads.utils.getCookieParam('AYSC', "97") || "";
    var AYSC98 = FT._ads.utils.getCookieParam('AYSC', "98") || "";
    var AYSC22 = FT._ads.utils.getCookieParam('AYSC', "22") || "";
    var AYSC27 = FT._ads.utils.getCookieParam('AYSC', "27") || "";
    var AYSC_OK = htmlAds.isCorporateUser(AYSC97, AYSC98, AYSC22, AYSC27, FT.ads.CONST.SubsLevelReplaceLookup);
    if (AYSC_OK == 1) {
        var url = htmlAds.buildAdURL(AYSC98, AYSC22, AYSC27, FT.ads.CONST.SubsLevelReplaceLookup);
        equal(url, expectedUrl, url);
    }
    equal(AYSC_OK, expectedCorpMatch, AYSC_OK);
}


$(document).ready(function () {
    module("DartForPublishers", {
        setup:function () {
            mockCookies = {};
            FT._ads.utils.cookies = mockObject(mockCookies);
            //clock = sinon.useFakeTimers();
        },
        teardown:function () {
            //clock.restore()
        }
    });

    test("getType() test helper", function () {
        expect(1);
        equal($.type(FT.ads), 'object', "getType(FT.ads)");
    });

    test("arrayLike() test helper", function () {
        equal(arrayLike(FT.ads), false, "arrayLike(FT.ads) should be false");
    });

    test("type() test helper", function () {
        equal(type(FT.ads), 'object', "type(FT.ads)");
    });

    test("type_size() test helper", function () {
        expect(1);
        matches(type_size(FT.ads), '^object\\[\\d+\\]$', "type_size(FT.ads)");
    });

    test("hasIDX() test helper", function () {
        expect(5);
        var List = ['01', '04', '22'];
        equal(hasIDX(List, 0), false, "hasIDX 0 should be false");
        equal(hasIDX(List, 45), false, "hasIDX 45 should be false");
        ok(hasIDX(List, 1), "hasIDX 1 should be true");
        ok(hasIDX(List, 4), "hasIDX 4 should be true");
        ok(hasIDX(List, 22), "hasIDX 22 should be true");
    });

    test("extract_params", function () {
        var Params = extract_params("http://ad.eg.doubleclick.net/jump/cicero.5887.counterintelligence/antagonistically-anthropological;sz=336x850,336x280,300x600,300x250;dcopt=ist;pos=marketingrib;aid=j07717;a=232;a=89;a=94;a=97;a=105;a=236;a=288;a=295;a=299;a=369;a=555;a=545;a=999;a=998;a=997;a=996;a=995;a=994;a=993;a=992;06=mkt;07=md;19=1000;27=541c6c;40=forty;41=fortyone;42=fortytwo;43=fortythree;44=fortyfour;45=fortyfive;46=fortysix;47=fortyseven;48=fortyeight;49=fortynine;50=fifty;51=fiftyone;52=fiftytwo;53=fiftythree;54=fiftyfour;55=fiftyfive;56=fiftysix;57=fiftyseven;58=fiftyeight;59=fiftynine;60=sixty;02=f;05=bkg;20=n;slv=edt;01=1923;cn=nor;eid=4232374;14=chl;u=eid=4232374,pid=2341223;bht=false;tile=16;ord=1234567890?");
        //debug(jsDump.parse(Params));
        //var $KEYS = "sz,dcopt,pos,aid,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,06,07,19,27,02,05,20,slv,01,cn,eid,14,u,bht,tile,ord";
        $KEYS = "sz,dcopt,pos,aid,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,06,07,19,27,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,02,05,20,slv,01,cn,eid,14,u,bht,tile,ord";
        equal(Params._order.join(','), $KEYS, "Testing a big convoluted URL: key order");
        equal(Params.sz, "336x850,336x280,300x600,300x250", "sz - check parameter value");
        var $AID = "232;89;94;97;105;236;288;295;299;369;555;545;999;998;997;996;995;994;993;992";
        equal(Params.a, $AID, "a - multi-valued settings are separated by ';'");
        equal(Params.u, "eid=4232374,pid=2341223", "u - multi key-valued setting");
        equal(Params.ord, "1234567890?", "ord - last value");
    });

    test("FT.ads.detectDFPTargeting", function () {
        equal(FT.ads.detectDFPTargeting({}), false, "site + zone missing -> false");
        equal(FT.ads.detectDFPTargeting({ 'dfp_zone':'uk'}), false, "site missing -> false");
        equal(FT.ads.detectDFPTargeting({ 'dfp_site':'test.5887.home'}), false, "zone missing -> false");
        equal(FT.ads.detectDFPTargeting({ 'dfp_site':null, 'dfp_zone':null}), false, "site + zone null -> false");
        equal(FT.ads.detectDFPTargeting({ 'dfp_site':'', 'dfp_zone':''}), false, "site + zone empty -> false");
        equal(FT.ads.detectDFPTargeting({ 'dfp_site':'', 'dfp_zone':'uk'}), false, "site empty -> false");
        equal(FT.ads.detectDFPTargeting({ 'dfp_site':'test.5887.home', 'dfp_zone':''}), false, "zone empty -> false");
        equal(FT.ads.detectDFPTargeting({ 'dfp_site':'test.5887.home', 'dfp_zone':'uk'}), true, "site + zone good -> true");
    });

    test("FT.ads.detectAdMode", function () {
        expect(20);
        //show_env('detectAdMode');

        var rDefaultSwitch = FT.Advertising.prototype.isDefaultAdModeDFP;

        // Force into DFP default mode
        var mode = "DFP mode: ";
        FT.Advertising.prototype.isDefaultAdModeDFP = function () {
            return true;
        };

        equal(FT.ads.isDefaultAdModeDFP(), true, "Default ad mode should be DFP");
        // No FTQA cookie - use DFP regardless of if DFP targeting present on the page.
        testDetectAdMode(
                /* FTQA = */ null,
                /* FT.env = */ {},
                true, // result = use DFP system
                mode + "FTQA = null, env = {} -> true"
        );
        testDetectAdMode(/* FTQA = */ null, { 'dfp_site':'test.5887.home', 'dfp_zone':'uk' }, true, mode + "FTQA = null, env = site + zone good -> true");
        // FTQA = neither ads
        testDetectAdMode('nothing', {}, true, mode + "FTQA = 'nothing', env = {} -> false");
        testDetectAdMode('nothing', { 'dfp_site':'test.5887.home', 'dfp_zone':'uk' }, true, mode + "FTQA = 'nothing', env = site + zone good -> true");
        // FTQA = old_ads -- no longer supported always DFP now
        testDetectAdMode('old_ads', {}, true, mode + "FTQA = old_ads, env = {} -> true (always DFP now)");
        testDetectAdMode('old_ads', { 'dfp_site':'test.5887.home', 'dfp_zone':'uk' }, true, mode + "FTQA = old_ads, env = site + zone good -> true (always DFP now)");
        // FTQA = dfp_ads
        testDetectAdMode('dfp_ads', {}, true, mode + "FTQA = dfp_ads, env = {} -> true");
        testDetectAdMode('dfp_ads', { 'dfp_site':'test.5887.home', 'dfp_zone':'uk' }, true, mode + "FTQA = dfp_ads, env = site + zone good -> true");

        // Now Force into DE as default mode - CANNOT DO ANYMORE
        mode = "DE mode: ";
        FT.Advertising.prototype.isDefaultAdModeDFP = function () {
            return false;
        };

        equal(FT.ads.isDefaultAdModeDFP(), false, "Default ad mode function should be DE (isn't used)");
        // No FTQA cookie - use DE regardless of if DFP targeting present on the page.
        testDetectAdMode(
                /* FTQA = */ null,
                /* FT.env = */ {},
                true, // result = ALWAYS use DFP system
                mode + "FTQA = null, env = {} -> false"
        );
        testDetectAdMode(/* FTQA = */ null, { 'dfp_site':'test.5887.home', 'dfp_zone':'uk' }, true, mode + "FTQA = null, env = site + zone good -> true (always DFP now)");
        // FTQA = neither ads
        testDetectAdMode('nothing', {}, true, mode + "FTQA = 'nothing', env = {} -> true (always DFP now)");
        testDetectAdMode('nothing', { 'dfp_site':'test.5887.home', 'dfp_zone':'uk' }, true, mode + "FTQA = 'nothing', env = site + zone good -> true (always DFP now)");
        testDetectAdMode('nothing', { 'dfp_site':'ftcom.5887.video', 'dfp_zone':'uk' }, true, mode + "FTQA = 'nothing', env = VIDEO site must be DFP -> true");
        testDetectAdMode('nothing', { 'dfp_site':'test.5887.video', 'dfp_zone':'uk' }, true, mode + "FTQA = 'nothing', env = VIDEO test site must be DFP -> true");
        // FTQA = old_ads
        testDetectAdMode('old_ads', {}, true, mode + "FTQA = old_ads, env = {} -> true (always DFP now)");
        testDetectAdMode('old_ads', { 'dfp_site':'test.5887.home', 'dfp_zone':'uk' }, true, mode + "FTQA = old_ads, env = site + zone good -> true (always DFP now)");
        // FTQA = dfp_ads
        testDetectAdMode('dfp_ads', {}, true, mode + "FTQA = dfp_ads, env = {} -> true");
        testDetectAdMode('dfp_ads', { 'dfp_site':'test.5887.home', 'dfp_zone':'uk' }, true, mode + "FTQA = dfp_ads, env = site + zone good -> true");

        // Restore the master switch
        FT.Advertising.prototype.isDefaultAdModeDFP = rDefaultSwitch;
    });

    test("FT.ads Initialization", function () {
        // Force into DFP default mode
        FT.Advertising.prototype.isDefaultAdModeDFP = function () {
            return true;
        };

        //show_env('Before initDFP');
        ok(true, "== Verify environment before initDFP() called");
        equal(FT.Properties && FT.Properties.ENV, 'ci', "FT.Properties.ENV is ci");
        equal(FT.env && FT.env.dfp_site, 'test.5887.dev', "FT.env.dfp_site is present");
        equal(FT.env && FT.env.dfp_zone, 'dfp-advertising-test', "FT.env.dfp_zone is present");
        equal(FT.ads && type(FT.ads.baseAdvert), 'object', "FT.ads.baseAdvert exists");
        ok(FT.ads && FT.ads.baseAdvert && FT.ads.baseAdvert.tile !== 1, "FT.ads.baseAdvert.tile is legacy value - current date");
        equal(FT.ads && FT.ads.baseAdvert && FT.ads.baseAdvert.ord, undefined, "FT.ads.baseAdvert.ord does not exist - indicates not currently DFP");

        FT.ads.initDFP();
        //show_env('After initDFP');
        ok(true, "== Verify environment after initDFP() called");
        equal(FT.Properties && FT.Properties.ENV, 'ci', "FT.Properties.ENV is still ci");
        equal(FT.env && FT.env.dfp_site, 'test.5887.dev', "FT.env.dfp_site is still present");
        equal(FT.env && FT.env.dfp_zone, 'dfp-advertising-test', "FT.env.dfp_zone is still present");
        ok(FT.env && FT.env.useDFP, "FT.env.useDFP flag now indicates using DFP");
        ok(FT.ads && FT.ads.useDFP, "FT.ads.useDFP flag indicates using DFP");
        equal(FT.ads && type(FT.ads.baseAdvert), 'object', "FT.ads.baseAdvert still exists");
        equal(FT.ads && FT.ads.baseAdvert && FT.ads.baseAdvert.tile, 1, "FT.ads.baseAdvert.tile is now DFP value");
        equal(FT.ads && FT.ads.baseAdvert.hasInterstitial, false, "FT.ads.baseAdvert.hasInterstitial flag indicates no interstitals requested yet.");

        var ord = FT.ads && FT.ads.baseAdvert && FT.ads.baseAdvert.ord;
        var length = '' + ord;
        length = length.length;
        equal(FT.ads && FT.ads.baseAdvert && type(FT.ads.baseAdvert.ord), 'number', "FT.ads.baseAdvert.ord is DFP value random digits: " + ord);
        ok(length <= 16, "FT.ads.baseAdvert.ord is <= 16 digits: " + length);
        equal(FT.ads && type(FT.ads.CONST), 'object', "FT.ads.CONST constants exist");

        beginNewPage('FT.ads Initialization - custom site and FTQA cookie', {
                    'env':{ 'dfp_site':'test.5887.blogs' }
                }
        );
        mockCookies.FTQA = "debug,adcalls,dfp_ads";
        //show_env('After new page with FTQA cookies');
        ok(true, "== Verify environment after new page begins");
        equal(FT.Properties && FT.Properties.ENV, 'ci', "FT.Properties.ENV is still ci");
        equal(type_size(FT.env), 'object[3]', "FT.env is still present and has default site/zone data");
        equal(FT.env && FT.env.dfp_site, 'test.5887.blogs', "FT.env.dfp_site is customised");
        equal(FT.env && FT.env.dfp_zone, 'build-url-test', "FT.env.dfp_zone is now default");
        ok(FT.env && FT.env.useDFP, "FT.env.useDFP flag now indicates using DFP");
        ok(FT.ads && FT.ads.useDFP, "FT.ads.useDFP flag still indicates using DFP");
        equal(FT.ads && type(FT.ads.baseAdvert), 'object', "FT.ads.baseAdvert still exists");
        equal(FT.ads && FT.ads.baseAdvert && FT.ads.baseAdvert.tile, 1, "FT.ads.baseAdvert.tile is still the deepEqual");
        equal(FT.ads && FT.ads.baseAdvert && type(FT.ads.baseAdvert.ord), 'number', "FT.ads.baseAdvert.ord is still there");
        differs(FT.ads && FT.ads.baseAdvert && FT.ads.baseAdvert.ord, ord, "FT.ads.baseAdvert.ord value has changed");
        equal(FT.ads && FT.ads.baseAdvert.hasInterstitial, false, "FT.ads.baseAdvert.hasInterstitial flag still there.");
        equal(FT.ads && type(FT.ads.CONST), 'object', "FT.ads.CONST constants still exist");
    });

    test("FT.ads.foreach()", function () {
        maybeInitFixture();

        var foreach = FT.ads.foreach;
        var Results = [];

        Results = [];
        foreach(undefined, function (item, idx) {
            ok(false, "undefined shouldn't be iterated over");
        });
        deepEqual(Results, [], "foreach on undefined should not add elements to the empty array");

        Results = [];
        foreach(null, function (item, idx) {
            ok(false, "null shouldn't be iterated over");
        });
        deepEqual(Results, [], "foreach on null should not add elements to the empty array");

        Results = [];
        foreach(false, function (item, idx) {
            ok(false, "false shouldn't be iterated over");
        });
        deepEqual(Results, [], "foreach on false should not add elements to the empty array");

        Results = [];
        foreach(true, function (item, idx) {
            ok(false, "true shouldn't be iterated over");
        });
        deepEqual(Results, [], "foreach on true should not add elements to the empty array");

        Results = [];
        foreach(0, function (item, idx) {
            ok(false, "zero shouldn't be iterated over");
        });
        deepEqual(Results, [], "foreach on zero should not add elements to the empty array");

        Results = [];
        foreach(function () {
        }, function (item, idx) {
            ok(false, "function shouldn't be iterated over");
        });
        deepEqual(Results, [], "foreach on a function should not add elements to the empty array");

        Results = [];
        foreach("", function (item, idx) {
            ok(false, "Empty string shouldn't be iterated over");
        });
        deepEqual(Results, [], "foreach on an empty string should not add elements to the empty array");

        Results = [];
        foreach([], function (item, idx) {
            ok(false, "Empty array shouldn't be iterated over");
        });
        deepEqual(Results, [], "foreach on an empty array should not add elements to the empty array");

        Results = [];
        foreach([1, 2, 3], function (item, idx) {
            Results.push(item + "-" + idx);
        });
        deepEqual(Results, ['1-0', '2-1', '3-2'], "foreach on an array should loop over each item with index");

        Results = [];
        foreach({}, function (item, idx) {
            ok(false, "Empty object shouldn't be iterated over");
        });
        deepEqual(Results, [], "foreach on an empty object should not add elements to the empty array");

        Results = {};
        var obj = {
            'hello':'world'
        };
        obj[42] = '42';

        foreach(obj, function (prop, value) {
            Results[prop] = value;
        });
        deepEqual(Results, obj, "foreach on an object should loop over each item with key / value");

        var Child = function () {
        };
        Child.prototype = {prototypalProerty:true};

        var child = new Child();
        child.instanceProperty = 'true';
        child.func = function () {
        };
        child.obj = {'value':'something'};

        Results = {};
        foreach(child, function (prop, value) {
            Results[prop] = value;
        });

        var expectedResults = {
            instanceProperty:'true',
            obj:{'value':'something'}
        };
        deepEqual(Results, expectedResults, "foreach on an object should loop over each item with key / value");
    });

    test("FT.ads.getKeys", function () {
        maybeInitFixture();
        beginNewPage('getKeys test');

        var ObjEmpty = {};
        var ObjFull = {
            'z':2,
            'a':1,
            't':6
        };
        var Result = FT.ads.getKeys(ObjEmpty);
        equal(Result.length, 0, "Check that no keys for an empty object");

        Result = FT.ads.getKeys([]);
        equal(Result.length, 0, "Check that no keys returned for an array (non-object)");

        equal(FT.ads.getKeys([1, 2, 3]).length, 0, "A non-zero length array should return array with length");
        Result = FT.ads.getKeys(ObjFull);
        var result = Result.sort().join(", ");
        equal(Result.length, 3, "Check that correct number of keys in the returned array");
        equal(result, 'a, t, z', "Check that correct keys are returned");
    });

    test("FT.ads.checkAdServerCountry", function () {
        maybeInitFixture();
        //show_env('checkAdServerCountry');
        // Invalid or unknown countries are false
        var idx, iso2;
        for (idx = 0; idx < TEST.InvalidISO2Codes.length; ++idx) {
            iso2 = TEST.InvalidISO2Codes[idx];
            equal(FT.ads.checkAdServerCountry(iso2), false, iso2 + " is invalid");
        }

        // Known countries are true
        for (idx = 0; idx < TEST.AdServerCodes.length; ++idx) {
            iso2 = TEST.AdServerCodes[idx];
            ok(FT.ads.checkAdServerCountry(iso2), iso2 + " is valid");
        }
    });

    test("FT.ads.adServerCountry", function () {
        maybeInitFixture();
        var def = "ad.doubleclick.net";
        // Invalid or unknown countries use the default US server.
        equal(FT.ads.adServerCountry(), def, "undefined -> default");
        equal(FT.ads.adServerCountry(null), def, "null -> default");
        equal(FT.ads.adServerCountry(''), def, "'' -> default");
        equal(FT.ads.adServerCountry('EGYPT'), def, "EGYPT -> default");
        equal(FT.ads.adServerCountry('PVT'), def, "PVT -> default");
        equal(FT.ads.adServerCountry('NUL'), def, "NUL -> default");
        equal(FT.ads.adServerCountry('USA'), def, "USA -> default");

        // Known countries use the correct ad server.
        for (var iso3 in TEST.ISOGoodMap) {
            var $EXPECT = "ad." + TEST.ISOGoodMap[iso3] + ".doubleclick.net";
            equal(FT.ads.adServerCountry(iso3), $EXPECT, "Map " + iso3 + " -> " + TEST.ISOGoodMap[iso3]);
        }

        // Unsupported ad servers use default server
        for (var idx = 0; idx < TEST.ISOInvalid.length; ++idx) {
            equal(FT.ads.adServerCountry(TEST.ISOInvalid[idx]), def, TEST.ISOInvalid[idx] + " -> default");
        }
    });

    test("FT.ads.hasClassName", function () {
        maybeInitFixture();
        beginNewPage('hasClassName');
        var className = "advertising ad-placeholder-banlb";
        equal(FT.ads.hasClassName(className, 'advertising'), true, "has 'advertising' class name");
        equal(FT.ads.hasClassName(className, 'ad-placeholder-banlb'), true, "has 'ad-placeholder-banlb' class name");
        equal(FT.ads.hasClassName(className, 'noclassname'), false, "has not got 'noclassname' class name");
        equal(FT.ads.hasClassName(className, 'ad-placeholder'), false, "has not got substring 'ad-placeholder' as class name");
    });

    test("FT.ads.hasAdClass", function () {
        maybeInitFixture();
        beginNewPage('hasAdClass');
        var flag = FT.env.isLegacyAPI;
        FT.env.isLegacyAPI = false;
        testHasAdClass('not-an-ad', false, "has no advertising class name");
        testHasAdClass('not-exact-class', false, "has no advertising class name (though substring matches)");
        testHasAdClass('falcon-ad', true, "has falcon advertising class name");
        testHasAdClass('legacy-ad-placeholder', false, "has legacy placeholder advertising class name");
        testHasAdClass('legacy-ad-container', false, "has legacy container advertising class name");

        // Legacy mode test cases can be removed when the entire site is free of legacy ad calls
        FT.env.isLegacyAPI = true;
        testHasAdClass('not-an-ad', false, "has no advertising class name - Legacy mode");
        testHasAdClass('not-exact-class', false, "has no advertising class name (though substring matches)");
        testHasAdClass('falcon-ad', false, "has falcon advertising class name - Legacy mode");
        testHasAdClass('legacy-ad-placeholder', true, "has legacy placeholder advertising class name - Legacy mode");
        testHasAdClass('legacy-ad-container', true, "has legacy container advertising class name - Legacy mode");
        FT.env.isLegacyAPI = flag;
    });

    test("FT.ads.getNamedAdContainer", function () {
        maybeInitFixture();
        beginNewPage('getNamedAdContainer');
        var flag = FT.env.isLegacyAPI;
        FT.env.isLegacyAPI = false;
        testGetNamedAdContainer('ad-pos-not-exists', null, "div does not exists");
        testGetNamedAdContainer('ad-pos-5', 'ad-pos-5', "no advertising class name in any immediate parents");
        testGetNamedAdContainer('ad-pos-6', 'ad-pos-6', "advertising class name is too many parents away");
        testGetNamedAdContainer('ad-pos-1', 'parent-collapse', "parent has falcon advertising class name");
        testGetNamedAdContainer('ad-pos-2', 'grandparent-collapse', "grandparent has falcon advertising class name");
        testGetNamedAdContainer('ad-pos-3', 'great-grandparent-collapse', "great-grandparent has falcon advertising class name");
        testGetNamedAdContainer('ad-pos-4', 'great-great-grandparent-collapse', "great-great-grandparent has falcon advertising class name");

        // Legacy mode test cases can be removed when the entire site is free of legacy ad calls
        FT.env.isLegacyAPI = true;
        testGetNamedAdContainer('ad-placeholder-ad-pos-legacy-5', null, "div does not exist");
        testGetNamedAdContainer('ad-placeholder-ad-pos-legacy-6', 'ad-placeholder-ad-pos-legacy-6', "advertising class name is too many parents away");
        testGetNamedAdContainer('ad-placeholder-ad-pos-legacy-1', 'parent-collapse-legacy', "parent has legacy advertising class name");
        testGetNamedAdContainer('ad-placeholder-ad-pos-legacy-2', 'grandparent-collapse-legacy', "grandparent has legacy advertising class name");
        testGetNamedAdContainer('ad-placeholder-ad-pos-legacy-3', 'great-grandparent-collapse-legacy', "great-grandparent has legacy advertising class name");
        testGetNamedAdContainer('ad-placeholder-ad-pos-legacy-4', 'great-great-grandparent-collapse-legacy', "great-great-grandparent has legacy advertising class name");
        FT.env.isLegacyAPI = flag;
    });

    test("FT.ads.getAdContainers", function () {
        maybeInitFixture();
        beginNewPage('getAdContainers');
        var flag = FT.env.isLegacyAPI;
        FT.env.isLegacyAPI = false;
        testGetAdContainers('ad-pos-5', 'ad-pos-5', "no advertising class name in any immediate parents");
        testGetAdContainers('ad-pos-1', 'ad-pos-1', "parent has falcon advertising class name");
        testGetAdContainers('ad-pos-2', 'ad-pos-2', "grandparent has falcon advertising class name");
        testGetAdContainers('ad-pos-3', 'ad-pos-3', "great-grandparent has falcon advertising class name");
        testGetAdContainers('ad-pos-4', 'ad-pos-4', "great-great-grandparent has falcon advertising class name");

        // Legacy mode test cases can be removed when the entire site is free of legacy ad calls
        FT.env.isLegacyAPI = true;
        testGetAdContainers('ad-pos-legacy-5', 0, "no advertising class name in any immediate parents");
        testGetAdContainers('ad-pos-legacy-6', 'ad-placeholder-ad-pos-legacy-6, ad-container-ad-pos-legacy-6', "advertising class name is too many parents away");
        testGetAdContainers('ad-pos-legacy-1', 'ad-placeholder-ad-pos-legacy-1, ad-container-ad-pos-legacy-1', "parent has legacy advertising class name with placeholder and container");
        testGetAdContainers('ad-pos-legacy-2', 'ad-placeholder-ad-pos-legacy-2, ad-container-ad-pos-legacy-2', "grandparent has legacy advertising class name");
        testGetAdContainers('ad-pos-legacy-3', 'ad-placeholder-ad-pos-legacy-3, ad-container-ad-pos-legacy-3', "great-grandparent has legacy advertising class name");
        testGetAdContainers('ad-pos-legacy-4', 'ad-placeholder-ad-pos-legacy-4, ad-container-ad-pos-legacy-4', "great-great-grandparent has legacy advertising class name");
        FT.env.isLegacyAPI = flag;
    });

    test("FT.ads.getAdContainer", function () {
        maybeInitFixture();
        beginNewPage('getAdContainer');
        var flag = FT.env.isLegacyAPI;
        FT.env.isLegacyAPI = false;
        testGetAdContainer('ad-pos-5', 'ad-pos-5', "no advertising class name in any immediate parents");
        testGetAdContainer('ad-pos-1', 'ad-pos-1', "parent has falcon advertising class name");
        testGetAdContainer('ad-pos-2', 'ad-pos-2', "grandparent has falcon advertising class name");
        testGetAdContainer('ad-pos-3', 'ad-pos-3', "great-grandparent has falcon advertising class name");
        testGetAdContainer('ad-pos-4', 'ad-pos-4', "great-great-grandparent has falcon advertising class name");

        // Legacy mode test cases can be removed when the entire site is free of legacy ad calls
        FT.env.isLegacyAPI = true;
        testGetAdContainer('ad-pos-legacy-5', null, "no advertising class name in any immediate parents");
        testGetAdContainer('ad-pos-legacy-6', 'ad-placeholder-ad-pos-legacy-6', "advertising class name is too many parents away");
        testGetAdContainer('ad-pos-legacy-1', 'ad-placeholder-ad-pos-legacy-1', "parent has legacy advertising class name");
        testGetAdContainer('ad-pos-legacy-2', 'ad-placeholder-ad-pos-legacy-2', "grandparent has legacy advertising class name");
        testGetAdContainer('ad-pos-legacy-3', 'ad-placeholder-ad-pos-legacy-3', "great-grandparent has legacy advertising class name");
        testGetAdContainer('ad-pos-legacy-4', 'ad-placeholder-ad-pos-legacy-4', "great-great-grandparent has legacy advertising class name");
        FT.env.isLegacyAPI = flag;
    });

    test("FT.ads.getAdInnerHTML", function () {
        maybeInitFixture();
        beginNewPage('getAdInnerHTML');
        var flag = FT.env.isLegacyAPI;
        FT.env.isLegacyAPI = false;
        testGetAdInnerHTML('ad-pos-5', '!-- ad-pos-5 -- An ad position where great-great-great-grandparent has the advertising class on it.', "no advertising class name in any immediate parents");

        // Legacy mode test cases can be removed when the entire site is free of legacy ad calls
        FT.env.isLegacyAPI = true;
        testGetAdInnerHTML('ad-pos-legacy-5', null, "not found, no content");
        testGetAdInnerHTML('ad-pos-legacy-6', '!-- ad-placeholder-ad-pos-legacy-6 -- An ad position placeholder where parent too far away has the advertising class on it. !-- ad-container-ad-pos-legacy-6 -- An ad position container where parent too far away has the advertising class on it.', "gets both placeholder and container HTML");
        FT.env.isLegacyAPI = flag;
    });

    test("FT.ads.requestNewssubs", function () {
        maybeInitFixture();
        beginNewPage('requestNewssubs');

        var _request = FT.ads.request;

        FT.ads.request = function (pos) {
            equal(pos, 'newssubs', 'should call request() with argument');
        };
        FT.ads.requestNewssubs();

        FT.ads.request = _request;
    });

    test("FT.ads.getAdFormat", function () {
        maybeInitFixture();

        // Check that all AdFormats are configured as per the Ad_positions.xls from the project share
        var Keys = FT.ads.getKeys(FT.ads.CONST.AdFormat);
        equal(Keys.join(', '), TEST.AdPos.sort().join(', '), "AdFormat table keys should be");

        var rFormat = FT.ads.getAdFormat('invalid');
        equal(rFormat, undefined, "getAdFormat(invalid) should be");

        rFormat = FT.ads.getAdFormat('mktsdata');
        ok(rFormat, "getAdFormat(mktsdata) should be defined");
        equal(rFormat.sz, "88x31,75x25", "getAdFormat(mktsdata) size should be ");

        rFormat = FT.ads.getAdFormat('mktsdata2');
        ok(rFormat, "getAdFormat(mktsdata2) should be defined");
        equal(rFormat.sz, "88x31,75x25", "getAdFormat(mktsdata2) size should be ");

        rFormat = FT.ads.getAdFormat('mktsdata3');
        ok(rFormat, "getAdFormat(mktsdata3) should be defined");
        equal(rFormat.sz, "88x31,75x25", "getAdFormat(mktsdata3) size should be ");

        rFormat = FT.ads.getAdFormat('mpu');
        ok(rFormat, "getAdFormat(mpu) should be defined");
        equal(rFormat.sz, "300x250,336x280", "getAdFormat(mpu) size should be ");

        rFormat = FT.ads.getAdFormat('vidbut1');
        ok(rFormat, "getAdFormat(vidbut1) should be defined");
        equal(rFormat.sz, "120x29", "getAdFormat(vidbut1) size should be ");

        rFormat = FT.ads.getAdFormat('vidbut2');
        ok(rFormat, "getAdFormat(vidbut2) should be defined");
        equal(rFormat.sz, "100x50", "getAdFormat(vidbut2) size should be ");

        rFormat = FT.ads.getAdFormat('vidbut3');
        ok(rFormat, "getAdFormat(vidbut3) should be defined");
        equal(rFormat.sz, "200x50", "getAdFormat(vidbut3) size should be ");

        // FUTURE numbered positions - if mpu2 isn't in the table, strip off the trailing digits and look for mpu
        // bonus achieved after refactoring for mktsdata2 positions.
        rFormat = FT.ads.getAdFormat('mpu2');
        ok(rFormat, "getAdFormat(mpu2) should be defined");
        equal(rFormat.sz, "300x250,336x280", "getAdFormat(mpu2) size should be ");
    });

    test("FT.ads.isUnclassified()", function () {
        maybeInitFixture();

        var site = FT.env.dfp_site;
        var zone = FT.env.dfp_zone;

        equal(FT.ads.isUnclassified(), false, "At start, site/zone is classified");

        FT.env.dfp_site = TEST.Unclassified.dfp_site;
        FT.env.dfp_zone = 'rubbish';
        equal(FT.ads.isUnclassified(), false, "unclassified/rubbish is considered classified");

        FT.env.dfp_zone = TEST.Unclassified.dfp_zone;
        equal(FT.ads.isUnclassified(), true, "unclassified/unclassified is unclassified");

        FT.env.dfp_site = 'test.5887.unclassified';
        equal(FT.ads.isUnclassified(), true, "test.unclassified/unclassified is unclassified");

        FT.env.dfp_site = site;
        FT.env.dfp_zone = zone;
    });

    test("FT.ads.setDefaultSiteZone()", function () {
        maybeInitFixture();
        beginNewPage('setDefaultSiteZone test', {
            'env':TEST.DearLucy
        });
        equal(FT.env.dfp_site, TEST.DearLucy.dfp_site, "Check site before we call function");
        equal(FT.env.dfp_zone, TEST.DearLucy.dfp_zone, "Check zone before we call function");

        FT.ads.setDefaultSiteZone();
        equal(FT.env.dfp_site, TEST.Unclassified.dfp_site, "Check site after we call function");
        equal(FT.env.dfp_zone, TEST.Unclassified.dfp_zone, "Check zone after we call function");
    });

    test("FT.ads.getDFPSite - for Task TA10279", function () {
        maybeInitFixture();
        var release_env = FT.Properties.ENV;
        beginNewPage('getDFPSite Live', {
            'ENV':'live',
            'env':TEST.DearLucy
        });
        equal(FT.ads.getDFPSite(), "ftcom.5887.blogs", "Live environment no FTQA cookie - live site");

        mockCookies.FTQA = "env=nolive";
        equal(FT.ads.getDFPSite(), "test.5887.blogs", "Live environment FTQA cookie env=nolive - non-live site");

        mockCookies.FTQA = "env=live";
        equal(FT.ads.getDFPSite(), "ftcom.5887.blogs", "Live environment FTQA cookie env=live - live site");

        beginNewPage('getDFPSite Non-Live', {
            'ENV':release_env,
            'env':TEST.DearLucy
        });

        clearMockCookies();
        FT.ads.getDFPSite()
        equal(FT.ads.getDFPSite(), "test.5887.blogs", "Non-live environment no FTQA cookie");

        mockCookies.FTQA = "env=nolive";
        equal(FT.ads.getDFPSite(), "test.5887.blogs", "Non-live environment FTQA cookie env=nolive");

        mockCookies.FTQA = "env=live";
        equal(FT.ads.getDFPSite(), "ftcom.5887.blogs", "Non-live environment FTQA cookie env=live");
    });

    //make sure site is not affected by addition of dfp premium toggle to the env variable
    test("FT.ads.getDFPSite - for US24462 Switch to DFP Premium copy environment", function () {
        maybeInitFixture();
        var release_env = FT.Properties.ENV;
        beginNewPage('getDFPSite Live', {
            //change to agreed value
            'ENV':'live',
            'env':TEST.DearLucy
        });
        equal(FT.ads.getDFPSite(), "ftcom.5887.blogs", "Live environment no FTQA cookie - Live site");

        mockCookies.FTQA = "env=nolivepremiumcopy";
        equal(FT.ads.getDFPSite(), "test.5887.blogs", "Live environment FTQA cookie env=nolivepremiumcopy  site on DFP Premium Copy Network");

        mockCookies.FTQA = "env=livepremiumcopy";
        equal(FT.ads.getDFPSite(), "ftcom.5887.blogs", "Live environment FTQA cookie env=livepremiumcopy - live site on DFP Copy Premium Network");

        mockCookies.FTQA = "env=nolive_premiumcopy";
        equal(FT.ads.getDFPSite(), "test.5887.blogs", "Live environment FTQA cookie env=nolive_premiumcopy  site on DFP Premium Copy Network");

        mockCookies.FTQA = "env=live_premiumcopy";
        equal(FT.ads.getDFPSite(), "ftcom.5887.blogs", "Live environment FTQA cookie env=live_premiumcopy - live site on DFP Copy Premium Network");

        mockCookies.FTQA = "env=nolive-premiumcopy";
        equal(FT.ads.getDFPSite(), "test.5887.blogs", "Live environment FTQA cookie env=nolive-premiumcopy  site on DFP Premium Copy Network");

        mockCookies.FTQA = "env=live-premiumcopy";
        equal(FT.ads.getDFPSite(), "ftcom.5887.blogs", "Live environment FTQA cookie env=live-premiumcopy - live site on DFP Copy Premium Network");

        beginNewPage('getDFPSite Non-Live', {
            //change to agreed value
            'ENV':release_env,
            'env':TEST.DearLucy
        });
        clearMockCookies();
        equal(FT.ads.getDFPSite(), "test.5887.blogs", "Non-live environment no FTQA cookie");

        //change to agreed premium value or partial regex
        mockCookies.FTQA = "env=nolivepremiumcopy";
        equal(FT.ads.getDFPSite(), "test.5887.blogs", "Non-live environment FTQA cookie env=nolivepremiumcopy on DFP Premium Copy Network");

        //change to agreed premium value or partial regex
        mockCookies.FTQA = "env=livepremiumcopy";
        equal(FT.ads.getDFPSite(), "ftcom.5887.blogs", "Non-live environment FTQA cookie env=livepremiumcopy on DFP Premium Copy Network");

        //change to agreed premium value or partial regex
        mockCookies.FTQA = "env=nolive_premiumcopy";
        equal(FT.ads.getDFPSite(), "test.5887.blogs", "Non-live environment FTQA cookie env=nolive_premiumcopy on DFP Premium Copy Network");

        //change to agreed premium value or partial regex
        mockCookies.FTQA = "env=live_premiumcopy";
        equal(FT.ads.getDFPSite(), "ftcom.5887.blogs", "Non-live environment FTQA cookie env=live_premiumcopy on DFP Premium Copy Network");

        //change to agreed premium value or partial regex
        mockCookies.FTQA = "env=nolive-premiumcopy";
        equal(FT.ads.getDFPSite(), "test.5887.blogs", "Non-live environment FTQA cookie env=nolive-premiumcopy on DFP Premium Copy Network");

        //change to agreed premium value or partial regex
        mockCookies.FTQA = "env=live-premiumcopy";
        equal(FT.ads.getDFPSite(), "ftcom.5887.blogs", "Non-live environment FTQA cookie env=live-premiumcopy on DFP Premium Copy Network");
    });

    test("FT.ads.checkSiteZone (error cases)", function () {
        var result;
        maybeInitFixture();
        var release_env = FT.Properties.ENV;
        var cicero = 'cicero.5887.counterintelligence';
        var ant = 'antagonistically-anthropological';

        beginNewPage('checkSiteZone Errors empty site', {
                    'ENV':'live',
                    'env':{ 'dfp_site':'' }
                }
        );
        equal(FT.env.dfp_site, "", "Check site before we call function");
        equal(FT.env.dfp_zone, TEST.DefaultAdTag.env.dfp_zone, "Check zone before we call function");
        result = FT.ads.checkSiteZone('banlb');
        testInvalidSiteZone(result, "site is empty");

        beginNewPage('checkSiteZone Errors maximum length for site/zone is OK', {
                    'ENV':'live',
                    'env':{
                        'dfp_site':cicero,
                        'dfp_zone':ant
                    }
                }
        );
        equal(FT.env.dfp_site, cicero, "Check site before we call function");
        equal(FT.env.dfp_zone, ant, "Check zone before we call function");
        result = FT.ads.checkSiteZone('banlb');
        testValidSiteZone(result, "site/zone is just long enough");

        beginNewPage('checkSiteZone Errors ad position is invalid', {
                    'ENV':'live',
                    'env':{
                        'dfp_site':cicero,
                        'dfp_zone':ant
                    }
                }
        );
        equal(FT.env.dfp_site, cicero, "Check site before we call function");
        equal(FT.env.dfp_zone, ant, "Check zone before we call function");
        result = FT.ads.checkSiteZone('invalid');
        testInvalidAdSlot(result, "ad position is invalid", 'invalid ad slot name', 'invalid');

        beginNewPage('checkSiteZone Errors site too long', {
                    'ENV':'live',
                    'env':{
                        'dfp_site':cicero + '1',
                        'dfp_zone':ant
                    }
                }
        );
        equal(FT.env.dfp_site, cicero + '1', "Check site before we call function");
        equal(FT.env.dfp_zone, ant, "Check zone before we call function");
        result = FT.ads.checkSiteZone('banlb');
        testInvalidSiteZone(result, "site is too long", "DFP site name too long: " + cicero + '1');

        beginNewPage('checkSiteZone Errors zone name too long', {
                    'ENV':'live',
                    'env':{
                        'dfp_site':cicero,
                        'dfp_zone':ant + '1'
                    }
                }
        );
        equal(FT.env.dfp_site, cicero, "Check site before we call function");
        equal(FT.env.dfp_zone, ant + '1', "Check zone before we call function");
        result = FT.ads.checkSiteZone('banlb');
        testInvalidSiteZone(result, "zone is too long", "DFP zone name too long: " + ant + '1');

        beginNewPage('checkSiteZone Errors nothing but X in the site (default methode metadata)', {
                    'ENV':'live',
                    'env':{
                        'dfp_site':'X',
                        'dfp_zone':ant
                    }
                }
        );
        equal(FT.env.dfp_site, "X", "Check site before we call function");
        equal(FT.env.dfp_zone, ant, "Check zone before we call function");
        result = FT.ads.checkSiteZone('banlb');
        testInvalidSiteZone(result, "site is X", "DFP site name is default methode metadata");

        beginNewPage('checkSiteZone Errors nothing but X in the site (default methode metadata)', {
                    'ENV':'live',
                    'env':{
                        'dfp_site':'xxxx',
                        'dfp_zone':ant
                    }
                }
        );
        equal(FT.env.dfp_site, "xxxx", "Check site before we call function");
        equal(FT.env.dfp_zone, ant, "Check zone before we call function");
        result = FT.ads.checkSiteZone('banlb');
        testInvalidSiteZone(result, "site is xxxx", "DFP site name is default methode metadata");

        beginNewPage('checkSiteZone Errors nothing but X in the zone (default methode metadata)', {
                    'ENV':'live',
                    'env':{
                        'dfp_site':cicero,
                        'dfp_zone':'x'
                    }
                }
        );
        equal(FT.env.dfp_site, cicero, "Check site before we call function");
        equal(FT.env.dfp_zone, "x", "Check zone before we call function");
        result = FT.ads.checkSiteZone('banlb');
        testInvalidSiteZone(result, "zone is X", "DFP zone name is default methode metadata");

        beginNewPage('checkSiteZone Errors nothing but X in the zone (default methode metadata)', {
                    'ENV':'live',
                    'env':{
                        'dfp_site':cicero,
                        'dfp_zone':'XXXX'
                    }
                }
        );
        equal(FT.env.dfp_site, cicero, "Check site before we call function");
        equal(FT.env.dfp_zone, "XXXX", "Check zone before we call function");
        result = FT.ads.checkSiteZone('banlb');
        testInvalidSiteZone(result, "zone is xxxx", "DFP zone name is default methode metadata");

        beginNewPage('checkSiteZone Errors Site does not look like the FT network', {
                    'ENV':'live',
                    'env':{
                        'dfp_site':'cicero.5888.cou-terintell-gence',
                        'dfp_zone':ant
                    }
                }
        );
        equal(FT.env.dfp_site, 'cicero.5888.cou-terintell-gence', "Check site before we call function");
        equal(FT.env.dfp_zone, ant, "Check zone before we call function");
        result = FT.ads.checkSiteZone('banlb');
        testInvalidSiteZone(result, "site is not the FT network *.5887.*", "DFP site name is not the FT network: cicero.5888.cou-terintell-gence");

        beginNewPage('checkSiteZone Errors Site name with hyphens IS allowed', {
                    'ENV':'live',
                    'env':{
                        'dfp_site':'cicero.5887.cou-terintell-gence',
                        'dfp_zone':ant
                    }
                }
        );
        equal(FT.env.dfp_site, 'cicero.5887.cou-terintell-gence', "Check site before we call function");
        equal(FT.env.dfp_zone, ant, "Check zone before we call function");
        result = FT.ads.checkSiteZone('banlb');
        testValidSiteZone(result, "hyphens in site name suffix are allowed.");

        beginNewPage('checkSiteZone restore release env and site/zone vars', {
                    'ENV':release_env
                }
        );
    });

    test("FT.ads.setInitialAdState()", function () {
        maybeInitFixture();
        beginNewPage('FT.ads.setInitialAdState()');
        var pos = 'fictional';
        FT.ads.setInitialAdState(pos);
        var Keys = FT.ads.getKeys(FT.ads.adverts[pos].state);
        equal(Keys.join(", "), TEST.AdStateKeysInit, "FT.ads.adverts." + pos + ".state should be");

        var Result = {
            'state':'init',
            'hasDiv':false,
            'hasInterstitial':false,
            'isSystemDefault':false,
            'isEmptyAd':false,
            'alwaysHide':false,
            'initialHTML':''
        };
        testAdState(pos, Result, "No Div for Ad");

        pos = 'adState1';
        FT.ads.setInitialAdState(pos, 'video');
        Result.hasDiv = true;
        Result.initialHTML = /FT\.ads\.request\('adState1'\)/;
        testAdState(pos, Result, "Div exists for Ad", "video");
        equal(FT.ads.isAdStateEmpty(FT.ads.adverts[pos].state), false, "isAdStateEmpty() should be");
        equal(FT.ads.shouldAdBeZeroHeight(FT.ads.adverts[pos].state), false, "shouldAdBeZeroHeight() should be");

        pos = 'refresh';
        FT.ads.setInitialAdState(pos);
        Result.hasDiv = false;
        Result.alwaysHide = true;
        Result.initialHTML = '';
        testAdState(pos, Result, "Div exists for Ad", "normal");
        equal(FT.ads.isAdStateEmpty(FT.ads.adverts[pos].state), false, "isAdStateEmpty() should be");
        equal(FT.ads.shouldAdBeZeroHeight(FT.ads.adverts[pos].state), false, "shouldAdBeZeroHeight() should be");
    });

    test("FT.ads.checkAdState() and isAdStateEmpty and shouldAdBeZeroHeight", function () {
        maybeInitFixture();
        beginNewPage('FT.ads.checkAdState()');

        var pos = 'adState1';
        FT.ads.setInitialAdState(pos);

        FT.ads.checkAdState(pos);
        var Keys = FT.ads.getKeys(FT.ads.adverts[pos].state);
        equal(Keys.join(", "), TEST.AdStateKeysChanged, "FT.ads.adverts." + pos + ".state should be");

        var Result = {
            'state':'init',
            'hasDiv':true,
            'hasInterstitial':false,
            'isSystemDefault':false,
            'isEmptyAd':false,
            'alwaysHide':false,
            'initialHTML':/FT\.ads\.request\('adState1'\);/,
            'innerHTML':/FT\.ads\.request\('adState1'\);/
        };
        testAdState(pos, Result, "Ad content has NOT changed");
        equal(FT.ads.isAdStateEmpty(FT.ads.adverts[pos].state), false, "isAdStateEmpty() should be");
        equal(FT.ads.shouldAdBeZeroHeight(FT.ads.adverts[pos].state), false, "shouldAdBeZeroHeight() should be");

        // Fudge it by creating adStateChanged referring to the adState1 data
        pos = 'adStateChanged';
        FT.ads.adverts[pos] = { 'state':FT.ads.adverts.adState1.state, 'callType':'normal' };
        FT.ads.checkAdState(pos);

        Result = {
            'state':'changed',
            'hasDiv':true,
            'hasInterstitial':false,
            'isSystemDefault':false,
            'isEmptyAd':false,
            'alwaysHide':false,
            'initialHTML':/"FT\.ads\.request\('adState1'\);\s*";\s*<\/script>\s*$/i,
            'innerHTML':/"FT\.ads\.request\('adState1'\);\s*";\s*x\s*=\s*"more added to the div/
        };
        testAdState(pos, Result, "Ad content HAS changed");
        equal(FT.ads.isAdStateEmpty(FT.ads.adverts[pos].state), false, "isAdStateEmpty() should be");
        equal(FT.ads.shouldAdBeZeroHeight(FT.ads.adverts[pos].state), false, "shouldAdBeZeroHeight() should be");

        pos = 'adStateSysDefault';
        FT.ads.setInitialAdState('adState1');
        FT.ads.adverts[pos] = { 'state':FT.ads.adverts.adState1.state, 'callType':'normal' };
        FT.ads.checkAdState(pos);

        Result = {
            'state':'changed',
            'hasDiv':true,
            'hasInterstitial':false,
            'isSystemDefault':true,
            'isEmptyAd':false,
            'alwaysHide':false,
            'initialHTML':/"FT\.ads\.request\('adState1'\);\s*";\s*<\/script>\s*$/i
        };
        testAdState(pos, Result, "System Default GIF present");
        equal(FT.ads.isAdStateEmpty(FT.ads.adverts[pos].state), true, "isAdStateEmpty() should be");
        equal(FT.ads.shouldAdBeZeroHeight(FT.ads.adverts[pos].state), false, "shouldAdBeZeroHeight() should be");

        pos = 'adStateInterstitial';
        FT.ads.setInitialAdState('adState1');
        FT.ads.adverts[pos] = { 'state':FT.ads.adverts.adState1.state, 'callType':'normal' };
        FT.ads.checkAdState(pos);

        Result = {
            'state':'changed',
            'hasDiv':true,
            'hasInterstitial':true,
            'isSystemDefault':false,
            'isEmptyAd':false,
            'alwaysHide':false,
            'initialHTML':/"FT\.ads\.request\('adState1'\);\s*";\s*<\/script>\s*$/i
        };
        testAdState(pos, Result, "Interstitial is present");
        equal(FT.ads.isAdStateEmpty(FT.ads.adverts[pos].state), false, "isAdStateEmpty() should be");
        equal(FT.ads.shouldAdBeZeroHeight(FT.ads.adverts[pos].state), false, "shouldAdBeZeroHeight() should be");

        pos = 'adStateEmptyAd';
        FT.ads.setInitialAdState('adState1');
        FT.ads.adverts[pos] = { 'state':FT.ads.adverts.adState1.state, 'callType':'normal' };
        FT.ads.checkAdState(pos);

        Result = {
            'state':'changed',
            'hasDiv':true,
            'hasInterstitial':false,
            'isSystemDefault':false,
            'isEmptyAd':true,
            'alwaysHide':false,
            'initialHTML':/"FT\.ads\.request\('adState1'\);\s*";\s*<\/script>\s*$/i
        };
        testAdState(pos, Result, "FT no ad GIF is present");
        equal(FT.ads.isAdStateEmpty(FT.ads.adverts[pos].state), true, "isAdStateEmpty() should be");
        equal(FT.ads.shouldAdBeZeroHeight(FT.ads.adverts[pos].state), false, "shouldAdBeZeroHeight() should be");

        pos = 'adStateEmptyInterstitial';
        FT.ads.setInitialAdState('adState1');
        FT.ads.adverts[pos] = { 'state':FT.ads.adverts.adState1.state, 'callType':'normal' };
        FT.ads.checkAdState(pos);

        Result = {
            'state':'changed',
            'hasDiv':true,
            'hasInterstitial':true,
            'isSystemDefault':false,
            'isEmptyAd':true,
            'alwaysHide':false,
            'initialHTML':/"FT\.ads\.request\('adState1'\);\s*";\s*<\/script>\s*$/i
        };
        testAdState(pos, Result, "Ad is empty but Interstitial is present");
        equal(FT.ads.isAdStateEmpty(FT.ads.adverts[pos].state), false, "isAdStateEmpty() should be");
        equal(FT.ads.shouldAdBeZeroHeight(FT.ads.adverts[pos].state), true, "shouldAdBeZeroHeight() should be");

        pos = 'adStateSysDefaultInterstitial';
        FT.ads.setInitialAdState('adState1');
        FT.ads.adverts[pos] = { 'state':FT.ads.adverts.adState1.state, 'callType':'normal' };
        FT.ads.checkAdState(pos);

        Result = {
            'state':'changed',
            'hasDiv':true,
            'hasInterstitial':true,
            'isSystemDefault':true,
            'isEmptyAd':false,
            'alwaysHide':false,
            'initialHTML':/"FT\.ads\.request\('adState1'\);\s*";\s*<\/script>\s*$/i
        };
        testAdState(pos, Result, "Ad is system default but Interstitial is present");
        equal(FT.ads.isAdStateEmpty(FT.ads.adverts[pos].state), false, "isAdStateEmpty() should be");
        equal(FT.ads.shouldAdBeZeroHeight(FT.ads.adverts[pos].state), true, "shouldAdBeZeroHeight() should be");

    });

    test("FT.ads.cleanKeywords - TA16773", function () {
        maybeInitFixture();
        beginNewPage('getKeywordsParam');
        equal(FT.ads.cleanKeywords("  this	is	"), "this%20is", "excess space removed");
        equal(FT.ads.cleanKeywords("  THIS	IS	"), "this%20is", "lowercased");
        equal(FT.ads.cleanKeywords(" ^ this+is 'it' ; "), "this%20is%20it", "DFP restricted characters removed");
        equal(FT.ads.cleanKeywords(" %5E this%2Bis %27it%27 %3B %20 "), "this%20is%20it", "DFP restricted characters removed even if escaped");
        equal(FT.ads.cleanKeywords("  this.is%2Eit"), "this%2Eis%2Eit", "full-stop escaped as it means something to DFP");

        var punctuation = "`!" + '"' + "_$%^&*_()_+-_={}[]_:@~;'_#<>?,_./|\\";
        var result = "%60%21%22_%24%25%20%26*_%28%29_%20-_%3D%7B%7D%5B%5D_%3A@%7E%20_%23%3C%3E%3F%2C_%2E/%7C%5C";
        equal(FT.ads.cleanKeywords(punctuation), result, "remaining punctuation encoded");
        equal(FT.ads.cleanKeywords("uk:PSON"), "uk%3Apson", "uk:PSON from tearsheet");
        equal(FT.ads.cleanKeywords("PSON.GB%3APLU"), "pson%2Egb%3Aplu", "PSON.GB%3APLU from tearsheet");
    });

    test("FT.ads.getKeywordsParam - TA16773", function () {
        maybeInitFixture();
        beginNewPage('getKeywordsParam');

        var param = FT.ads.getKeywordsParam('http://search.ft.com/search');
        equal(param, "", "no query string, kw param should be");

        param = FT.ads.getKeywordsParam();
        equal(param, "", "default uses current URL, kw param should be");

        var rockMe = 'rock%20my%20world';
        var powerMe = 'power%20my%20world';
        var pearson = 'pson%3Alse';
        var pearson2 = 'pson%2Egb%3Aplu';
        var pearson3 = 'uk%3Apson';
        var pearson4 = 'pearson';
        var KWTests = [
            ['?queryText=rock+my+world', rockMe, 'search: queryText in URL'],
            ['?queryText=rock+my+world&ftsearchType=type_news', rockMe, 'search from home page, etc: queryText in URL'],
            ['?queryText=rock+my+world&x=0&y=0&aje=true&dse=&dsz=', rockMe, 'search from articles/video: queryText in URL'],
            ['?query=rock%20my%20world', rockMe, 'search on markets quoted string: query in URL'],
            ['?view=company&time=123837238384&selectedResultGroup=&query=pearson&country=&issueType=', pearson4, 'search on markets quoted string: query in URL'],
            ['?s=PSON%3ALSE&vsc_appId=ts&ftsite=FTCOM&searchtype=equity', pearson, 'tearsheet PSON:LSE: query in URL'],
            ['?s=PSON.GB%3APLU&vsc_appId=ts&ftsite=FTCOM&searchtype=equity', pearson2, 'tearsheet PSON.GB:PLU: query in URL'],
            ['?s=uk:PSON', pearson3, 'tearsheet uk:PSON: query in URL'],
            ['?q=rock+my+world', rockMe, 'alphaville: q in URL'],
            ['?searchField=power%20my%20world&null=&termId=', powerMe, 'lexicon: searchField in URL'],
            ['', '', 'no query string, kw param should be']
        ];

        for (var idx = 0; idx < KWTests.length; ++idx) {
            param = FT.ads.getKeywordsParam(KWTests[idx][0]);
            equal(param, KWTests[idx][1], KWTests[idx][2] + ", kw param should be");
        }
    });

    test("FT.ads.getAyscVars() AYSC cookie: missing", function () {
        var saveEnv = FT.env;
        // Dummy environment variable
        FT.env = {
            "originalObject":true,
            "artid":"ftpage", // FT Page
            "sec":"section", // FT Section
            "server":"server", // Server
            "keyword":"money", // Keyword (logic for this to be moved to server side)
            "asset":"asset"
        };

        FT.env = FT.ads.getAyscVars(FT.env);

        equal(FT.env.originalObject, true, "original object returned");
        equal(FT.env["02"]);
        equal(FT.env["04"]);
        equal(FT.env["05"]);
        equal(FT.env["06"]);
        equal(FT.env["07"]);
        equal(FT.env["14"]);
        equal(FT.env["17"]);
        equal(FT.env["18"]);
        equal(FT.env["19"]);
        equal(FT.env["20"]);
        equal(FT.env["21"]);
        equal(FT.env["22"]);
        equal(FT.env["24"]);
        equal(FT.env["25"]);
        equal(FT.env["26"]);
        equal(FT.env["27"]);

        FT.env = saveEnv;
    });

    test("FT.ads.getAyscVars() AYSC cookie: empty", function () {
        var saveEnv = FT.env;

        // Dummy environment variable
        FT.env = {
            "originalObject":true,
            "artid":"ftpage", // FT Page
            "sec":"section", // FT Section
            "server":"server", // Server
            "keyword":"money", // Keyword (logic for this to be moved to server side)
            "asset":"asset"
        };

        mockCookies.AYSC = "";
        FT.env = FT.ads.getAyscVars(FT.env);

        equal(FT.env.originalObject, true, "original object returned");
        equal(FT.env["02"]);
        equal(FT.env["04"]);
        equal(FT.env["05"]);
        equal(FT.env["06"]);
        equal(FT.env["07"]);
        equal(FT.env["14"]);
        equal(FT.env["17"]);
        equal(FT.env["18"]);
        equal(FT.env["19"]);
        equal(FT.env["20"]);
        equal(FT.env["21"]);
        equal(FT.env["22"]);
        equal(FT.env["24"]);
        equal(FT.env["25"]);
        equal(FT.env["26"]);
        equal(FT.env["27"]);

        FT.env = saveEnv;
    });

    test("FT.ads.getAyscVars() AYSC cookie: incorrect", function () {
        var saveEnv = FT.env;

        // Dummy environment variable
        FT.env = {
            "originalObject":true,
            "artid":"ftpage", // FT Page
            "sec":"section", // FT Section
            "server":"server", // Server
            "keyword":"money", // Keyword (logic for this to be moved to server side)
            "asset":"asset"
        };

        mockCookies.AYSC = "tjhdthkfjhfjlgdfjkfhdghtkd_ykdthtsdj.dhtd";

        FT.env = FT.ads.getAyscVars(FT.env);

        equal(FT.env.originalObject, true, "original object returned");
        equal(FT.env["02"]);
        equal(FT.env["04"]);
        equal(FT.env["05"]);
        equal(FT.env["06"]);
        equal(FT.env["07"]);
        equal(FT.env["14"]);
        equal(FT.env["17"]);
        equal(FT.env["18"]);
        equal(FT.env["19"]);
        equal(FT.env["20"]);
        equal(FT.env["21"]);
        equal(FT.env["22"]);
        equal(FT.env["24"]);
        equal(FT.env["25"]);
        equal(FT.env["26"]);
        equal(FT.env["27"]);

        FT.env = saveEnv;
    });

    test("FT.ads.getAyscVars() AYSC cookie: correct", function () {
        var saveEnv = FT.env;

        // Dummy environment variable
        FT.env = {
            "originalObject":true,
            "artid":"ftpage", // FT Page
            "sec":"section", // FT Section
            "server":"server", // Server
            "keyword":"money", // Keyword (logic for this to be moved to server side)
            "asset":"asset"
        };

        mockCookies.AYSC = "_02gender_04state_05industry_06responsibility_07position_14subCountry_17regionalArea_18city_19companySize_20personalInvestor_21companyListings_22subscriberInformation_24continent_25lineSpeed_26areaCode_27corporateAccessIDcode_";

        FT.env = FT.ads.getAyscVars(FT.env);

        equal(FT.env.originalObject, true, "original object returned");
        equal(FT.env["02"], "gender", "Gender Cookie");
        equal(FT.env["04"], "state", "State Cookie");
        equal(FT.env["05"], "industry", "Industry Cookie");
        equal(FT.env["06"], "responsibility", "Area of Responsibilities Cookie");
        equal(FT.env["07"], "position", "Business Position Cookie");
        equal(FT.env["14"], "subCountry", "Country Tag");
        equal(FT.env["17"], "regionalArea", "Region  Tag");
        equal(FT.env["18"], "city", "City, Tag");
        equal(FT.env["19"], "companySize", "Company Size	 Cookie");
        equal(FT.env["20"], "personalInvestor", "Personal Investor Cookie");
        equal(FT.env["21"], "companyListings", "Company Listings Cookie");
        equal(FT.env["22"], "subscriberInformation", "Subscription ID Level Cookie");
        equal(FT.env["24"], "continent", "Continent Tag");
        equal(FT.env["25"], "lineSpeed", "Linespeed Tag");
        equal(FT.env["26"], "areaCode", "Phone Number Prefix - North America only, Tag");
        equal(FT.env["27"], "corporateAccessIDcode", "Corporate Customers Cookie");

        FT.env = saveEnv;
    });

    test("FT.ads.getUserData()", function () {
        var getAyscVarsStub = sinon.stub(FT.ads, "getAyscVars", function () {
            return {"12":"N85XE","13":"PVT","14":"GBR","15":"PVT","17":"PVT","18":"PVT","19":"xxxx","20":"x","22":"P0P2Tools","24":"PVT","25":"PVT","26":"PVT","27":"zentea1","40":"2","41":"21","42":"1","45":"UK","96":"IA","98":"IA","07":"CP","06":"TEC","05":"IT","02":"X"};
        }),
        erightsIDStub = sinon.stub(FT.ads, "erightsID", function () {
            return '123456';
        }),
        result = FT.ads.getUserData(),
        expected = {eid: "123456", corporate_access_id_code: "zentea1", subscription_level: "lv2", job_position: "CP", job_responsibility: "TEC", industry: "IT", job_position: "CP", job_responsibility: "TEC", subscription_level: "lv2"};
        deepEqual(result, expected, "The correct values are returned");

        ok(!result.hasOwnProperty('active_personal_investor'), 'properties with value X are not present');
        ok(!result.hasOwnProperty('company_size'), 'properties with value xxxx are not present');
        ok(!result.hasOwnProperty('continent'), 'properties with value PVT are not present');
        ok(!result.hasOwnProperty('gender'), 'properties with value X are not present');
        ok(!result.hasOwnProperty('homepage_edition'), 'properties with value undefined are not present');

        getAyscVarsStub.restore();
        erightsIDStub.restore();
    });

    test("FT.ads.buildURL (no cookies) - for Task TA10279", function () {
        var url, Params, Params2, order;
        var stub = sinon.stub(FT.ads, "kruxRetrieve", function(name){return ""});

        maybeInitFixture();

        beginNewPage('buildURL 1');


        url = testBuildURL("basic test with no cookies");
        Params = extract_params(url);
        order = Params._order.join(',');
        matches(FT.ads.CONST.KeyOrder.join(","), TEST.KeyOrder, "Constant defines the order of the keys in the URL.");

        matches(url, '^http://ad\\.doubleclick\\.net/', "Ad URL begins with default ad server");
        matches(url, '\\.net/N5887/adj/test\\.5887\\.dev/build-url-test;', "Ad URL has correct site and zone name and ad type");
        matches(url, 'build-url-test;sz=468x60,728x90,970x90;', "Ad URL first parameter is ad size");
        matches(url, ';dcopt=ist;', "Ad URL no interstitial tag for this ad type");
        matches(url, ';ord=\\d{1,16}\\?$', "Ad URL last parameter is up to 16 digit ord");
        matches(url, ';tile=\\d+;ord=', "Ad URL tile parameter is numerical and is before ord");
        matches(url, ';pos=banlb;bht=false;tile=', "Ad URL ad position appears before tile (for reference)");
        equal(order, 'sz,dcopt,uuid,ts,cc,pos,bht,tile,ord', "Ad URL contains only non-cookie parameters");

        // Test that baseAdvert reflects the values used from the last buildURL call
        // baseAdvert is used as a staging area for assembling the key values before
        // joining them into the URL.  They will also be used for length validation later.
        equal(FT.ads.baseAdvert.dfp_site, 'test.5887.dev', "baseAdvert contains site value ");
        equal(FT.ads.baseAdvert.dfp_zone, 'build-url-test', "baseAdvert contains zone value ");
        equal(FT.ads.baseAdvert.ad_network_code, '/N5887', "baseAdvert contains Ad network code");
        equal(FT.ads.baseAdvert.sz, '468x60,728x90,970x90', "baseAdvert contains key value sz");
        equal(FT.ads.baseAdvert.dcopt, 'ist', "baseAdvert contains key value dcopt");
        equal(FT.ads.baseAdvert.pos, 'banlb', "baseAdvert contains key value pos");
        equal(FT.ads.baseAdvert.tile, 2, "baseAdvert contains key value tile counter for next ad slot");
        equal(FT.ads.baseAdvert.ord + '?', Params.ord, "baseAdvert contains key value ord");
        equal(FT.ads.baseAdvert.hasInterstitial, true, "baseAdvert has the interstitial flag");

        beginNewPage('buildURL 2');
        url = testBuildURL("a buildURL call on a new page");
        Params2 = extract_params(url);
        differs(Params2.ord, Params.ord, "Ad URL ord value differs on a new page");
        equal(myparseInt(Params2.tile), 1, "Ad URL tile value reset on a new page");
        for (var idx = 2; idx <= 16; ++idx) {
            url = testBuildURL("another buildURL call to increment tile value " + idx);
        }
        matches(url, ';tile=16;', "Ad URL max tile value 16");
        url = testBuildURL("another buildURL call to exceed tile value");
        equal(type(url), 'undefined', "Ad URL undefined as too many tiles on the page");
        equal(get_diagnostic('banlb', 'buildURLFromBaseAdvert'), 'too many ads, exceeds maximum tile', "Diagnostic recorded about too many tile on page");
        stub.restore();

    });

    test("FT.ads.buildURL (release environment selection including DFP Premium environments for US24462)", function () {
        var url;
        maybeInitFixture();
        var release_env = FT.Properties.ENV;
        beginNewPage('buildURL Rel Env 1', {
            'ENV':'live',
            'env':TEST.DearLucy
        });
        url = testBuildURL("Dear Lucy in Live environment", { 'env':FT.envOrig });
        matches(url, '\\.net/N5887/adj/ftcom\\.5887\\.blogs/dear-lucy-blog;', "Ad URL has correct LIVE site and zone name");
        matches(url, '/N5887/', "DFP Network code is set to FT standard value");
        equal(FT.env.dfp_site, TEST.DearLucy.dfp_site, 'FT.env.dfp_site should be');
        equal(FT.env.dfp_zone, TEST.DearLucy.dfp_zone, 'FT.env.dfp_zone should be');

        beginNewPage('buildURL Rel Env 2', {
            'ENV':release_env,
            'env':TEST.DearLucy
        });
        url = testBuildURL("Dear Lucy in non-live environment", { 'env':FT.envOrig });
        matches(url, '\\.net/N5887/adj/test\\.5887\\.blogs/dear-lucy-blog;', "Ad URL has correct non-LIVE site and zone name");
        matches(url, '/N5887/', "DFP Network code is set to FT standard value");
        equal(FT.env.dfp_site, TEST.DearLucyNonLive.dfp_site, 'FT.env.dfp_site should be');
        equal(FT.env.dfp_zone, TEST.DearLucyNonLive.dfp_zone, 'FT.env.dfp_zone should be');

        beginNewPage('buildURL Rel Env 3', {
            'ENV':'live',
            'env':TEST.DearLucy
        });
        mockCookies.FTQA = "env=nolive";
        url = testBuildURL("Dear Lucy in live environment but FTQA says nolive", {
                    'env':FT.envOrig
                }
        );
        matches(url, '\\.net/N5887/adj/test\\.5887\\.blogs/dear-lucy-blog;', "Ad URL has correct non-LIVE site and zone name");
        matches(url, '/N5887/', "DFP Network code is set to FT standard value");
        equal(FT.env.dfp_site, TEST.DearLucyNonLive.dfp_site, 'FT.env.dfp_site should be');
        equal(FT.env.dfp_zone, TEST.DearLucyNonLive.dfp_zone, 'FT.env.dfp_zone should be');

        beginNewPage('buildURL Rel Env 4', {
            'ENV':release_env,
            'env':TEST.DearLucy
        });
        mockCookies.FTQA = "env=live";
        url = testBuildURL("Dear Lucy in non-live environment but FTQA says live", {
                    'env':FT.envOrig
                }
        );
        matches(url, '\\.net/N5887/adj/ftcom\\.5887\\.blogs/dear-lucy-blog;', "Ad URL has correct LIVE site and zone name");
        matches(url, '/N5887/', "DFP Network code is set to FT standard value");
        equal(FT.env.dfp_site, TEST.DearLucy.dfp_site, 'FT.env.dfp_site should be');
        equal(FT.env.dfp_zone, TEST.DearLucy.dfp_zone, 'FT.env.dfp_zone should be');

        //changes for US24462
        beginNewPage('buildURL Rel Env 5', {
            'ENV':release_env,
            'env':TEST.DearLucy
        });

        mockCookies.FTQA = "env=livepremium";
        url = testBuildURL("Dear Lucy in non-live environment but FTQA says livepremium (premium wont match DFP Premium Copy Network)", {
                    'env':FT.envOrig
                }
        );
        matches(url, '\\.net/N5887/adj/ftcom\\.5887\\.blogs/dear-lucy-blog;', "Ad URL has correct LIVE site and zone name");
        matches(url, '/N5887/', "DFP Network code is set to FT standard value");
        equal(FT.env.dfp_site, TEST.DearLucy.dfp_site, 'FT.env.dfp_site should be');
        equal(FT.env.dfp_zone, TEST.DearLucy.dfp_zone, 'FT.env.dfp_zone should be');

        //changes for US24462
        beginNewPage('buildURL Rel Env 6', {
            'ENV':release_env,
            'env':TEST.DearLucy
        });

        mockCookies.FTQA = "env=nolivepremiumcopy";
        url = testBuildURL("Dear Lucy in live environment but FTQA says nolive on DFP Premium Copy Network", {
                    'env':FT.envOrig
                }
        );
        matches(url, '\gdfp-testing-only.g.doubleclick.net/N282450/adj/test\\.5887\\.blogs/dear-lucy-blog;', "Ad URL has DFP Premium Copy Network adserver url and correct non LIVE site and zone name");
        matches(url, '\\/N282450/', "DFP Network code is set to DFP Premium Copy network value");
        equal(FT.env.dfp_site, TEST.DearLucyNonLive.dfp_site, 'FT.env.dfp_site should be');
        equal(FT.env.dfp_zone, TEST.DearLucyNonLive.dfp_zone, 'FT.env.dfp_zone should be');

        beginNewPage('buildURL Rel Env 7', {
            'ENV':release_env,
            'env':TEST.DearLucy
        });

        mockCookies.FTQA = "env=livepremiumcopy";
        url = testBuildURL("Dear Lucy in non-live environment but FTQA says live on DFP Premium Copy Network", {
                    'env':FT.envOrig
                }
        );
        matches(url, '\gdfp-testing-only.g.doubleclick.net/N282450/adj/ftcom\\.5887\\.blogs/dear-lucy-blog;', "Ad URL has DFP Premium Copy Network adserver url and correct LIVE site and zone name");
        matches(url, '\\/N282450/', "DFP Network code is set to DFP Copy Premium network value");
        equal(FT.env.dfp_site, TEST.DearLucy.dfp_site, 'FT.env.dfp_site should be');
        equal(FT.env.dfp_zone, TEST.DearLucy.dfp_zone, 'FT.env.dfp_zone should be');

        beginNewPage('buildURL Rel Env 8', {
            'ENV':release_env,
            'env':TEST.DearLucy
        });

        mockCookies.FTQA = "env=live_premiumcopy";
        url = testBuildURL("Dear Lucy in non-live environment but FTQA says live on DFP Premium Copy Network", {
                    'env':FT.envOrig
                }
        );
        matches(url, '\gdfp-testing-only.g.doubleclick.net/N282450/adj/ftcom\\.5887\\.blogs/dear-lucy-blog;', "Ad URL has DFP Premium Copy Network adserver url and correct LIVE site and zone name");
        matches(url, '\\/N282450/', "DFP Network code is set to DFP Copy Premium network value");
        equal(FT.env.dfp_site, TEST.DearLucy.dfp_site, 'FT.env.dfp_site should be');
        equal(FT.env.dfp_zone, TEST.DearLucy.dfp_zone, 'FT.env.dfp_zone should be');

        beginNewPage('buildURL Rel Env 9', {
            'ENV':release_env,
            'env':TEST.DearLucy
        });

        mockCookies.FTQA = "env=live-premiumcopy";
        url = testBuildURL("Dear Lucy in non-live environment but FTQA says live on DFP Premium Copy Network", {
                    'env':FT.envOrig
                }
        );
        matches(url, '\gdfp-testing-only.g.doubleclick.net/N282450/adj/ftcom\\.5887\\.blogs/dear-lucy-blog;', "Ad URL has DFP Premium Copy Network adserver url and correct LIVE site and zone name");
        matches(url, '\\/N282450/', "DFP Network code is set to DFP Copy Premium network value");
        equal(FT.env.dfp_site, TEST.DearLucy.dfp_site, 'FT.env.dfp_site should be');
        equal(FT.env.dfp_zone, TEST.DearLucy.dfp_zone, 'FT.env.dfp_zone should be');

        //=======premiumreadonly environments
        //changes for US24462
        beginNewPage('buildURL Rel Env 10', {
            'ENV':release_env,
            'env':TEST.DearLucy
        });

        mockCookies.FTQA = "env=livepremiumread";
        url = testBuildURL("Dear Lucy in non-live environment but FTQA says livepremiumread (premiumread wont match DFP Premium Copy Network)", {
                    'env':FT.envOrig
                }
        );
        matches(url, '\\.net/N5887/adj/ftcom\\.5887\\.blogs/dear-lucy-blog;', "Ad URL has correct LIVE site and zone name");
        matches(url, '/N5887/', "DFP Network code is set to FT standard value");
        equal(FT.env.dfp_site, TEST.DearLucy.dfp_site, 'FT.env.dfp_site should be');
        equal(FT.env.dfp_zone, TEST.DearLucy.dfp_zone, 'FT.env.dfp_zone should be');

        //changes for US24462
        beginNewPage('buildURL Rel Env 11', {
            'ENV':release_env,
            'env':TEST.DearLucy
        });

        mockCookies.FTQA = "env=nolivepremiumreadonly";
        url = testBuildURL("Dear Lucy in live environment but FTQA says nolive on DFP Premium Read Only Network", {
                    'env':FT.envOrig
                }
        );
        matches(url, '\gdfp-testing-only.g.doubleclick.net/N5887/adj/test\\.5887\\.blogs/dear-lucy-blog;', "Ad URL has DFP Premium Read Only Network adserver url and correct non LIVE site and zone name");
        matches(url, '\\/N5887/', "DFP Network code is set to DFP Premium Read Only network value");
        equal(FT.env.dfp_site, TEST.DearLucyNonLive.dfp_site, 'FT.env.dfp_site should be');
        equal(FT.env.dfp_zone, TEST.DearLucyNonLive.dfp_zone, 'FT.env.dfp_zone should be');

        beginNewPage('buildURL Rel Env 12', {
            'ENV':release_env,
            'env':TEST.DearLucy
        });

        mockCookies.FTQA = "env=livepremiumreadonly";
        url = testBuildURL("Dear Lucy in non-live environment but FTQA says live on DFP Premium Read Only Network", {
                    'env':FT.envOrig
                }
        );
        matches(url, '\gdfp-testing-only.g.doubleclick.net/N5887/adj/ftcom\\.5887\\.blogs/dear-lucy-blog;', "Ad URL has DFP Premium Read Only Network adserver url and correct LIVE site and zone name");
        matches(url, '\\/N5887/', "DFP Network code is set to DFP Premium Read Only network value");
        equal(FT.env.dfp_site, TEST.DearLucy.dfp_site, 'FT.env.dfp_site should be');
        equal(FT.env.dfp_zone, TEST.DearLucy.dfp_zone, 'FT.env.dfp_zone should be');

        beginNewPage('buildURL Rel Env 13', {
            'ENV':release_env,
            'env':TEST.DearLucy
        });

        mockCookies.FTQA = "env=live_premiumreadonly";
        url = testBuildURL("Dear Lucy in non-live environment but FTQA says live on DFP Premium Read Only Network", {
                    'env':FT.envOrig
                }
        );
        matches(url, '\gdfp-testing-only.g.doubleclick.net/N5887/adj/ftcom\\.5887\\.blogs/dear-lucy-blog;', "Ad URL has DFP Premium Read Only Network adserver url and correct LIVE site and zone name");
        matches(url, '\\/N5887/', "DFP Network code is set to DFP Premium Read Only network value");
        equal(FT.env.dfp_site, TEST.DearLucy.dfp_site, 'FT.env.dfp_site should be');
        equal(FT.env.dfp_zone, TEST.DearLucy.dfp_zone, 'FT.env.dfp_zone should be');

        beginNewPage('buildURL Rel Env 14', {
            'ENV':release_env,
            'env':TEST.DearLucy
        });

        mockCookies.FTQA = "env=live-premiumreadonly";
        url = testBuildURL("Dear Lucy in non-live environment but FTQA says live on DFP Premium Read Only Network", {
                    'env':FT.envOrig
                }
        );
        matches(url, '\gdfp-testing-only.g.doubleclick.net/N5887/adj/ftcom\\.5887\\.blogs/dear-lucy-blog;', "Ad URL has DFP Premium Read Only Network adserver url and correct LIVE site and zone name");
        matches(url, '\\/N5887/', "DFP Network code is set to DFP Premium Read Only network value");
        equal(FT.env.dfp_site, TEST.DearLucy.dfp_site, 'FT.env.dfp_site should be');
        equal(FT.env.dfp_zone, TEST.DearLucy.dfp_zone, 'FT.env.dfp_zone should be');
    });

    test("FT.ads.buildURL (error cases) - for Task TA10279", function () {
        var url, diagnosis, result;
        maybeInitFixture();
        var release_env = FT.Properties.ENV;

        beginNewPage('buildURL Errors site is invalid - uses default', {
                    'ENV':'live',
                    'env':{ 'dfp_site':'' }
                }
        );
        url = testBuildURL("dfp site/zone invalid", { 'env':FT.envOrig });
        matches(url, '\\.net/N5887/adj/ftcom\\.5887\\.unclassified/unclassified;', "Ad URL empty dfp site/zone uses default");
        equal(get_diagnostic('banlb', 'checkSiteZone'), 'dfp_site/zone are invalid', "Diagnostic recorded about invalid site/zone");
        equal(FT.env.dfp_site, TEST.Unclassified.dfp_site, 'FT.env.dfp_site should be');
        equal(FT.env.dfp_zone, TEST.Unclassified.dfp_zone, 'FT.env.dfp_zone should be');

        result = FT.ads.showDiagnostics();
        diagnosis = "FT.ads.showDiagnostics:\n\nbanlb Ad Call:\n   checkSiteZone: dfp_site/zone are invalid\n";
        function removeWhiteSpace(str) {
            return str.replace(/\s+/g, ' ');
        }

        equal(removeWhiteSpace(result), removeWhiteSpace(diagnosis), "Test of full diagnostics");

        url = testBuildURL("ad position name invalid", { 'env':TEST.DefaultAdTag.env, 'pos':'tweety' });
        equal(url, undefined, "Ad URL undefined cannot make ad call");
        equal(get_diagnostic('tweety', 'checkSiteZone'), 'invalid ad slot name', "Diagnostic recorded about invalid ad slot name");
        equal(FT.env.dfp_site, TEST.Unclassified.dfp_site, 'FT.env.dfp_site should be');
        equal(FT.env.dfp_zone, TEST.Unclassified.dfp_zone, 'FT.env.dfp_zone should be');

        beginNewPage('buildURL Errors 2', {
                    // Maximum size for site and zone
                    'env':{
                        'dfp_site':'cicero.5887.counterintelligence',
                        'dfp_zone':'antagonistically-anthropological'
                    }
                }
        );
        mockCookies.FTQA = "env=live";
        url = testBuildURL("maximum length site/zone", {
                    'env':FT.envOrig
                }
        );
        matches(url, '\\.net/N5887/adj/cicero.5887.counterintelligence/antagonistically-anthropological;', "Ad URL valid at this length");

        beginNewPage('buildURL Errors 3', {
                    // Site too long
                    'env':{
                        'dfp_site':'cicero.5887.counterintelligence1',
                        'dfp_zone':'antagonistically-anthropological'
                    }
                }
        );
        mockCookies.FTQA = "env=live";
        url = testBuildURL("site name too long", {
                    'env':FT.envOrig
                }
        );
        matches(url, '\\.net/N5887/adj/ftcom\\.5887\\.unclassified/unclassified;', "Ad URL dfp site name too long uses default");
        result = 'DFP site name too long: cicero.5887.counterintelligence1';
        equal(get_diagnostic('banlb', 'checkSiteZone'), result, "Diagnostic recorded about long site name > 31 chars");
        equal(FT.env.dfp_site, TEST.Unclassified.dfp_site, 'FT.env.dfp_site should be');
        equal(FT.env.dfp_zone, TEST.Unclassified.dfp_zone, 'FT.env.dfp_zone should be');

        beginNewPage('buildURL Errors 4', {
                    // Zone too long
                    'env':{
                        'dfp_site':'cicero.5887.counterintelligence',
                        'dfp_zone':'antagonistically-anthropological1'
                    }
                }
        );
        url = testBuildURL("zone name too long", { 'env':FT.envOrig });
        matches(url, '\\.net/N5887/adj/ftcom\\.5887\\.unclassified/unclassified;', "Ad URL dfp zone name too long uses default");
        result = 'DFP zone name too long: antagonistically-anthropological1';
        equal(get_diagnostic('banlb', 'checkSiteZone'), result, "Diagnostic recorded about long zone name > 32 chars");
        equal(FT.env.dfp_site, TEST.Unclassified.dfp_site, 'FT.env.dfp_site should be');
        equal(FT.env.dfp_zone, TEST.Unclassified.dfp_zone, 'FT.env.dfp_zone should be');

        // Restore release environment
        beginNewPage('buildURL Rel Env restored', { 'ENV':release_env });
    });

    test("FT.ads.buildURL (multiple interstitial warning)", function () {
        var stub = sinon.stub(FT.ads, "kruxRetrieve", function(name){return ""});
        var url, Params, order;
        maybeInitFixture();

        beginNewPage('buildURL multiple interstitals on page');

        url = testBuildURL("test first interstitial");
        Params = extract_params(url);
        order = Params._order.join(',');
        matches(url, ';dcopt=ist;', "Ad URL dcopt=ist is present in the url to request the interstitial");
        equal(order, 'sz,dcopt,uuid,ts,cc,pos,bht,tile,ord', "Ad URL order of parameters is correct");

        url = testBuildURL("test another interstitial on deepsame page");
        Params = extract_params(url);
        order = Params._order.join(',');
        matches(url, ';dcopt=ist;', "Ad URL dcopt=ist is NOT present in the url", false);
        equal(order, 'sz,uuid,ts,cc,pos,bht,tile,ord', "Ad URL order of parameters omits dcopt.");
        var result = 'multiple interstitials on page, ignoring banlb';
        equal(get_diagnostic('banlb', 'buildURLIst'), result, "Diagnostic recorded about multiple interstitials");
        stub.restore();
    });

    test("FT.ads.buildURL (dfp_targeting parameter)", function () {
        var url, Params, order, uParams;
        var stub = sinon.stub(FT.ads, "kruxRetrieve", function(name){return ""});
        maybeInitFixture();

        beginNewPage('buildURL 1', {
            'env':{ 'dfp_targeting':"xxxx" }
        });
        url = testBuildURL("Default methode metadata XXXX for dfp_targeting");
        Params = extract_params(url);
        order = Params._order.join(',');

        matches(url, 'xXxx', "Ad URL default xxxx NOT present in ad call", false);
        equal(order, 'sz,dcopt,uuid,ts,cc,pos,bht,tile,ord', "Ad URL no xxxx parameter");

        beginNewPage('buildURL 1', {
            'env':{ 'dfp_targeting':";key=value" }
        });
        url = testBuildURL("dfp_targeting has ;key=value");
        Params = extract_params(url);
        order = Params._order.join(',');

        matches(url, ';uuid=' + Params.uuid + ';ts=' + Params.ts + ';cc=n;key=value;pos=banlb', 'Ad URL key parameter present in ad call with leading semicolon handled ok ');
        equal(order, 'sz,dcopt,uuid,ts,cc,key,pos,bht,tile,ord', "Ad URL position of key parameter is correct");

        beginNewPage('buildURL 1', {
            'env':{ 'dfp_targeting':"key=value;" }
        });
        url = testBuildURL("dfp_targeting has key=value;");
        Params = extract_params(url);
        order = Params._order.join(',');

        matches(url, ';uuid=' + Params.uuid + ';ts=' + Params.ts + ';cc=n;key=value;pos=banlb', "Ad URL key parameter present in ad call with trailing semicolon handled ok");
        equal(order, 'sz,dcopt,uuid,ts,cc,key,pos,bht,tile,ord', "Ad URL position of key parameter is correct");

        beginNewPage('buildURL 1', {
            'env':{ 'dfp_targeting':"key=value" }
        });
        url = testBuildURL("dfp_targeting has key=value");
        Params = extract_params(url);
        order = Params._order.join(',');

        matches(url, ';uuid=' + Params.uuid + ';ts=' + Params.ts + ';cc=n;key=value;pos=banlb', "Ad URL key parameter present in ad call with semicolon's ok");
        equal(order, 'sz,dcopt,uuid,ts,cc,key,pos,bht,tile,ord', "Ad URL position of key parameter is correct");

        beginNewPage('buildURL 1', {
            'env':{ 'dfp_targeting':"key=value;;;;door=locked" }
        });
        url = testBuildURL("dfp_targeting has key=value;door=locked");
        Params = extract_params(url);
        order = Params._order.join(',');

        matches(url, ';uuid=' + Params.uuid + ';ts=' + Params.ts + ';cc=n;key=value;door=locked;pos=banlb', "Ad URL key and door parameters present in ad call");
        equal(order, 'sz,dcopt,uuid,ts,cc,key,door,pos,bht,tile,ord', "Ad URL position of key and door parameters are correct");
        stub.restore();
    });

    test("FT.ads.buildURL (keyword search) - for Task TA16773", function () {
        var stub = sinon.stub(FT.ads, "kruxRetrieve", function(name){return ""});
        var url, Params, order, uParams;
        maybeInitFixture();

        beginNewPage('buildURL 1', {
            'env':{ 'url_location':"http://www.ft.com/?q=cat+dog" }
        });
        url = testBuildURL("basic keyword targeting");
        Params = extract_params(url);
        order = Params._order.join(',');

        matches(url, ';kw=cat%20dog;uuid=' + Params.uuid + ';ts=' + Params.ts + ';cc=n;pos=banlb', "Ad URL kw parameter present in ad call");
        equal(order, 'sz,dcopt,kw,uuid,ts,cc,pos,bht,tile,ord', "Ad URL position of kw parameter is correct");
        stub.restore();
    });

    test("FT.ads.buildURL (AYSC cookie 13) - for task TA10282", function () {
        var stub = sinon.stub(FT.ads, "kruxRetrieve", function(name){return ""});
        // See the Project Wiki Section on AYSC fields for these Specifications
        // http://epcvs.osb.ft.com/twiki/bin/view/Projects/DartForPublishers#AYSC_Parameters_placed_into_the

        var url, Params, order;
        maybeInitFixture();

        beginNewPage('buildURL AYSC Cookie 13');
        mockCookies.AYSC = "_13GBR_14USA_15UK_";
        url = testBuildURL("test AYSC 13 = country code for ad server selection");
        Params = extract_params(url);
        order = Params._order.join(',');
        matches(url, '^http://ad\\.uk\\.doubleclick\\.net/', "Ad URL closest ad server selected from AYSC value");
        equal(order, 'sz,dcopt,14,uuid,ts,cc,pos,bht,tile,ord', "Ad URL AYSC field 13 is not in Ad url but 14 is.");

        mockCookies.AYSC = "_13ZMB_14USA_15ZM_";
        url = testBuildURL("test AYSC 13 = country code for unsupported ad server selection");
        Params = extract_params(url);
        order = Params._order.join(',');
        matches(url, '^http://ad\\.doubleclick\\.net/', "Ad URL AYSC country has no DFP ad server so default used");
        equal(get_diagnostic('banlb', 'adServerCountry'), 'Unsupported ad server: zm', "Diagnostic recorded about unsupported ad server");
        stub.restore();
    });

    test("FT.ads.buildURL (AYSC cookie 01,27) - simple data as is - for task TA10282", function () {
        var url;
        maybeInitFixture();

        beginNewPage('buildURL AYSC Cookie 01,27');

        mockCookies.AYSC = "_011923_";
        url = testBuildURL("test AYSC 01 = Date of Birth");
        matches(url, ';01=1923;', "Ad URL AYSC field 01 present in url");
        // Check that AYSC values are staged into the baseAdvert before assembly into URL
        equal(FT.ads.baseAdvert['01'], '1923', "baseAdvert contains key value 01");

        mockCookies.AYSC = "_01_";
        url = testBuildURL("test AYSC 01 empty");
        matches(url, ';01=', "Ad URL AYSC field 01 should not be present in url", false);

        mockCookies.AYSC = "_27541c6c_";
        url = testBuildURL("test AYSC 27 = Corporate Client ID");
        matches(url, ';27=541c6c;', "Ad URL AYSC field 27 present in url");

        mockCookies.AYSC = "_27_";
        url = testBuildURL("test AYSC 27 empty");
        matches(url, ';27=', "Ad URL AYSC field 27 should not be present in url", false);

        mockCookies.AYSC = "_27PVT_";
        url = testBuildURL("test AYSC 27 = PVT value");
        //matches(url, ';27=' 	 "Ad URL AYSC field 27 should not be present in url", false);

    });

    test("FT.ads.buildURL (AYSC cookie 02, 05, 06, 07, 19, 20, 21) - if value is all X's we omit from ad call - for task TA10282", function () {
        var stub = sinon.stub(FT.ads, "kruxRetrieve", function(name){return ""});
        var url, Params, order;
        maybeInitFixture();

        beginNewPage('buildURL AYSC Cookie 02, 05, 06, 07, 19, 20, 21');

        mockCookies.AYSC = "_02M_";
        url = testBuildURL("test AYSC 02 = Gender");
        matches(url, ';02=m;', "Ad URL AYSC field 02 present in url");

        mockCookies.AYSC = "_02_";
        url = testBuildURL("test AYSC 02 empty");
        matches(url, ';02=', "Ad URL AYSC field 02 not present in url", false);

        mockCookies.AYSC = "_02X_";
        url = testBuildURL("test AYSC 02=X = unspecified - omit from URL");
        matches(url, ';02=', "Ad URL AYSC field 02 not present in url", false);

        mockCookies.AYSC = "_05INF_";
        url = testBuildURL("test AYSC 05 = Industry");
        matches(url, ';05=inf;', "Ad URL AYSC field 05 present in url");

        mockCookies.AYSC = "_05_";
        url = testBuildURL("test AYSC 05 empty");
        matches(url, ';05=', "Ad URL AYSC field 05 not present in url", false);

        mockCookies.AYSC = "_05XXX_";
        url = testBuildURL("test AYSC 05=XXX = unspecified - omit from URL");

        mockCookies.AYSC = "_05PVT_06RES_";
        url = testBuildURL("test AYSC 05=PVT = no special meaning for this field, pass through as is");
        matches(url, ';05=pvt;', "Ad URL AYSC field 05 pvt is ok", true);
        matches(url, ';06=res;', "Ad URL AYSC field 06 res is ok", true);

        mockCookies.AYSC = "_06MKT_";
        url = testBuildURL("test AYSC 06 = Job area of responsibility");
        matches(url, ';06=mkt;', "Ad URL AYSC field 06 present in url");

        mockCookies.AYSC = "_06_";
        url = testBuildURL("test AYSC 06 empty");
        matches(url, ';06=', "Ad URL AYSC field 06 not present in url", false);

        mockCookies.AYSC = "_06XXX_";
        url = testBuildURL("test AYSC 06=XXX = unspecified - omit from URL");
        matches(url, ';06=', "Ad URL AYSC field 06 not present in url", false);

        mockCookies.AYSC = "_07DR_";
        url = testBuildURL("test AYSC 07 = Business Position");
        matches(url, ';07=dr;', "Ad URL AYSC field 07 present in url");

        mockCookies.AYSC = "_07_";
        url = testBuildURL("test AYSC 07 empty");
        matches(url, ';07=', "Ad URL AYSC field 07 not present in url", false);

        mockCookies.AYSC = "_07XX_";
        url = testBuildURL("test AYSC 07=XX = unspecified - omit from URL");
        matches(url, ';07=', "Ad URL AYSC field 07 not present in url", false);

        mockCookies.AYSC = "_190101_";
        url = testBuildURL("test AYSC 19 = Company Size");
        matches(url, ';19=101;', "Ad URL AYSC field 19 present in url");

        mockCookies.AYSC = "_190001_";
        url = testBuildURL("test AYSC 19 = Company Size");
        matches(url, ';19=1;', "Ad URL AYSC field 19 present in url - leading zero's stripped");

        mockCookies.AYSC = "_19_";
        url = testBuildURL("test AYSC 19 empty");
        matches(url, ';19=', "Ad URL AYSC field 19 not present in url", false);

        beginNewPage('buildURL AYSC Cookie 02, 05, 06, 07, 19, 20, 21');
        mockCookies.AYSC = "_19XXXX_";
        url = testBuildURL("test AYSC 19=XXXX = unspecified - omit from URL");
        matches(url, ';19=', "Ad URL AYSC field 19 not present in url", false);

        mockCookies.AYSC = "_20Y_";
        url = testBuildURL("test AYSC 20 = Personal Investor");
        matches(url, ';20=y;', "Ad URL AYSC field 20 present in url");

        mockCookies.AYSC = "_20_";
        url = testBuildURL("test AYSC 20 empty");
        matches(url, ';20=', "Ad URL AYSC field 20 not present in url", false);

        mockCookies.AYSC = "_20X_";
        url = testBuildURL("test AYSC 20=X = unspecified - omit from URL");
        matches(url, ';20=', "Ad URL AYSC field 20 not present in url", false);

        mockCookies.AYSC = "_2108_";
        url = testBuildURL("test AYSC 21 = Company Listings");
        matches(url, ';21=8;', "Ad URL AYSC field 21 present in url");

        mockCookies.AYSC = "_21_";
        url = testBuildURL("test AYSC 21 empty");
        matches(url, ';21=', "Ad URL AYSC field 21 not present in url", false);

        mockCookies.AYSC = "_21XX_";
        url = testBuildURL("test AYSC 21=XX = unspecified - omit from URL");
        matches(url, ';21=', "Ad URL AYSC field 21 not present in url", false);

        mockCookies.AYSC = "_02F_05ITT_06RET_07RX_191945_20N_218_";
        url = testBuildURL("test AYSC 02,05,06,07,19,20,21 order");
        Params = extract_params(url);
        order = Params._order.join(',');
        equal(order, 'sz,07,06,05,19,20,21,02,uuid,ts,cc,pos,bht,tile,ord', "Ad URL AYSC fields in correct order");
        stub.restore();
    });

    test("FT.ads.buildURL (AYSC cookie 14) - if value is PVT or RES we omit from url - for task TA10282", function () {
        var url;
        maybeInitFixture();

        beginNewPage('buildURL AYSC Cookie 14');

        mockCookies.AYSC = "_14IOM_";
        url = testBuildURL("test AYSC 14 = Subscription Country");
        matches(url, ';14=iom;', "Ad URL AYSC field 14 present in url");

        mockCookies.AYSC = "_14PVT_";
        url = testBuildURL("test AYSC 14 = PVT indicates private so we omit from ad call");
        matches(url, ';14=', "Ad URL AYSC field 14 not present in url", false);

        mockCookies.AYSC = "_14RES_";
        url = testBuildURL("test AYSC 14 = RES indicates reserved so we omit from ad call");
        matches(url, ';14=', "Ad URL AYSC field 14 not present in url", false);

        mockCookies.AYSC = "_14XXX_";
        url = testBuildURL("test AYSC 14 = XXX has no special meaning, leave it in");
        matches(url, ';14=xxx;', "Ad URL AYSC field 14 xxx present in url");

        mockCookies.AYSC = "_14_";
        url = testBuildURL("test AYSC 14 empty");
        matches(url, ';14=', "Ad URL AYSC field 14 not present in url", false);
    });

    test("FT.ads.buildURL (AYSC cookie 22 -> slv) - regex match on field 22 and replace with slv", function () {
        var url, idx;
        maybeInitFixture();

        beginNewPage('buildURL AYSC Cookie 22');

        mockCookies.AYSC = "_22edit_97_";
        url = testBuildURL("test AYSC 22 = Subscription ID Level mapped to slv=edit");
        matches(url, ';slv=edt;', "Ad URL AYSC field 22 edt present in url");

        mockCookies.AYSC = "_22Ftemp_97_";
        url = testBuildURL("test AYSC 22 = slv=int");
        matches(url, ';slv=int;', "Ad URL AYSC field 22 int present in url");

        beginNewPage('buildURL AYSC Cookie 22 Corp A and is flagged as corporate user ( AYSC Cookie 97 = "c" )');
        for (idx = 0; idx < 10; ++idx) {
            mockCookies.AYSC = "_22" + TEST.SlvCorp[idx] + "_97" + TEST.SlvAYSC97[0] + '_';
            url = testBuildURL("test AYSC 22 = slv=cor " + TEST.SlvCorp[idx]);
            matches(url, ';slv=cor;', "key value slv=cor present in url for " + TEST.SlvCorp[idx]);
        }

        beginNewPage('buildURL AYSC Cookie 22 Corp B and is flagged as corporate user ( AYSC 97 = "" )');
        for (idx = 11; idx < TEST.SlvCorp.length; ++idx) {
            mockCookies.AYSC = "_22" + TEST.SlvCorp[idx] + "_97" + TEST.SlvAYSC97[0] + '_';
            url = testBuildURL("test AYSC 22 = slv=cor " + TEST.SlvCorp[idx]);
            matches(url, ';slv=cor;', "Ad URL key value slv=cor present in url for " + TEST.SlvCorp[idx]);
        }

        beginNewPage('buildURL AYSC Cookie 22 Lv1 and is not flagged as corporate user ( AYSC 97 = "" )');
        for (idx = 0; idx < TEST.SlvLv1.length; ++idx) {
            mockCookies.AYSC = "_22" + TEST.SlvLv1[idx] + "_97" + TEST.SlvAYSC97[1] + '_';
            url = testBuildURL("test AYSC 22 = slv=lv1 " + TEST.SlvLv1[idx]);
            matches(url, ';slv=lv1;', "Ad URL key value slv=lv1 present in url for " + TEST.SlvLv1[idx]);
        }

        beginNewPage('buildURL AYSC Cookie 22 Lv2 and is not flagged as corporate user ( AYSC 97 = "" )');
        for (idx = 0; idx < TEST.SlvLv2.length; ++idx) {
            mockCookies.AYSC = "_22" + TEST.SlvLv2[idx] + "_97" + TEST.SlvAYSC97[1] + '_';
            url = testBuildURL("test AYSC 22 = slv=lv2 " + TEST.SlvLv2[idx]);
            matches(url, ';slv=lv2;', "Ad URL key value slv=lv2 present in url for " + TEST.SlvLv2[idx]);
        }

        beginNewPage('buildURL AYSC Cookie 22 Reg and is not flagged as corporate user ( AYSC 97 = "" )');
        for (idx = 0; idx < TEST.SlvReg.length; ++idx) {
            mockCookies.AYSC = "_22" + TEST.SlvReg[idx] + "_97" + TEST.SlvAYSC97[1] + '_';
            url = testBuildURL("test AYSC 22 = slv=reg " + TEST.SlvReg[idx]);
            matches(url, ';slv=reg;', "Ad URL key value slv=reg present in url for " + TEST.SlvReg[idx]);
        }

        beginNewPage('buildURL AYSC Cookie 22 No Match and is not flagged as corporate user ( AYSC 97 = "" )');
        for (idx = 0; idx < TEST.SlvNope.length; ++idx) {
            mockCookies.AYSC = "_22" + TEST.SlvNope[idx] + "_97" + TEST.SlvAYSC97[1] + '_';
            url = testBuildURL("test AYSC 22 = slv= omitted for " + TEST.SlvNope[idx]);
            matches(url, ';22=', "Ad URL AYSC field 22 not present in url for " + TEST.SlvNope[idx], false);
        }

        mockCookies.AYSC = "_22_";
        url = testBuildURL("test AYSC 22 empty");
        matches(url, ';22=', "Ad URL AYSC field 22 not present in url", false);
    });

    test("FT.ads.buildURL (AYSC cookie 24) - first three letters of continent", function () {
        var url;
        maybeInitFixture();
        beginNewPage('buildURL AYSC Cookie 24');

        mockCookies.AYSC = "_24north%20america_";
        url = testBuildURL("test AYSC 24 = Continent mapped to cn=nor");
        matches(url, ';cn=nor;', "Ad URL AYSC field 24 nor present in url");

        mockCookies.AYSC = "_24south%20america_";
        url = testBuildURL("test AYSC 24 = cn=sou");
        matches(url, ';cn=sou;', "Ad URL AYSC field 24 sou present in url");

        mockCookies.AYSC = "_24europe_";
        url = testBuildURL("test AYSC 24 = cn=eur");
        matches(url, ';cn=eur;', "Ad URL AYSC field 24 eur present in url");

        mockCookies.AYSC = "_24africa_";
        url = testBuildURL("test AYSC 24 = cn=afr");
        matches(url, ';cn=afr;', "Ad URL AYSC field 24 afr present in url");

        mockCookies.AYSC = "_24asia_";
        url = testBuildURL("test AYSC 24 = cn=asi");
        matches(url, ';cn=asi;', "Ad URL AYSC field 24 asi present in url");

        mockCookies.AYSC = "_24oceana_";
        url = testBuildURL("test AYSC 24 = cn=oce");
        matches(url, ';cn=oce;', "Ad URL AYSC field 24 oce present in url");

        mockCookies.AYSC = "_24antarctica_";
        url = testBuildURL("test AYSC 24 = cn=ant");
        matches(url, ';cn=ant;', "Ad URL AYSC field 24 ant present in url");

        mockCookies.AYSC = "_24PVT_";
        url = testBuildURL("test AYSC 24 = PVT is removed");
        matches(url, ';cn=', "Ad URL AYSC field 24 not present in url", false);

        mockCookies.AYSC = "_24RES_";
        url = testBuildURL("test AYSC 24 = RES is removed");
        matches(url, ';cn=', "Ad URL AYSC field 24 not present in url", false);

        mockCookies.AYSC = "_24_";
        url = testBuildURL("test AYSC 24 empty");
        matches(url, ';cn=', "Ad URL AYSC field 24 not present in url", false);
    });

    test("FT.ads.buildURL (AYSC cookie all remaining fields) - not present in the URL", function () {
        var url, idx;
        maybeInitFixture();

        beginNewPage('buildURL AYSC Cookie Remainder');

        mockCookies.AYSC = "_00M__01M_02M_03M_04M_05M_06M_07M_08M_09M_10M_11M_12M_13M_14M_15M_16M_17M_18M_19M_20M_21M_22M_23M_24M_25M_26M_27M_28M_29M_30M__31M_32M_33M_34M_35M_36M_37M_38M_39M_40M_41M_42M_43M_44M_45M_46M_47M_48M_49M_50M_51M_52M_53M_54M_55M_56M_57M_58M_59M_60M_";
        url = testBuildURL("test AYSC remainder = not present in URL");
        for (idx = 0; idx < 100; ++idx) {
            var field = idx < 10 ? '0' + idx : '' + idx;
            if (idx > TEST.MaxAYSCFields || hasIDX(TEST.UnusedAysc, idx)) {
                matches(url, ';' + field + '=', "Ad URL AYSC field " + field + " should not be present in url; ", false);
            } else {
                matches(url, ';' + field + '=', "Ad URL AYSC field " + field + " should be present in url; ", true);
            }
        }
    });

    test("FT.ads.buildURL (AYSC cookie all XXX fields) - some not present in the URL", function () {
        var url, idx;
        maybeInitFixture();

        beginNewPage('buildURL AYSC Cookie Remainder XXX');

        mockCookies.AYSC = "_00XXX_01XXX_02XXX_03XXX_04XXX_05XXX_06XXX_07XXX_08XXX_09XXX_10XXX_11XXX_12XXX_13XXX_14XXX_15XXX_16XXX_17XXX_18XXX_19XXX_20XXX_21XXX_22XXX_23XXX_24XXX_25XXX_26XXX_27XXX_28XXX_29XXX_30XXX__31XXX_32XXX_33XXX_34XXX_35XXX_36XXX_37XXX_38XXX_39XXX_40XXX_41XXX_42XXX_43XXX_44XXX_45XXX_46XXX_47XXX_48XXX_49XXX_50XXX_51XXX_52XXX_53XXX_54XXX_55XXX_56XXX_57XXX_58XXX_59XXX_60XXX_";
        url = testBuildURL("test AYSC remainder = some not present in URL");
        for (idx = 0; idx < 100; ++idx) {
            var field = idx < 10 ? '0' + idx : '' + idx;
            if (idx <= TEST.MaxAYSCFields && !hasIDX(TEST.UnusedAysc, idx)) {
                // Field is not an unused AYSC field, we need to text for presence or absence based on xxx value
                if (hasIDX(TEST.OmitXXX, idx)) {
                    matches(url, ';' + field + '=', "Ad URL AYSC field " + field + " is XXX, should not be present in url; ", false);
                } else {
                    matches(url, ';' + field + '=xxx', "Ad URL AYSC field " + field + " is XXX, should be present in url; ", true);
                }
            }
        }
    });

    test("FT.ads.buildURL (AYSC cookie all PVT fields) - some not present in the URL", function () {
        var url, idx;
        expect(33);
        maybeInitFixture();

        beginNewPage('buildURL AYSC Cookie Remainder PVT');

        mockCookies.AYSC = "_00PVT_01PVT_02PVT_03PVT_04PVT_05PVT_06PVT_07PVT_08PVT_09PVT_10PVT_11PVT_12PVT_13PVT_14PVT_15PVT_16PVT_17PVT_18PVT_19PVT_20PVT_21PVT_22PVT_23PVT_24PVT_25PVT_26PVT_27PVT_28PVT_29PVT_30PVT_31PVT_32PVT_33PVT_34PVT_35PVT_36PVT_37PVT_38PVT_39PVT_40PVT_41PVT_42PVT_43PVT_44PVT_45PVT_46PVT_47PVT_48PVT_49PVT_50PVT_51PVT_52PVT_53PVT_54PVT_55PVT_56PVT_57PVT_58PVT_59PVT_60PVT_";
        url = testBuildURL("test AYSC remainder = not present in URL");
        for (idx = 0; idx < 100; ++idx) {
            var field = idx < 10 ? '0' + idx : '' + idx;
            if (idx <= TEST.MaxAYSCFields && !hasIDX(TEST.UnusedAysc, idx)) {
                // Field is not an unused AYSC field, we need to text for presence or absence based on xxx value
                if (hasIDX(TEST.OmitPVTRES, idx)) {
                    matches(url, ';' + field + '=', "Ad URL AYSC field " + field + " is PVT, should not be present in url; ", false);
                } else {
                    matches(url, ';' + field + '=pvt', "Ad URL AYSC field " + field + " is PVT, should be present in url; ", true);
                }
            }
        }
    });

    test("FT.ads.buildURL (AYSC cookie all RES fields) - some not present in the URL", function () {
        var url, idx;
        maybeInitFixture();

        beginNewPage('buildURL AYSC Cookie Remainder RES');
        mockCookies.AYSC = "_00RES_01RES_02RES_03RES_04RES_05RES_06RES_07RES_08RES_09RES_10RES_11RES_12RES_13RES_14RES_15RES_16RES_17RES_18RES_19RES_20RES_21RES_22RES_23RES_24RES_25RES_26RES_27RES_28RES_29RES_30RES_31RES_32RES_33RES_34RES_35RES_36RES_37RES_38RES_39RES_40RES_41RES_42RES_43RES_44RES_45RES_46RES_47RES_48RES_49RES_50RES_51RES_52RES_53RES_54RES_55RES_56RES_57RES_58RES_59RES_60RES_";
        url = testBuildURL("test AYSC remainder = not present in URL");
        for (idx = 0; idx < 100; ++idx) {
            var field = idx < 10 ? '0' + idx : '' + idx;
            if (idx <= TEST.MaxAYSCFields && !hasIDX(TEST.UnusedAysc, idx)) {
                // Field is not an unused AYSC field, we need to text for presence or absence based on xxx value
                if (hasIDX(TEST.OmitPVTRES, idx)) {
                    matches(url, ';' + field + '=', "Ad URL AYSC field " + field + " is PVT, should not be present in url; ", false);
                } else {
                    matches(url, ';' + field + '=res', "Ad URL AYSC field " + field + " is RES, should be present in url; ", true);
                }
            }
        }
    });

    test("FT.ads.buildURL (FT_U cookie) - for task TA11307", function () {
        var stub = sinon.stub(FT.ads, "kruxRetrieve", function(name){return ""});
        maybeInitFixture();
        var url, params, order, uParams;

        // TODO a full FT_U shown here.
        // FT_U=_EID=4326601_PID=4004326601_TIME=%5BThu%2C+07-May-2009+13%3A27%3A45+GMT%5D_SKEY=9e7iw%2BskQZwnnX2e29as1w%3D%3D_RI=1_

        beginNewPage('buildURL FT_U Cookie 1');

        mockCookies.FT_U = "_EID=2548659_";
        url = testBuildURL("test with FT_U cookie information");

        matches(url, ';eid=2548659;', "Ad URL erights ID should appear in URL");

        mockCookies.FT_U = "_EID=0002659_";
        url = testBuildURL("test with FT_U leading zeros removed");

        matches(url, ';eid=2659;', "Ad URL erights ID appears in url");

        mockCookies.FT_U = "_EID=4326601_PID=4004326601_TIME=%5BThu%2C+07-May-2009+13%3A27%3A45+GMT%5D_SKEY=9e7iw%2BskQZwnnX2e29as1w%3D%3D_RI=1_";
        url = testBuildURL("test with full FT_U cookie information");

        matches(url, ';eid=4326601;', "Ad URL erights ID appears in url");

        params = extract_params(url);
        order = params._order.join(',');
        equal(order, 'sz,eid,uuid,ts,cc,pos,bht,tile,ord', "Ad URL contains eid and u parameters in correct order");

        beginNewPage('buildURL FT_U Cookie 2');
        stub.restore();
    });

    test("FT.ads.buildURL (FTSession cookie)", function () {
        maybeInitFixture();
        var url, params, order, uParams;

        beginNewPage('buildURL FT_U Cookie 1');

        mockCookies.FT_U = "_EID=2548659_";
        url = testBuildURL("test with FT_U cookie information");

        matches(url, ';eid=2548659;', "Ad URL erights ID should appear in URL");
        notmatches(url, ';fts=false', "Logged in flag set to ad call");


        mockCookies.FT_U = "_EID=0002659_";
        mockCookies.FTSession = "1234567890";
        url = testBuildURL("test with FT_U leading zeros removed");

        matches(url, ';eid=2659;', "Ad URL erights ID appears in url");
        matches(url, ';fts=true', "Logged in flag set to ad call");

    });

    test("FT.ads.toBase36 (for Audience Science cookie) - for task TA10281", function () {
        maybeInitFixture();
        var idx;
        for (idx = 0; idx < TEST.Base36.length; idx++) {
            var value = TEST.Base36[idx];
            var result = TEST.Base36Result[idx];
            equal(FT.ads.toBase36(value), TEST.Base36Result[idx], "Conversion of number to Base 36 works: " + value);
            equal(FT.ads.fromBase36(result), value, "Conversion of number from Base 36 works: " + result);
        }
    });

    test("FT.ads.encodeAudSci (for Audience Science cookie) - for task TA10281", function () {
        maybeInitFixture();
        var idx;
        for (idx = 0; idx < TEST.AudSci.length; idx++) {
            var values = TEST.AudSci[idx];
            var results = TEST.AudSciResult[idx];
            var Codes = values.split('|');
            var Results = results.split(';');
            for (var loop = 0; loop < Codes.length; loop++) {
                var value = Codes[loop];
                var result = Results[loop];
                result = result.replace(/^a=/, '');
                equal(FT.ads.encodeAudSci(value), result, "Encoding of Audience Science value works: " + value);
                equal(FT.ads.decodeAudSci(result), value, "Decoding of Audience Science works: " + result);
            }
        }
    });

    test("FT.ads.buildURL (Audience Science cookie) - for task TA10281 and TA13255 and story US17759", function () {
        var stub = sinon.stub(FT.ads, "kruxRetrieve", function(name){return ""});
        maybeInitFixture();
        equal(FT.ads.CONST.audSciMax, 35, "Maximum number of AudSci parameters to use should be");

        beginNewPage('buildURL rsi_segs All AudSci values included');
        mockCookies.rsi_segs = TEST.AudSci[0];
        var url = testBuildURL("test with rsi_segs cookie information");

        var maxUPramLength = 511;
        var pars = extract_params(url);

        equal(url.length < FT.ads.CONST.urlMax, true, 'The URL should be <= ' + FT.ads.CONST.urlMax + ' characters. URL length is ' + url.length);

        var Params = extract_params(url);
        var order = Params._order.join(',');
        matches(url, ';' + TEST.AudSciResult[0] + ';', "Ad URL audience science encoded values appear in url encoded correctly");

        equal(order, 'sz,dcopt,a,a,a,a,a,a,a,a,a,a,a,a,a,uuid,ts,cc,pos,bht,tile,ord', "Ad URL contains audience science cookie parameters in correct order");

        var saveMax = FT.ads.CONST.audSciMax;
        FT.ads.CONST.audSciMax = 5;
        equal(FT.ads.CONST.audSciMax, 5, "Maximum number of AudSci parameters to use should be");

        beginNewPage('buildURL rsi_segs Limit the number of AudSci values included');
        mockCookies.rsi_segs = TEST.AudSci[0];
        url = testBuildURL("test with rsi_segs cookie information");
        Params = extract_params(url);
        order = Params._order.join(',');

        matches(url, ';' + TEST.AudSciResultShort1 + TEST.AudSciResultShort2, "Ad URL audience science encoded values appear in url encoded correctly");
        equal(order, 'sz,dcopt,a,a,a,a,a,uuid,ts,cc,pos,bht,tile,ord', "Ad URL contains only five audience science cookie parameters in correct order");

        beginNewPage('buildURL rsi_segs Split AudSci values around the u= parameter');
        clearMockCookies();
        mockCookies.rsi_segs = TEST.AudSci[0];
        mockCookies.FT_U = "_EID=4326601_PID=4004326601_TIME=%5BThu%2C+07-May-2009+13%3A27%3A45+GMT%5D_SKEY=9e7iw%2BskQZwnnX2e29as1w%3D%3D_RI=1_";
        url = testBuildURL("test with rsi_segs cookie information");

        Params = extract_params(url);
        order = Params._order.join(',');

        matches(url, ';' + TEST.AudSciResultSplit1 + ';uuid=build-url-test;ts=' + getCurrentYear(), "Ad URL audience science encoded values appear in url encoded correctly");

        // Restore the default values of AudSci Limits
        FT.ads.CONST.audSciMax = saveMax;
        stub.restore();
    });

    test("FT.ads.buildURL (Audience Science cookie) - for US30608 Extend Aud Sci segments to 35", function () {
        var stub = sinon.stub(FT.ads, "kruxRetrieve", function(name){return ""});
        maybeInitFixture();
        equal(FT.ads.CONST.audSciMax, 35, "Maximum number of AudSci parameters to use should be");

        beginNewPage('buildURL rsi_segs has 35 segments');
        mockCookies.rsi_segs = TEST.AudSci[3];
        var url = testBuildURL("test with rsi_segs cookie information");

        var pars = extract_params(url);

        equal(url.length < FT.ads.CONST.urlMax, true, 'The URL should be <= ' + FT.ads.CONST.urlMax + ' characters. URL length is ' + url.length);

        var Params = extract_params(url);
        var order = Params._order.join(',');
        matches(url, ';' + TEST.AudSciResult[3] + ';', "Ad URL audience science encoded values appear in url encoded correctly");

        equal(order, 'sz,dcopt,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,uuid,ts,cc,pos,bht,tile,ord', "Ad URL contains audience science cookie parameters in correct order");

        beginNewPage('buildURL rsi_segs has more than 35 segments');
        mockCookies.rsi_segs = TEST.AudSci[4];

        var url = testBuildURL("test with rsi_segs cookie information");
        pars = extract_params(url);

        equal(url.length < FT.ads.CONST.urlMax, true, 'The URL should be <= ' + FT.ads.CONST.urlMax + ' characters. URL length is ' + url.length);

        Params = extract_params(url);
        order = Params._order.join(',');
        matches(url, ';' + TEST.AudSciResult[3] + ';', "Ad URL audience science encoded values appear in url encoded correctly");

        equal(order, 'sz,dcopt,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,uuid,ts,cc,pos,bht,tile,ord', "Ad URL contains audience science cookie parameters in correct order");
        stub.restore();
    });

    test("FT.ads.kruxRetrieve (for Krux DMP)", function () {
        /* test setup, remove cookies and local storage keys that can get in the way */
        maybeInitFixture();
        if (window.localStorage) {
            var old_kxuser_ls =  window.localStorage.getItem('kxuser');
            var old_kxsegs_ls =  window.localStorage.getItem('kxsegs');
            window.localStorage.removeItem('kxuser');
            window.localStorage.removeItem('kxsegs');
        }

        mockCookies.kxuser = TEST.krux.userid + 'cookie';
        mockCookies.kxsegs = 'cookie,' + TEST.krux.segs;
        equal(FT.ads.kruxRetrieve('user'), TEST.krux.userid + 'cookie', 'can get user id from cookie');
        equal(FT.ads.kruxRetrieve('segs'), 'cookie,' + TEST.krux.segs, 'can get segs from cookie');


        if (window.localStorage) {
            window.localStorage.setItem('kxuser', TEST.krux.userid + 'localstorage');
            window.localStorage.setItem('kxsegs', 'localstorage,' + TEST.krux.segs);
            equal(FT.ads.kruxRetrieve('user'), TEST.krux.userid + 'localstorage', 'can get user id from local storage if available');
            equal(FT.ads.kruxRetrieve('segs'), 'localstorage,' + TEST.krux.segs, 'can get segs from local storage if available');

            /* test teardown, reinstate local storage values */
            window.localStorage.removeItem('kxuser');
            window.localStorage.removeItem('kxsegs');
            if (old_kxuser_ls) {
                window.localStorage.setItem('kxuser', old_kxuser_ls);
            }
            if (old_kxsegs_ls) {
                window.localStorage.setItem('kxsegs', old_kxsegs_ls);
            }
        } else {
            ok(true, 'unable to test local storage');
        }
    });

    test("FT.ads.buildURL (Krux local storage)", function () {
        if (window.localStorage) {
            maybeInitFixture();

            /* test setup, remove cookies and local storage keys that can get in the way */
            var old_kxuser_ls =  window.localStorage.getItem('kxuser');
            var old_kxsegs_ls =  window.localStorage.getItem('kxsegs');
            window.localStorage.setItem('kxuser', TEST.krux.userid);
            window.localStorage.setItem('kxsegs', TEST.krux.segs);

            beginNewPage('buildURL Krux segements in local storage');

            var url = testBuildURL("test with krux cookie information");
            var pars = extract_params(url);

            equal(url.length < FT.ads.CONST.urlMax, true, 'The URL should be <= ' + FT.ads.CONST.urlMax + ' characters. URL length is ' + url.length);

            var Params = extract_params(url);
            var order = Params._order.join(',');
            matches(url, TEST.krux.urlSegs, "Ad URL krux segments appear in url correctly");
            matches(url, 'kuid=' + TEST.krux.userid, "Ad URL krux user id appears in url correctly");
            matches(url, 'khost=' + TEST.krux.host, "Ad URL krux host appears in url correctly");

            equal(order, 'sz,dcopt,kuid,khost,ksg,ksg,ksg,ksg,uuid,ts,cc,pos,bht,tile,ord', "Ad URL contains krux parameters in correct order");

            /* test teardown, reinstate local storage values */
            window.localStorage.removeItem('kxuser');
            window.localStorage.removeItem('kxsegs');
            if (old_kxuser_ls) {
                window.localStorage.setItem('kxuser', old_kxuser_ls);
            }
            if (old_kxsegs_ls) {
                window.localStorage.setItem('kxsegs', old_kxsegs_ls);
            }
        } else {
            ok(true, 'localstorage unavailable in this browser')
        }
    });

    test("FT.ads.buildURL (Krux cookies)", function () {
        window.localStorage.removeItem('kxuser');
        window.localStorage.removeItem('kxsegs');
        maybeInitFixture();

        beginNewPage('buildURL Krux segements in cookies');
        mockCookies.kxsegs = TEST.krux.segs;
        mockCookies.kxuser = TEST.krux.userid;
        var url = testBuildURL("test with krux cookie information");

console.log(url);
        var pars = extract_params(url);

        equal(url.length < FT.ads.CONST.urlMax, true, 'The URL should be <= ' + FT.ads.CONST.urlMax + ' characters. URL length is ' + url.length);

        var Params = extract_params(url);
        var order = Params._order.join(',');
        matches(url, TEST.krux.urlSegs, "Ad URL krux segments appear in url correctly");
        matches(url, 'kuid=' + TEST.krux.userid, "Ad URL krux user id appears in url correctly");
        matches(url, 'khost=' + TEST.krux.host, "Ad URL krux host appears in url correctly");

        equal(order, 'sz,dcopt,kuid,khost,ksg,ksg,ksg,ksg,uuid,ts,cc,pos,bht,tile,ord', "Ad URL contains krux cookie parameters in correct order");

    });

    test("FT.ads.buildURL (Comprehensive cookie) - TA13255", function () {
        window.localStorage.removeItem('kxuser');
        window.localStorage.removeItem('kxsegs');
        maybeInitFixture();
        beginNewPage('buildURL Comprehensive All AudSci', { 'env':{ 'url_location':"http://www.ft.com/?q=cat+dog" } });
        mockCookies.AYSC = "_011967_02M_04greater%2520london_05ITT_06TEC_07MA_12SE19HL_13GBR_14GBR_15UK_17london_18london_190500_20n_2112_22P0P2Tools_24europe_25PVT_26PVT_273f5a2e_40forty_41fortyone_42fortytwo_43fortythree_44fortyfour_45fortyfive_46fortysix_47fortyseven_48fortyeight_49fortynine_50fifty_51fiftyone_52fiftytwo_53fiftythree_54fiftyfour_55fiftyfive_56fiftysix_57fiftyseven_58fiftyeight_59fiftynine_60sixty_";
        mockCookies.FT_U = "_EID=4326601_PID=4004326601_TIME=%5BThu%2C+07-May-2009+13%3A27%3A45+GMT%5D_SKEY=9e7iw%2BskQZwnnX2e29as1w%3D%3D_RI=1_";
        mockCookies.rsi_segs = "H07711_10108|J07717_10576|J07717_10089|J07717_10502|J07717_10236|J07717_10286|J07717_10288|J07717_10295|J07717_10299|J07717_10301|J07717_10322|J07717_10344|J07717_10345|J07717_10357|J07717_10369|J07717_10530|J07717_10555|J07717_10545|J07717_10221|H07711_10127";
        mockCookies.kxsegs = TEST.krux.segs;
        mockCookies.kxuser = TEST.krux.userid;

        var url = testBuildURL("test with all cookie information", { 'pos':'banlb' });
        var Params = extract_params(url);
        var order = Params._order.join(',');
        equal(order, TEST.Comprehensive, "Ad URL contains parameters in correct order");

        var saveMax = FT.ads.CONST.audSciMax;
        FT.ads.CONST.audSciMax = 5;
        equal(FT.ads.CONST.audSciMax, 5, "Maximum number of AudSci parameters to use should be");

        beginNewPage('buildURL Comprehensive with AudSci parameters split up and no u or eid param', { 'env':{ 'url_location':"http://www.ft.com/?q=cat+dog" } });
        clearMockCookies();
        mockCookies.AYSC = "_011967_02M_04greater%2520london_05ITT_06TEC_07MA_12SE19HL_13GBR_14GBR_15UK_17london_18london_190500_20n_2112_22P0P2Tools_24europe_25PVT_26PVT_273f5a2e_40forty_41fortyone_42fortytwo_43fortythree_44fortyfour_45fortyfive_46fortysix_47fortyseven_48fortyeight_49fortynine_50fifty_51fiftyone_52fiftytwo_53fiftythree_54fiftyfour_55fiftyfive_56fiftysix_57fiftyseven_58fiftyeight_59fiftynine_60sixty_97c_";
        mockCookies.rsi_segs = "H07711_10108|J07717_10576|J07717_10089|J07717_10502|J07717_10236|J07717_10286|J07717_10288|J07717_10295|J07717_10299|J07717_10301|J07717_10322|J07717_10344|J07717_10345|J07717_10357|J07717_10369|J07717_10530|J07717_10555|J07717_10545|J07717_10221|H07711_10127";
        url = testBuildURL("test with all cookie information", { 'pos':'banlb' });

        Params = extract_params(url);
        order = Params._order.join(',');
        equal(order, 'sz,dcopt,07,a,a,a,a,a,06,05,27,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,19,20,21,slv,02,14,cn,01,kw,uuid,ts,cc,pos,bht,tile,ord', "Ad URL contains parameters in correct order");
        matches(url, ';sz=468x60,728x90,970x90;dcopt=ist;07=ma;a=h6fna7;a=z576;a=z89;a=z502;a=z236;06=tec;05=itt;27=3f5a2e;40=forty;41=fortyone;42=fortytwo;43=fortythree;44=fortyfour;45=fortyfive;46=fortysix;47=fortyseven;48=fortyeight;49=fortynine;50=fifty;51=fiftyone;52=fiftytwo;53=fiftythree;54=fiftyfour;55=fiftyfive;56=fiftysix;57=fiftyseven;58=fiftyeight;59=fiftynine;60=sixty;19=500;20=n;21=12;slv=cor;02=m;14=gbr;cn=eur;01=1967;kw=cat%20dog;uuid=' + Params.uuid + ';ts=' + Params.ts + ';cc=n;pos=banlb;bht=true;tile=1;', 'url parameters correctly substituted in correct order');

        // Restore the default values of AudSci Limits
        FT.ads.CONST.audSciMax = saveMax;

    });

    test("FT.ads.buildURL (test for max length of ad calls)", function () {
        var stub = sinon.stub(FT.ads, "kruxRetrieve", function(name){return ""});
        maybeInitFixture();
        beginNewPage('buildURL Comprehensive Cookie', { 'env':{ 'url_location':"http://www.ft.com/?q=cat+dog" } });

        // set dfp_site to max length = 31
        FT.env.dfp_site = "test.5887.dfpsitemaxlengthtests";
        // set dfp_zone to max length = 32
        FT.env.dfp_zone = "dfp-zone-max-length-ad-call-test";
        // set dfp_targeting (with topics)
        FT.env.dfp_targeting = "pt=art;org=mondelez international inc formerly kraft foods inc;peo=abu musab al-zarqawi"

        mockCookies.AYSC = "_011967_02M_04greater%2520london_05ITT_06TEC_07MA_12SE19HL_13GBR_14GBR_15UK_17london_18london_190500_20n_2112_22P0P2Tools_24europe_25PVT_26PVT_273f5a2e_40forty_41fortyone_42fortytwo_43fortythree_44fortyfour_45fortyfive_46fortysix_47fortyseven_48fortyeight_49fortynine_50fifty_51fiftyone_52fiftytwo_53fiftythree_54fiftyfour_55fiftyfive_56fiftysix_57fiftyseven_58fiftyeight_59fiftynine_60sixty_";
        mockCookies.FT_U = "_EID=4326601_PID=4004326601_TIME=%5BThu%2C+07-May-2009+13%3A27%3A45+GMT%5D_SKEY=9e7iw%2BskQZwnnX2e29as1w%3D%3D_RI=1_";
        // rsi_segs with 35 segments
        mockCookies.rsi_segs = "H07711_10108|J07717_10576|J07717_10089|J07717_10502|J07717_10236|J07717_10286|J07717_10288|J07717_10295|J07717_10299|J07717_10301|J07717_10322|J07717_10344|J07717_10345|J07717_10357|J07717_10369|J07717_10530|J07717_10555|J07717_10545|J07717_10221|J07717_10224|J07717_10225|J07717_10226|J07717_10233|J07717_10236|J07717_10281|J07717_10286|J07717_10287|J07717_10288|J07717_10289|J07717_10294|J07717_10295|J07717_10296|J07717_10297|J07717_10298|H07711_10127";

        var url = testBuildURL("test with all cookie information", { 'pos':'banlb' });
        var Params = extract_params(url);
        var order = Params._order.join(',');

        equal(order, "sz,dcopt,07,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,06,05,27,eid,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,19,20,21,slv,02,14,cn,01,kw,uuid,ts,cc,pt,org,peo,pos,bht,tile,ord", "Ad URL contains parameters in correct order");
        matches(url, ';sz=468x60,728x90,970x90;dcopt=ist;07=ma;a=h6fna7;a=z576;a=z89;a=z502;a=z236;a=z286;a=z288;a=z295;a=z299;a=z301;a=z322;a=z344;a=z345;a=z357;a=z369;a=z530;a=z555;a=z545;a=z221;a=z224;a=z225;a=z226;a=z233;a=z236;a=z281;a=z286;a=z287;a=z288;a=z289;a=z294;a=z295;a=z296;a=z297;a=z298;a=h7kdbz;06=tec;05=itt;27=3f5a2e;eid=4326601;40=forty;41=fortyone;42=fortytwo;43=fortythree;44=fortyfour;45=fortyfive;46=fortysix;47=fortyseven;48=fortyeight;49=fortynine;50=fifty;51=fiftyone;52=fiftytwo;53=fiftythree;54=fiftyfour;55=fiftyfive;56=fiftysix;57=fiftyseven;58=fiftyeight;59=fiftynine;60=sixty;19=500;20=n;21=12;slv=lv2;02=m;14=gbr;cn=eur;01=1967;kw=cat%20dog;uuid=' + Params.uuid + ';ts=' + Params.ts + ';cc=n;pt=art;org=mondelez%20international%20inc%20formerly%20kraft%20foods%20inc;peo=abu%20musab%20al-zarqawi;pos=banlb;bht=true;tile=1;', 'url parameters correctly substituted in correct order');
        equal(url.length < FT.ads.CONST.urlMax, true, 'The URL should be <= ' + FT.ads.CONST.urlMax + ' characters. URL length is ' + url.length);

        clearMockCookies();
        stub.restore();
    });

    test("FT.ads.buildURL (FT_Remember cookie) for US18551", function () {
        var stub = sinon.stub(FT.ads, "kruxRetrieve", function(name){return "";});
        maybeInitFixture();
        var url, params, order, uParams;

        beginNewPage('buildURL FT_Remember Cookie 1');
        mockCookies.FT_Remember = "7038802:";
        url = testBuildURL("test with FT_Remember cookie information");

        matches(url, ';eid=7038802;', "Ad URL erights ID should appear in URL");

        mockCookies.FT_Remember = "7038802:TK3673275680330534570:FNAME=April:LNAME=Mateo:EMAIL=april.mateo@ft.com";
        url = testBuildURL("test with full FT_Remember cookie information");

        matches(url, ';eid=7038802;', "Ad URL erights ID appears in url");
        params = extract_params(url);
        order = params._order.join(',');
        equal(order, 'sz,eid,uuid,ts,cc,pos,bht,tile,ord', "Ad URL contains eid and u parameters in correct order");
        stub.restore();
    });

    test("FT.ads.buildURL () should include values from FT.ads.getConsentValue() with cc=n cc=y for US23911", function () {
        maybeInitFixture();
        var url;

        beginNewPage('buildURL consent cookie');
        mockCookies.cookieconsent = "accepted";
        url = testBuildURL("cc=y");
        matches(url, "cc=y", "consent cookie accepted and cc=y should be present");

        beginNewPage('buildURL consent cookie not present');
        mockCookies.cookieconsent = undefined;
        url = testBuildURL("cc=n");
        matches(url, "cc=n", "consent cookie not present and cc=n should be present");

    });

    test("FT.ads.buildURL (FTUserTrack cookie)", function () {
        maybeInitFixture();
        var url, params, order;

        beginNewPage('buildURL FTUserTrack cookie with correct IP values 1');

        // test case 1
        mockCookies.FTUserTrack = "203.190.72.182.1344916650137365";
        url = testBuildURL("Test 1: FTUserTrack with correct IP values 1");
        matches(url, ';loc=cadzbjazhczbic;uuid=build-url-test;ts=' + getCurrentYear(), "Ad URL encoded IP appears before uuid");

        // test case 2
        mockCookies.FTUserTrack = "203.190.72.182.aaaa";
        url = testBuildURL("Test 2: FTUserTrack with correct IP values 2");
        matches(url, ';loc=cadzbjazhczbic;uuid=build-url-test;ts=' + getCurrentYear(), "Ad URL encoded IP appears before uuid");

    });

    test("FT.ads.toBase36 (for Audience Science cookie) - for task TA10281", function () {
        maybeInitFixture();
        var idx;
        for (idx = 0; idx < TEST.Base36.length; idx++) {
            var value = TEST.Base36[idx];
            var result = TEST.Base36Result[idx];
            equal(FT.ads.toBase36(value), TEST.Base36Result[idx], "Conversion of number to Base 36 works: " + value);
            equal(FT.ads.fromBase36(result), value, "Conversion of number from Base 36 works: " + result);
        }
    });

    test("FT.ads.encodeAudSci (for Audience Science cookie) - for task TA10281", function () {
        maybeInitFixture();
        var idx;
        for (idx = 0; idx < TEST.AudSci.length; idx++) {
            var values = TEST.AudSci[idx];
            var results = TEST.AudSciResult[idx];
            var Codes = values.split('|');
            var Results = results.split(';');
            for (var loop = 0; loop < Codes.length; loop++) {
                var value = Codes[loop];
                var result = Results[loop];
                result = result.replace(/^a=/, '');
                equal(FT.ads.encodeAudSci(value), result, "Encoding of Audience Science value works: " + value);
                equal(FT.ads.decodeAudSci(result), value, "Decoding of Audience Science works: " + result);
            }
        }
    });

    test("FT.ads.shouldSubmitToTrack()", function () {
        maybeInitFixture();
        beginNewPage('FT.ads.shouldSubmitToTrack Test');

        var saved_urlThreshold = FT.ads.CONST.urlThreshold;
        var saved_urlThresholdMax = FT.ads.CONST.urlThresholdMax;

        FT.ads.CONST.urlThreshold = 0;
        FT.ads.CONST.urlThresholdMax = 100;
        equal(FT.ads.shouldSubmitToTrack(), false, "Threshold too low, always should be");

        FT.ads.submitToTrack = true;
        equal(FT.ads.shouldSubmitToTrack(), true, "True value is cached so subsequent checks also pass");

        FT.ads.CONST.urlThreshold = 50;
        FT.ads.CONST.urlThresholdMax = 100;

        var below_threshold = false;
        var above_threshold = false;
        var below = 0;
        for (var count = 0; count < 1000; ++count) {
            // Reset the flag so it tries a random number again.
            FT.ads.submitToTrack = false;
            var result = FT.ads.shouldSubmitToTrack();
            if (result === false) {
                above_threshold = true;
            } else {
                below++;
                below_threshold = true;
            }
        }
        equal(below_threshold, true, "Random numbers are working, one case below 50%");
        equal(above_threshold, true, "Random numbers are working, one case is above 50%");
        ok(below < 600, "Random numbers are working, ratio is around 50%");

        FT.ads.CONST.urlThreshold = saved_urlThreshold;
        FT.ads.CONST.urlThresholdMax = saved_urlThresholdMax;
    });

    test("FT.ads.getLongestUrl() - for Task TA13272", function () {
        maybeInitFixture();
        beginNewPage('FT.ads.getLongestUrl Test');

        // Ensure flag is not stuck at true.
        FT.ads.submitToTrack = false;

        mockCookies.FT_U = "_EID=12345_";

        equal(FT.ads.CONST.urlThreshold, 10000, "Check that FT.ads.CONST.urlThreshold is correct value");
        equal(FT.ads.CONST.urlThresholdMax, 2000000, "Check that FT.ads.CONST.urlThresholdMax is correct value");
        equal(FT.ads.CONST.trackUrl, "http://track.ft.com/track/dfp_error.gif", "trackUrl value should be");
        equal(FT.ads.getLongestUrl(), undefined, "No Ad Calls therefore no URL to get");

        testAdCall('newssubs', "One newssubs ad call on page");
        matches(FT.ads.getLongestUrl(), 'newssubs', "One newssubs ad call on page getLongestUrl()");
        matches(FT.ads.getLongestUrl(), '^/N5887/adj/test\\.5887\\.dev/build-url-test', "getLongestUrl() should omit protocol and host strings ");

        testAdCall('banlb', "Two ad calls on page, banlb is longest");
        matches(FT.ads.getLongestUrl(), 'banlb', "Two ad calls on page getLongestUrl() ");
    });

    test("FT.ads.checkSubmitLongestUrl() - for Task TA13272", function () {
        maybeInitFixture();
        beginNewPage('FT.ads.checkSubmitLongestUrl()');
        var saved_urlThreshold = FT.ads.CONST.urlThreshold;
        var saved_urlThresholdMax = FT.ads.CONST.urlThresholdMax;

        // Ensure flag is not stuck at true.
        FT.ads.submitToTrack = false;
        mockCookies.FT_U = "_EID=12345_";

        equal(FT.ads.checkSubmitLongestUrl(), undefined, "When no ads have been requested FT.ads.checkSubmitLongestUrl returns");

        testAdCall('newssubs', "One newssubs ad call on page");

        // Force submission check with flag.
        FT.ads.submitToTrack = true;
        matches(FT.ads.checkSubmitLongestUrl(), 'newssubs', "When an ad has been requested and threshold is high enough FT.ads.checkSubmitLongestUrl returns the url");

        FT.ads.CONST.urlThreshold = 0;
        FT.ads.CONST.urlThresholdMax = 100;
        FT.ads.submitToTrack = false;
        equal(FT.ads.checkSubmitLongestUrl(), undefined, "When an ad has been requested and threshold is too low FT.ads.checkSubmitLongestUrl returns false");

        FT.ads.CONST.urlThreshold = saved_urlThreshold;
        FT.ads.CONST.urlThresholdMax = saved_urlThresholdMax;
    });

    test("FT.ads.injectUrlTrackCall() - for Task TA13272", function () {
        maybeInitFixture();
        beginNewPage('FT.ads.injectUrlTrackCall()');

        mockCookies.FT_U = "_EID=12345_";

        var saved_urlThreshold = FT.ads.CONST.urlThreshold;
        var saved_urlThresholdMax = FT.ads.CONST.urlThresholdMax;
        FT.ads.CONST.trackUrl = "http://falcon.ft.com/track/dfp_error.gif";

        // Force injection of track call - if ad call was made
        FT.ads.submitToTrack = true;

        var result = FT.ads.injectUrlTrackCall();
        equal(result, undefined, "When no ads have been requested FT.ads.injectUrlTrackCall returns an undefined result");

        // check that an image was not injected onto the page.
        var rImage = document.getElementById("injectUrlTrackCall");
        equal(rImage, null, "injectUrlTrackCall image should not be on page");

        testAdCall('newssubs', "One newssubs ad call on page");

        FT.ads.submitToTrack = false;
        FT.ads.CONST.urlThreshold = 0;
        FT.ads.CONST.urlThresholdMax = 100;
        result = FT.ads.injectUrlTrackCall();
        equal(result, undefined, "An ad call, but threshold too low. FT.ads.injectUrlTrackCall returns an undefined result");
        rImage = document.getElementById("injectUrlTrackCall");
        equal(rImage, null, "injectUrlTrackCall image should still not be on page");

        FT.ads.CONST.urlThreshold = FT.ads.CONST.urlThresholdMax;
// CANNOT PERFORM THESE TESTS as they cause selenium regression tests to hang when testing the build.
// Not sure we can test the success case at all then except manually.
//		result = FT.ads.injectUrlTrackCall();
//		differs(result, undefined,	 "Ad call and thresholds ok FT.ads.injectUrlTrackCall returns non undefined");
        rImage = document.getElementById("injectUrlTrackCall");
//		ok(rImage !== null 	  "injectUrlTrackCall image exists on page now");
//		equal(rImage.src, FT.ads.CONST.trackUrl + "?long_url=" + FT.ads.getLongestUrl() 	 "The src attribute of injected image should contain CONST.trackUrl and the longest URL");

        FT.ads.CONST.urlThreshold = saved_urlThreshold;
        FT.ads.CONST.urlThresholdMax = saved_urlThresholdMax;
    });

    test("FT.ads.injectUnclassifiedTrackCall() - for Task TA16343", function () {
        maybeInitFixture();
        beginNewPage('FT.ads.injectUnclassifiedTrackCall()');

        var site = FT.env.dfp_site;
        var zone = FT.env.dfp_zone;
        var saved_urlThreshold = FT.ads.CONST.urlThreshold;
        var saved_urlThresholdMax = FT.ads.CONST.urlThresholdMax;

        FT.ads.CONST.trackUrl = "http://falcon.ft.com/track/dfp_error.gif";

        var result;
        FT.ads.submitToTrack = true;
// CANNOT PERFORM THESE TESTS as they cause selenium regression tests to hang when testing the build.
// Not sure we can test the success case at all then except manually.
//		FT.ads.injectUnclassifiedTrackCall();
//		equal(result, undefined,	  "Injection forced but not unclassified site, returns undefined");
        var rImage = document.getElementById("injectUnclassifiedTrackCall");
//		equal(rImage, null 	 "injectUnclassifiedTrackCall image should not be on page");

        FT.ads.submitToTrack = false;
        FT.ads.setDefaultSiteZone();
        FT.ads.CONST.urlThreshold = 0;
        FT.ads.CONST.urlThresholdMax = 100;
        result = FT.ads.injectUnclassifiedTrackCall();
        equal(result, undefined, "Threshold too low. returns an undefined result");
        rImage = document.getElementById("injectUnclassifiedTrackCall");
        equal(rImage, null, "injectUnclassifiedTrackCall image should not be on page");

        FT.ads.submitToTrack = true;
// CANNOT PERFORM THESE TESTS as they cause selenium regression tests to hang when testing the build.
// Not sure we can test the success case at all then except manually.
//		result = FT.ads.injectUnclassifiedTrackCall();
//		differs(result, undefined,	 "Injection forced, returns a url");
        rImage = document.getElementById("injectUnclassifiedTrackCall");
//		differs(rImage, null 	"injectUnclassifiedTrackCall image exists on page now");
//		equal(rImage.src, FT.ads.CONST.trackUrl + "?unclassified=" + document.location 	  "The src attribute of injected image should contain CONST.trackUrl and the longest URL");

        FT.ads.CONST.urlThreshold = saved_urlThreshold;
        FT.ads.CONST.urlThresholdMax = saved_urlThresholdMax;
        FT.env.dfp_site = site;
        FT.env.dfp_zone = zone;
    });

    test("FT.ads.buildURL (non targetting params ts and uuid)  - for Task TA27559", function () {
        var url, params;
        maybeInitFixture();

        beginNewPage('build URL1');
        mockCookies.FT_U = "_EID=2548659_";
        url = testBuildURL("build URL where pageUUID defined but w/o value");

        beginNewPage('set non-empty dfp zone', {
            'env':{
                'dfp_site':'test.5887.dev',
                'dfp_zone':'test-new-zone'
            }
        });
        mockCookies.FT_U = "_EID=2548659_";
        url = testBuildURL("buildURL where non-empty dfp_zone is set.");

        beginNewPage('set empty dfp zone', {
            'env':{
                'dfp_site':'test.5887.dev',
                'dfp_zone':''
            }
        });
        url = testBuildURL("buildURL where empty dfp_zone is set, both pageUUID and getUUIDFromString are invalid.", {'cookies':'FT_U=_EID=2548659_'});

        pageUUID = '0913f5d6-0864-11e0-8527-00144feabdc0';
        beginNewPage('build URL2');
        mockCookies.FT_U = "_EID=2548659_";

        getUUIDFromString = function (stringForExtractingUUID) {
            var safeStringForMatch = stringForExtractingUUID.toString();
            var articleId = safeStringForMatch.match(/[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}/);
            if (articleId) {
                return articleId.toString();
            }
            return null;
        };

        beginNewPage('build URL3');
        mockCookies.FT_U = "_EID=2548659_";
        url = testBuildURL("buildURL where both pageUUID and getUUIDFromString defined.  pageUUID is valid.");

        pageUUID = '';
        beginNewPage('build URL4');
        mockCookies.FT_U = "_EID=2548659_";
        url = testBuildURL("buildURL where both pageUUID and getUUIDFromString defined. pageUUID = '', url has no uuid.");

        pageUUID = undefined;
        beginNewPage('build URL5');
        mockCookies.FT_U = "_EID=2548659_";
        url = testBuildURL("buildURL where pageUUID undefined, getUUIDFromString defined. URL does not contain UUID.");

        getUUIDFromString = function (stringForExtractingUUID) {
            return '';
        };

        beginNewPage('build URL6');
        mockCookies.FT_U = "_EID=2548659_";
        url = testBuildURL("buildURL where pageUUID undefined, getUUIDFromString returns empty uuid.");

        getUUIDFromString = undefined;
        beginNewPage('build URL7');
        mockCookies.FT_U = "_EID=2548659_";
        url = testBuildURL("buildURL where both pageUUID and getUUIDFromString are undefined.");
    });

    test("FT.corppop AYSC 98 PVT", function () {
        mockCookies.AYSC = "_2712345_98PVT_";
        testCorpCookieMatchAndBuildAdURL('http://media.ft.com/adimages/banner/12345.js', 1);
    });

    test("FT.corppop AYSC 98 IA", function () {
        mockCookies.AYSC = "_2712345_98IA_";

        testCorpCookieMatchAndBuildAdURL(null, 0);
    });

    test("FT.corppop AYSC 97  98 A", function () {
        mockCookies.AYSC = "_22P2Tools_2712345_97c_98IA_";
        testCorpCookieMatchAndBuildAdURL(null, 0);
    });

    test("FT.corppop AYSC 98 A anon", function () {
        FT.Properties.CORPORATE_AMO_BASE = 'http://registration.ft.com/someurl/';
        mockCookies.AYSC = "_2712345_98A_";
        testCorpCookieMatchAndBuildAdURL(FT.Properties.CORPORATE_AMO_BASE + 'anon/12345', 1);
    });
    /** - failing test
     test("FT.corppop AYSC 98 A registered", function () {
     FT.Properties.CORPORATE_AMO_BASE = 'http://registration.ft.com/someurl/';
     mockCookies.AYSC = "_22P0Tools_2712345_98A";
     testCorpCookieMatchAndBuildAdURL(FT.Properties.CORPORATE_AMO_BASE + 'registered/12345', 1);
     });
     */
    test("FT.corppop AYSC 98 A subscribed", function () {
        FT.Properties.CORPORATE_AMO_BASE = 'http://registration.ft.com/someurl/';
        mockCookies.AYSC = "_22P2Tools_2712345_98A_";
        testCorpCookieMatchAndBuildAdURL(FT.Properties.CORPORATE_AMO_BASE + 'subscribed/12345', 1);
    });

    test("FT.ads.buildURL (FT_Remember cookie) for US18551", function () {
         var stub = sinon.stub(FT.ads, "kruxRetrieve", function(name){return "";});
        maybeInitFixture();
        var url, params, order, uParams;

        beginNewPage('buildURL FT_Remember Cookie 1');
        mockCookies.FT_Remember = "7038802:";
        url = testBuildURL("test with FT_Remember cookie information");

        matches(url, ';eid=7038802;', "Ad URL erights ID should appear in URL");

        mockCookies.FT_Remember = "7038802:TK3673275680330534570:FNAME=April:LNAME=Mateo:EMAIL=april.mateo@ft.com";
        url = testBuildURL("test with full FT_Remember cookie information");

        matches(url, ';eid=7038802;', "Ad URL erights ID appears in url");

        params = extract_params(url);
        order = params._order.join(',');
        equal(order, 'sz,eid,uuid,ts,cc,pos,bht,tile,ord', "Ad URL contains eid and u parameters in correct order");
        stub.restore();
    });


    //TEST for US23911 - add a cc=[y|n] key=value for targeting cookie consent widget
    test("FT.ads.getConsentValue() for US23911", function () {
        var consent;
        beginNewPage('No Consent Cookie');
        consent = FT.ads.getConsentValue();
        equal(consent, "n", "n should be set if consent cookie is not present");

        beginNewPage('Accepted Consent Cookie');
        mockCookies.cookieconsent = "accepted";
        consent = FT.ads.getConsentValue();
        equal(consent, "y", "y should be set if consent cookie is set to accepted");

        beginNewPage('Seen Consent Cookie');
        mockCookies.cookieconsent = "seen";
        consent = FT.ads.getConsentValue();
        equal(consent, "n", "n should be set if consent cookie is set to seen");
    });

    test("FT.ads.buildURL () should include values from FT.ads.getConsentValue() with cc=n cc=y for US23911", function () {
        maybeInitFixture();
        var url;

        beginNewPage('buildURL consent cookie');
        mockCookies.cookieconsent = "accepted";
        url = testBuildURL("cc=y");
        matches(url, "cc=y", "consent cookie accepted and cc=y should be present");

        beginNewPage('buildURL consent cookie not present');
        mockCookies.cookieconsent = undefined;
        url = testBuildURL("cc=n");
        matches(url, "cc=n", "consent cookie not present and cc=n should be present");

    });

    test("FT.ads.erightsID (no cookie)", function () {
        var eid;
        beginNewPage('erightsID No Cookie');
        eid = testErightsID("test with no cookie information");
        equal(eid, undefined, "eid returned should be undefined");
    });

    test("FT.ads.erightsID (FT_U cookie)", function () {
        var eid;

        beginNewPage('erightsID FT_U cookie 1');
        mockCookies.FT_U = "_EID=7038802_";
        eid = testErightsID("test with FT_U cookie information");
        equal(eid, '7038802', "correct eid information [" + eid + "] retrieved");

        beginNewPage('erightsID FT_U cookie 2');
        mockCookies.FT_U = "_EID=0002659_";
        eid = testErightsID("test with FT_U leading zeros removed");
        equal(eid, '2659', "correct eid information retrieved, leading zeroes removed");

        beginNewPage('erightsID FT_U cookie 3');
        mockCookies.FT_U = "_EID=4326601_PID=4004326601_TIME=%5BThu%2C+07-May-2009+13%3A27%3A45+GMT%5D_SKEY=9e7iw%2BskQZwnnX2e29as1w%3D%3D_RI=1_";
        eid = testErightsID("test with full FT_U cookie information");
        equal(eid, '4326601', "correct eid information retrieved");

    });

    test("FT.ads.erightsID (FT_Remember cookie)", function () {
        var eid;

        beginNewPage('erightsID FT_Remember cookie 1');
        mockCookies.FT_Remember = "7038802:";
        eid = testErightsID("test with FT_Remember cookie information");
        equal(eid, '7038802', "correct eid information retrieved");

        beginNewPage('erightsID FT_Remember cookie 2');
        mockCookies.FT_Remember = "7038802:TK3673275680330534570:FNAME=April:LNAME=Mateo:EMAIL=april.mateo@ft.com";
        eid = testErightsID("test with full FT_Remember cookie information");
        equal(eid, '7038802', "correct eid information retrieved");

    });


    test("FT.ads.isLoggedIn (FTSession cookie - logged in)", function () {
        var isLoggedIn;
        beginNewPage('isLoggedIn FTSession cookie');
        mockCookies.FTSession = "someSessionId";
        mockCookies.FT_U = "_EID=0002659_";
        isLoggedIn = testIsLoggedIn("test with FTSession & FT_U cookie information");
        equal(isLoggedIn, true, "User should be logged in ");

    });

    test("FT.ads.isLoggedIn (FTSession cookie 2 - no FT_U)", function () {
        var eid;
        beginNewPage('isLoggedIn FTSession cookie');
        beginNewPage('erightsID FT_U cookie 1');
        mockCookies.FT_U = null;
        eid = testErightsID("test with FT_U cookie information");
        equal(eid, undefined, "correct eid information [" + eid + "] retrieved");

        var isLoggedIn;
        mockCookies.FTSession = "someSessionId";
        isLoggedIn = testIsLoggedIn("test with FTSession cookie and no FT_U information");
        equal(isLoggedIn, false, "User has FTSession but is NOT logged in  + " + eid);


    });

    test("FT.ads.isLoggedIn (FTSession cookie 3 - no FTSession)", function () {
        var isLoggedIn;

        beginNewPage('isLoggedIn FTSession cookie');
        mockCookies.FTSession = null;
        mockCookies.FT_U = "_EID=0002659_";
        isLoggedIn = testIsLoggedIn("test with no FTSession cookie information");
        equal(isLoggedIn, false, "User had not FTSession");

    });


    test("FT.ads.requestNewssubs() - check if should serve newssubs depending on ad dimensions in banlb slot", function () {

        expect(10);

        beginNewPage();
        var func = function (pos) {
        }, func2 = function (pos, time, func) {
        };
        var stub1 = sinon.stub(FT.ads, "request", func);
        var stub2 = sinon.stub(FT.ads, "pushDownExpand", func2);

        jQuery('#banlb').html("<img id='banlb_ad' src='../images/banlb-728x90.gif' />");
        FT.ads.requestNewssubs();

        equal(FT.ads.request.calledWith("newssubs"), true, "newssubs position is called when ad is banlb");
        equal(FT.ads.pushDownExpand.calledWith('banlb', 1, FT.ads.pollAdHeightAndExpand), false, "polling function not called when normal banlb served");

        //restore ads objects
        FT.ads.request.restore();
        FT.ads.pushDownExpand.restore();

        //delete banlb ad
        jQuery('#banlb').html("");

        //============================================

        //stub ads objects again
        sinon.stub(FT.ads, "request", func);
        sinon.stub(FT.ads, "pushDownExpand", func2);

        jQuery('#banlb').text('width="970"');
        FT.ads.requestNewssubs();

        equal(FT.ads.request.calledWith("newssubs"), false, "newssubs position is not called when ad is billboard matching text width=\"970\" ");
        equal(FT.ads.pushDownExpand.calledWith('banlb', 1, FT.ads.pollAdHeightAndExpand), true, "polling function is called when billboard served");

        //delete ad from banlb
        jQuery('#banlb').html("");

        //restore ads object
        FT.ads.request.restore();
        FT.ads.pushDownExpand.restore();

        //delete banlb ad
        jQuery('#banlb').html("");

        //==========================================

        //stub ads objects again
        sinon.stub(FT.ads, "request", func);
        sinon.stub(FT.ads, "pushDownExpand", func2);

        jQuery('#banlb').text('width=970');
        FT.ads.requestNewssubs();

        equal(FT.ads.request.calledWith("newssubs"), false, "newssubs position is not called when ad is billboard matching text width=970");
        equal(FT.ads.pushDownExpand.calledWith('banlb', 1, FT.ads.pollAdHeightAndExpand), true, "polling function is called when billboard served");

        //delete ad from banlb
        jQuery('#banlb').html("");

        //restore ads object
        FT.ads.request.restore();
        FT.ads.pushDownExpand.restore();

        //==========================================

        //stub ads objects again
        sinon.stub(FT.ads, "request", func);
        sinon.stub(FT.ads, "pushDownExpand", func2);

        jQuery('#banlb').text('width: 970');
        FT.ads.requestNewssubs();

        equal(FT.ads.request.calledWith("newssubs"), false, "newssubs position is not called when ad is billboard matching text width: 970");
        equal(FT.ads.pushDownExpand.calledWith('banlb', 1, FT.ads.pollAdHeightAndExpand), true, "polling function is called when billboard served");

        //delete ad from banlb
        jQuery('#banlb').html("");

        //restore ads object
        FT.ads.request.restore();
        FT.ads.pushDownExpand.restore();

        //==========================================

        //stub ads objects again
        sinon.stub(FT.ads, "request", func);
        sinon.stub(FT.ads, "pushDownExpand", func2);

        jQuery('#banlb').text('width:970');
        FT.ads.requestNewssubs();

        equal(FT.ads.request.calledWith("newssubs"), false, "newssubs position is not called when ad is billboard matching text width:970");
        equal(FT.ads.pushDownExpand.calledWith('banlb', 1, FT.ads.pollAdHeightAndExpand), true, "polling function is called when billboard served");

        //delete ad from banlb
        jQuery('#banlb').html("");

        //restore ads object
        FT.ads.request.restore();
        FT.ads.pushDownExpand.restore();


    });

    // Testing the undefined Adformat
    test("FT.ads.pushDownExpand() - Testing an undefined pushdown AdFormat", function () {

        var callback = sinon.spy();
        equal(FT.ads.pushDownExpand("undefinedAdFormat", 5, callback), null, 'This Ad format is undefined');
        sinon.assert.notCalled(callback);

    });

    // Testing the interaction with setTimeout
    test("FT.ads.pushDownExpand() - Testing the callback function", function () {

        var y = FT.ads.pushDownExpand("banlb", 1, FT.ads.pollAdHeightAndExpand);
        matches(y + "", /\d+/, "Matching the process digit", true);
        clearTimeout(y);

    });

    // Testing the pushDown Ad Expand method
    test("FT.ads.pollAdHeightAndExpand() - Testing the PushDown Ad Expand Method [ASYNC]", function () {

        var i, j, paddingTop, clock;

        beginNewPage();

        jQuery('#banlb').html("<img id='pollTest' src='../images/banlb-728x90.gif' height='90' width='970'>");

        expect(21);

        clock = sinon.useFakeTimers();

        equal((FT.ads.VAR.pushDownExpandingAsset == null), true, "the detected expanding asset should be initially set to null");

        FT.ads.pollAdHeightAndExpand("banlb", 1);


        for (i = 0; i < 10; i++) {

            l = (i * 10) + 12;
            j = (i * 10) + 90;
            jQuery('#pollTest').css('height', j);
            clock.tick(1000);
            paddingTop = jQuery('#header').css('padding-top');

            if (i == 0) {
                equal((FT.ads.VAR.pushDownExpandingAsset === null), true, "the expanding assets should be null on the first poll");
                equal(paddingTop, "0px", "div has expected paddingTop of:0px");
            } else {
                equal((FT.ads.VAR.pushDownExpandingAsset !== null), true, "the expanding assets should be not null on subsequent polls");
                equal(Math.ceil(parseFloat(paddingTop)), l, "div has expected paddingTop of:" + l + "px");
            }
        }

        clock.restore();

    });

    test("FT.ads.getIP (FTUserTrack cookie)", function () {
        var ip;

        beginNewPage('getIP FTUserTrack cookie 1');
        mockCookies.FTUserTrack = "203.190.72.182";
        ip = testGetIP("test with incomplete FTUserTrack cookie information " + mockCookies.FTUserTrack);
        equal(ip, '203.190.72.182', "correct ip information retrieved");

        beginNewPage('getIP FTUserTrack cookie 2');
        mockCookies.FTUserTrack = "203.190.72.";
        ip = testGetIP("test with incomplete FTUserTrack cookie information " + mockCookies.FTUserTrack);
        equal(ip, '203.190.72.', "incorrect ip information retrieved");

        beginNewPage('getIP FTUserTrack cookie 3');
        mockCookies.FTUserTrack = "203.190.72.182.1344916650137365";
        eid = testGetIP("test with complete FTUserTrack cookie information " + mockCookies.FTUserTrack);
        equal(eid, '203.190.72.182', "correct ip information retrieved");

        beginNewPage('getIP FTUserTrack cookie 4');
        mockCookies.FTUserTrack = "203.190.72.182.aaa";
        eid = testGetIP("test with complete FTUserTrack cookie information " + mockCookies.FTUserTrack);
        equal(eid, '203.190.72.182', "correct ip information retrieved");

        beginNewPage('getIP FTUserTrack cookie 5');
        mockCookies.FTUserTrack = "203.190.72.18a.1344916650137365";
        eid = testGetIP("test with complete FTUserTrack cookie information " + mockCookies.FTUserTrack);
        equal(eid, '203.190.72.18a', "incorrect ip information retrieved");

    });

    test("FT.ads.encodeIP", function () {
        var ip, encodedIP;

        beginNewPage('encodeIP test 1 - complete FTUserTrack information');
        mockCookies.FTUserTrack = "203.190.72.182.1344916650137365";
        ip = FT.ads.getIP();
        encodedIP = testEncodeIP(ip, "encodeIP test 1: FTUserTrack = " + mockCookies.FTUserTrack + " and extracted IP is = " + ip);
        equal(encodedIP, 'cadzbjazhczbic', "encoded IP matches");

        beginNewPage('encodeIP test 2 - incomplete FTUserTrack information');
        mockCookies.FTUserTrack = "203.190.72.182";
        ip = FT.ads.getIP();
        encodedIP = testEncodeIP(ip, "encodeIP test 2: FTUserTrack = " + mockCookies.FTUserTrack + " and extracted IP is = " + ip);
        equal(encodedIP, 'cadzbjazhczbic', "encoded IP matches");

        beginNewPage('encodeIP test 3 - incomplete FTUserTrack information');
        mockCookies.FTUserTrack = "203.190.72.";
        ip = FT.ads.getIP();
        encodedIP = testEncodeIP(ip, "encodeIP test 3: FTUserTrack = " + mockCookies.FTUserTrack + " and extracted IP is = " + ip);
        equal(encodedIP, 'cadzbjazhcz', "encoded IP matches");

        beginNewPage('encodeIP test 4 - incomplete FTUserTrack information');
        mockCookies.FTUserTrack = "203.190.72.182.aaaaa";
        ip = FT.ads.getIP();
        encodedIP = testEncodeIP(ip, "encodeIP test 4: FTUserTrack = " + mockCookies.FTUserTrack + " and extracted IP is = " + ip);
        equal(encodedIP, 'cadzbjazhczbic', "encoded IP matches");

    });

    test("FT.ads.buildURL (Social Referrer)", function () {
        maybeInitFixture();
        var url, params, order, uParams,
                docReferrerStub = sinon.stub(FT.ads, "getDocReferrer");

        beginNewPage('buildURL Social Referrer');
        docReferrerStub.returns(null);
        url = testBuildURL("test with no referral");
        notmatches(url, ';socref=', "no social referrer should appear in the URL");
        docReferrerStub.reset();
        docReferrerStub.returns("http://t.co/cjPOFshzk2");
        url = testBuildURL("test with direct referral (ie already logged in when referred)");

        matches(url, ';socref=twi', "twi referral should appear in the URL");
        docReferrerStub.reset();
        docReferrerStub.returns("http://www.ft.com/cms/s/ed72d2ac-cf4e-11e2-be7b-00144feab7de,Authorised=false.html?_i_location=http%3A%2F%2Fwww.ft.com%2Fcms%2Fs%2F0%2Fed72d2ac-cf4e-11e2-be7b-00144feab7de.html&_i_referer=http%3A%2F%2Ft.co%2F9So3Xw9qFH");
        url = testBuildURL("test with secondary referral (ie had to log in when referred)");

        matches(url, ';socref=twi', "twi referral should appear in the URL");
        docReferrerStub.reset();
    });

});

</script>
<div id="dccookie" style="display: none">
    <script>unitOrIntegrationMessage(testMode);</script>
</div>
</body>
</html>
