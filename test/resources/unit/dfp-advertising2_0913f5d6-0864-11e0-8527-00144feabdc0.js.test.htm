<!DOCTYPE html>
<html>
<head>
    <title>Test Plan DartForPublishers.js - with UUID in URL</title>
    <META HTTP-EQUIV="CACHE-CONTROL" CONTENT="NO-CACHE">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <link rel="stylesheet" href="../css/qunit-1.10.0pre.css" type='text/css' media='screen'/>
    <link rel="stylesheet" href="../css/tests.css" type='text/css' media='screen'/>
    <script src="../lib/jquery/jquery-1.7.2.js"></script>
    <script src="../lib/jquery/jquery.cookie.js"></script>
    <script src="../lib/qunit/qunit-1.10.0pre.js"></script>
    <script src="../js/util/QUnitChainer.js"></script>
    <script src="../js/util/qunitMock.lib.js"></script>
    <script src="../js/util/test-helpers.html.js"></script>
    <script src="../js/util/page-helpers.html.js"></script>
    <script src="../lib/sinon/sinon-1.1.1.js"></script>
    <script src="../lib/sinon/sinon-ie-1.1.1.js"></script>

    <script>
    /*globals $, get_diagnostic, window, module, test, expect, pending, ok,
        equal, differs, deepEqual, matches, arrayLike, type, type_size, getType,
        debug, jsDump
    */

    /*members "01", AYSC, AdFormat, AdPos, AdServerCodes, Advertising,
        AudSci, AudSciResult, AudSciResultShort, AudSciResultSplit, Base36,
        Base36Result, CONST, CompAudSciSplit, Comprehensive, DearLucy,
        DearLucyNonLive, DefaultAdTag, ENV, FTQA, FT_U, ISOGoodMap, ISOInvalid,
        InvalidISO2Codes, KeyOrder, MaxAYSCFields, OmitPVTRES, OmitXXX,
        Properties, RSI_SEGS, SlvCorp, SlvLv1, SlvLv2, SlvNope, SlvReg, TEST,
        Unclassified, UnusedAysc, _order, a, adServerCountry, adState1,
        addDiagnostic, ads, adverts, ae, al, ar, at, au, audSciInitial,
        audSciMax, ba, baseAdvert, be, bg, br, bs, buildURL, by, ca, callType,
        ch, checkAdServerCountry, checkAdState, checkSiteZone,
        checkSubmitLongestUrl, cl, cleanKeywords, cn, co, cookies, cz, dcopt,
        de, decodeAudSci, detectAdMode, detectDFPTargeting, dfp_site,
        dfp_targeting, dfp_zone, div, dk, ee, eg, encodeAudSci, env, envOrig,
        es, fi, floor, foreach, fr, fromBase36, func, gb, getAdContainer,
        getAdFormat, getCookie, getDFPSite, getElementById, getKeys,
        getKeywordsParam, getLongestUrl, getNamedAdContainer, gg, gr, gt,
        hasAdClass, hasCalledInitDFP, hasClassName, hasDiv, hasInterstitial,
        hasOwnProperty, hello, hk, hr, hu, id, ie, il, im, in,
        initDFP, initialHTML, injectUnclassifiedTrackCall, injectUrlTrackCall,
        innerHTML, instanceProperty, is, isLegacyAPI, isDefaultAdModeDFP,
        isSystemDefault, isUnclassified, it, jar, je, join, jp, kr, kw, length,
        lib, location, lt, lu, lv, ma, md, me, mk, mx, my, name, nl, no, nz,
        obj, ord, parse, ph, pk, pl, pos, prototypalProerty, prototype, pt,
        push, random, ready, replace, request, requestNewssubs, requestUrl,
        resetLibrary, ro, rs, ru, sa, se, setDefaultSiteZone, setInitialAdState,
        sg, shift, shouldSubmitToTrack, showDiagnostics, si, sk, sort, split,
        src, state, submitToTrack, sz, t, targeting, th, tile, toBase36, tr,
        trackUrl, tw, u, ua, uk, urlThreshold, urlThresholdMax, url_location,
        us, useDFP, value, ve, write, z, za, AdStateKeysInit, AdStateKeysChanged,
        isEmptyAd, isAdStateEmpty, shouldAdBeZeroHeight, alwaysHide,
        getAdInnerHTML, getAdContainers, pageUUID, getUUIDFromString
    */

    "use strict";
    var FT = FT || {};
    FT.env = {
       "dfp_site": "test.5887.dev",
       "dfp_zone": "dfp-advertising-test"
    };
    FT.envOrig = {
       "dfp_site": "test.5887.dev",
       "dfp_zone": "dfp-advertising-test"
    };
    // Mock the properties object so we are considered to be non-live
    FT.Properties = { 'ENV': "ci" };

    // AUTO-GENERATED CONSTANTS ========================================
    // These were generated by perl script:
    // online/website/commons/trunk/javascript/ft-advertising/src/test/support/country-codes/country-codes.pl
    // Using an XLS file provided by Doubleclick containing the valid Ad
    // servers and an ISO3 to ISO2 mapping file from the Quova project
    // See also ISO2 and ISO3 country code documentation:
    // http://en.wikipedia.org/wiki/ISO_3166-1_alpha-3
    // http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
    var TEST = {};
    TEST.AdServerCodes = ['ae', 'al', 'ar', 'at', 'au', 'ba', 'be', 'bg', 'br', 'bs', 'by', 'ca', 'ch', 'cl', 'cn', 'co', 'cz', 'de', 'dk', 'ee', 'eg', 'es', 'fi', 'fr', 'gr', 'gt', 'hk', 'hr', 'hu', 'ie', 'il', 'in', 'is', 'it', 'jp', 'kr', 'kw', 'lt', 'lu', 'lv', 'ma', 'md', 'me', 'mk', 'mx', 'my', 'nl', 'no', 'nz', 'ph', 'pk', 'pl', 'pt', 'ro', 'rs', 'ru', 'sa', 'se', 'sg', 'si', 'sk', 'th', 'tr', 'tw', 'ua', 'uk', 'us', 've', 'za'];

    // Some new additions to ISO2 and invalid values to check
    TEST.InvalidISO2Codes = ['xx', 'gb', 'gg', 'im', 'je']; // 'me', 'ro', 'rs' are now supported
    TEST.ISOGoodMap = {
       // Quova ISO2 with Valid DFP Ad Servers
        'al': 'al','ae': 'ae','ar': 'ar','au': 'au','at': 'at','be': 'be','bg': 'bg','bs': 'bs','ba': 'ba','by': 'by',
        'br': 'br','ca': 'ca','ch': 'ch','cl': 'cl','cn': 'cn','co': 'co','cz': 'cz','de': 'de','dk': 'dk','eg': 'eg',
        'es': 'es','ee': 'ee','fi': 'fi','fr': 'fr','uk': 'uk','gb': 'uk','gg': 'uk','gr': 'gr','gt': 'gt','hk': 'hk',
        'hr': 'hr','hu': 'hu','im': 'uk','in': 'in','ie': 'ie','is': 'is','il': 'il','it': 'it','je': 'uk','jp': 'jp',
        'kr': 'kr','kw': 'kw','lt': 'lt','lu': 'lu','lv': 'lv','ma': 'ma','md': 'md','mx': 'mx','mk': 'mk','me': 'me',
        'my': 'my','nl': 'nl','no': 'no','nz': 'nz','pk': 'pk','ph': 'ph','pl': 'pl','pt': 'pt','ro': 'ro','ru': 'ru',
        'sa': 'sa','sg': 'sg','rs': 'rs','sk': 'sk','si': 'si','se': 'se','th': 'th','tr': 'tr','tw': 'tw','ua': 'ua',
        'us': 'us','ve': 've','za': 'za'
    };

    TEST.ISOInvalid = [
        // ISO2 with Invalid DFP Ad Servers
        'aw','af','ao','ai','ad','an','am','as','aq','tf','ag','az','bi','bj','bf','bd','bh','bz','bm','bo','bb','bn','bt',
        'bv','bw','cf','cc','ci','cm','cd','cg','ck','km','cv','cr','cu','cx','ky','cy','dj','dm','do','dz','ec','er','eh',
        'et','fj','fk','fo','fm','fx','ga','ge','gh','gi','gn','gp','gm','gw','gq','gd','gl','gf','gu','gy','hm','hn','ht',
        'id','io','ir','iq','jm','jo','kz','ke','kg','kh','ki','kn','la','lb','lr','ly','lc','li','lk','ls','mo','mc','mg',
        'mv','mh','ml','mt','mm','mn','mp','mz','mr','ms','mq','mu','mw','yt','na','nc','ne','nf','ng','ni','nu','np','nr',
        'om','pa','pn','pe','pw','pg','pr','kp','py','ps','pf','qa','re','rw','cs','sd','sn','gs','sh','sj','sb','sl','sv',
        'sm','so','pm','st','sr','sz','sc','sy','tc','td','tg','tj','tk','tm','tp','to','tt','tn','tv','tz','ug','um','uy',
        'uz','va','vc','vg','vi','vn','vu','wf','ws','ye','yu','zm','zw'
    ];
    // END OF AUTO-GENERATED CONSTANTS =================================

    TEST.DefaultAdTag = {
       'env': {
          'dfp_site': 'test.5887.dev',
          'dfp_zone': 'build-url-test'
       },
       'pos': 'banlb'
    };
    TEST.DearLucy = {
       'dfp_site': 'ftcom.5887.blogs',
       'dfp_zone': 'dear-lucy-blog'
    };
    TEST.DearLucyNonLive = {
       'dfp_site': 'test.5887.blogs',
       'dfp_zone': 'dear-lucy-blog'
    };
    TEST.Unclassified = {
       'dfp_site': 'ftcom.5887.unclassified',
       'dfp_zone': 'unclassified'
    };

    TEST.AdPos = [
       'intro', 'banlb', 'newssubs', 'tlbxrib', 'mktsdata', 'hlfmpu', 'doublet', 'refresh', 'mpu', 'mpusky', 'vidbut1',
       'vidbut2', 'vidbut3', 'video', 'wdesky', 'marketingrib', 'tradcent', 'lhn',
       '-'
    ];

    // Correct order of keys in the Ad call URL to prevent data truncation - TODO still to change
    // Documented in Targeting/KeyPriority.xls in DFP project share and on Twiki
    // http://epcvs.osb.ft.com/twiki/bin/view/Projects/DartForPublishers#Order_of_key_values_placed_into
    //TEST.KeyOrder        = "sz,dcopt,07,a,06,slv,eid,05,19,21,27,20,02,14,cn,01,kw,u,pos,tile,ord";  // TODO referrer, investor relations
    TEST.KeyOrder        = "sz,dcopt,07,a,06,05,27,eid,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,19,20,21,slv,02,14,cn,01,kw,u,pos,tile,ord";
    //TEST.Comprehensive   = "sz,dcopt,07,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,06,slv,eid,05,19,21,27,20,02,14,cn,01,kw,u,pos,tile,ord";
    TEST.Comprehensive   = "sz,dcopt,07,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,06,05,27,eid,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,19,20,21,slv,02,14,cn,01,kw,u,pos,tile,ord";
    //TEST.CompAudSciSplit = "sz,dcopt,07,a,a,a,06,slv,eid,05,19,21,27,20,02,14,cn,01,kw,u,a,a,pos,tile,ord";
    TEST.CompAudSciSplit = "sz,dcopt,07,a,a,a,06,05,27,eid,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,19,20,21,slv,02,14,cn,01,kw,u,a,a,pos,tile,ord";

    // AYSC values which should not appear in the Ad call URL
    TEST.MaxAYSCFields = 60;
    TEST.UnusedAysc = ['00', '03', '04', '08', '09', '10', '11', '12', '13', '15', '16', '17', '18', '22', '23', '24', '25', '26', '28', '29', '30', '31', '32', '32', '33', '34', '35', '36', '37', '38', '39', '40'];
    // AYSC values which are omitted from the Ad call URL if they have specific values
    TEST.OmitXXX    = ['02', '05', '06', '07', '20', '21', '19'];
    TEST.OmitPVTRES = ['14', '27', '24' ];

    // Test values for subscription level ID matching
    TEST.SlvCorp = ['P0P1Tools', 'P0P2Admin', 'P0L1Ape', 'P0L2Dog', 'L0L1Ties', 'L0L2Tent', 'L0P1Towels', 'L0P2What'];
    TEST.SlvLv1  = ['P1Tools', 'L1Edit'];
    TEST.SlvLv2  = ['P2Tools', 'L2Edit'];
    TEST.SlvReg  = ['P0Tools', 'L0Edit'];
    TEST.SlvNope = ['P0P1T', 'P2', 'L2', 'P1', 'L1', 'P0', 'L0', 'P1L1', 'nomatch'];

    // Full cookie samples
    //TEST.AYSC = "AYSC=_011967_02M_04greater%2520london_05ITT_06TEC_07MA_12SE19HL_13GBR_14GBR_15UK_17london_18london_190500_20n_2112_22P0P2Tools_24europe_25PVT_26PVT_273f5a2e_";
    TEST.AYSC = "AYSC=_011967_02M_04greater%2520london_05ITT_06TEC_07MA_12SE19HL_13GBR_14GBR_15UK_17london_18london_190500_20n_2112_22P0P2Tools_24europe_25PVT_26PVT_273f5a2e_41fortyone_42fortytwo_43fortythree_44fortyfour_45fortyfive_46fortysix_47fortyseven_48fortyeight_49fortynine_50fifty_51fiftyone_52fiftytwo_53fiftythree_54fiftyfour_55fiftyfive_56fiftysix_57fiftyseven_58fiftyeight_59fiftynine_60sixty_";
    TEST.FT_U = "FT_U=_EID=4326601_PID=4004326601_TIME=%5BThu%2C+07-May-2009+13%3A27%3A45+GMT%5D_SKEY=9e7iw%2BskQZwnnX2e29as1w%3D%3D_RI=1_";
    TEST.RSI_SEGS = "rsi_segs=H07711_10108|J07717_10576|J07717_10089|J07717_10502|J07717_10236|J07717_10286|J07717_10288|J07717_10295|J07717_10299|J07717_10301|J07717_10322|J07717_10344|J07717_10345|J07717_10357|J07717_10369|J07717_10530|J07717_10555|J07717_10545|J07717_10221|H07711_10127";
    //a=h6fna7;a=z576;a=z89;a=z502;a=z236;a=z286;a=z288;a=z295;a=z299;a=z301;a=z322;a=z344;a=z345;a=z357;a=z369;a=z530;a=z555;a=z545;a=z221;a=h7kdbz

    TEST.Base36       = [907717, 8724,  707711,  0,  2599999]; // 3 real values plus min/max possible values to test
    TEST.Base36Result = ['jged', '6qc', 'f62n', '0', '1jq67'];

    TEST.AudSci = [
       'H07711_10108|J07717_10089|J07717_10097|J07717_10098|J07717_10236|J07717_10288|J07717_10294|J07717_10295|J07717_10299|J07717_10369|J07717_10555|J07717_10545|H07711_10127',
       'J07717_10383|J07717_10092|J07717_10097|J07717_10098|J07717_10105|J07717_10236|J07717_10288|J07717_10295|J07717_10299|J07717_10369|J07717_10370|J07717_10555|J07717_10545|J07717_10221',
       'J07717_10098|J07717_10236|J07717_10288|J07717_10295|J07717_10299|J07717_10369|J07717_10555',
       'J07717_10383|J07717_10576|J07717_10089|J07717_10502|J07717_10236|J07717_10286|J07717_10288|J07717_10295|J07717_10299|J07717_10301|J07717_10322|J07717_10344|J07717_10345|J07717_10357|J07717_10369|J07717_10530|J07717_10555|J07717_10545|J07717_10221|J07717_10580',
       'J07717_10095|J07717_10576|J07717_10089|J07717_10502|J07717_10097|J07717_10236|J07717_10285|J07717_10288|J07717_10295|J07717_10299|J07717_10322|J07717_10369|J07717_10490|J07717_10555|J07717_10545|J07717_10221|J07717_10580'
    ];

    TEST.AudSciResult = [
       'a=h6fna7;a=z89;a=z97;a=z98;a=z236;a=z288;a=z294;a=z295;a=z299;a=z369;a=z555;a=z545;a=h7kdbz',
       'a=z383;a=z92;a=z97;a=z98;a=z105;a=z236;a=z288;a=z295;a=z299;a=z369;a=z370;a=z555;a=z545;a=z221',
       'a=z98;a=z236;a=z288;a=z295;a=z299;a=z369;a=z555',
       'a=z383;a=z576;a=z89;a=z502;a=z236;a=z286;a=z288;a=z295;a=z299;a=z301;a=z322;a=z344;a=z345;a=z357;a=z369;a=z530;a=z555;a=z545;a=z221;a=z580',
       'a=z95;a=z576;a=z89;a=z502;a=z97;a=z236;a=z285;a=z288;a=z295;a=z299;a=z322;a=z369;a=z490;a=z555;a=z545;a=z221;a=z580'
    ];

    TEST.AudSciResultShort = 'a=h6fna7;a=z89;a=z97;a=z98;a=z236';
    TEST.AudSciResultSplit = 'a=h6fna7;a=z89;a=z97;eid=4326601;u=eid=4326601;a=z98;a=z236';

    TEST.AdStateKeysInit    = "alwaysHide, hasDiv, hasInterstitial, initialHTML, isEmptyAd, isSystemDefault, requestsInterstitial, state";
    TEST.AdStateKeysChanged = "alwaysHide, hasDiv, hasInterstitial, initialHTML, innerHTML, isEmptyAd, isSystemDefault, requestsInterstitial, state";

    var pageUUID = '';
    function getUUIDFromString(stringForExtractingUUID) {
    	return '';
    }

    var mockCookies = {};
    </script>
    <script src="../js/ft/advertising.utils.js"></script>
    <script src="../js/ft/advertising.utils.cookie.js"></script>
    <script src="../js/ft/DartForPublishers.js"></script>
    <script src="../js/util/mock-ads.html.js"></script>

  <script>
     var testMode = unitOrIntegrationMode(FT._ads.utils.cookies.FTQA);
    // TODO mock a referring url
    //FT.ads.baseAdvert['referrer'] = "http://www.ft.com/home/uk" ;
    // mock keywords
    //FT.ads.baseAdvert['keyword'] = "ivi/lon" ;
  </script>
</head>
<body>
	<h1 id="qunit-header">DartForPublishers.js - URL has valid UUID.</h1>
	<h2 id="qunit-banner"></h2>
	<h2 id="qunit-userAgent"></h2>
  <h2 id="mode"></h2>

	<ol id="qunit-tests"></ol>

<script>
function beginNewPage(message, Args) {
    Args = Args || {};
    Args.env = Args.env || {};
    FT.env = $.extend({}, {
        'dfp_site': 'test.5887.dev',
        'dfp_zone': 'build-url-test'
    }, Args.env);
	if (Args.ENV) {
		FT.Properties.ENV = Args.ENV;
	}
	FT.ads.resetLibrary();
}

function maybeInitFixture() {
   if (! FT.ads.hasCalledInitDFP) {
      FT.ads.initDFP();
      beginNewPage('maybeInitFixture for running a single test suite.');
   }
   ok(FT.ads.hasCalledInitDFP, 'DFP Ads system should be initialized');
} // maybeInitFixture()

function testBuildURL(message, Args) {
    Args = Args || {};
    Args = $.extend({}, TEST.DefaultAdTag, Args);
	FT.ads.setInitialAdState(Args.pos);
	var url = FT.ads.buildURL(Args.pos);
	ok(true, "== BEGIN: " + message + " [" + url + "]");
	return url;
}

function getCurrentYear() {
    var currDate = new Date();
    return currDate.getFullYear();
}

$(document).ready(function () {
   module("DartForPublishers", {
       setup: function() {
           FT._ads.utils.cookies = mockObject(mockCookies);
       }
   });

   test("FT.ads.buildURL (new parameters ts and uuid)  - for Task TA27559", function() {
	   var url;
	   expect(5);
	   maybeInitFixture();

	   pageUUID = '';
	   getUUIDFromString = function(stringForExtractingUUID) {
		   var safeStringForMatch = stringForExtractingUUID.toString();
		   var articleId = safeStringForMatch.match(/[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}/);
		   if (articleId) {
			   return articleId.toString();
		   }
		   return null;
	   };

	   beginNewPage('build URL1' );
       mockCookies.FT_U = "_EID=2548659_";
	   url = testBuildURL("both pageUUID and getUUIDFromString defined. pageUUID is empty, url has uuid.");
	   matches(url, ';u=eid=2548659,uuid=build-url-test,ts=' + getCurrentYear(), "Ad URL uuid must default to the dfp zone. It also contains timestamp.");

	   pageUUID = undefined;
	   beginNewPage('build URL2' );
       mockCookies.FT_U = "_EID=2548659_";
	   url = testBuildURL("pageUUID undefined, getUUIDFromString defined. URL contains UUID.");
	   matches(url, ';u=eid=2548659,uuid=0913f5d6-0864-11e0-8527-00144feabdc0,ts=' + getCurrentYear(), "Ad URL contains uuid coming from the URL. It also contains timestamp.");
   });
});

var Plan = {};
Plan.nextTestPlan =  'expand-collapse.js.test.htm';
QUnitChainer.init(Plan);
</script>

  <div id="dccookie" style="display: none">
      <script>unitOrIntegrationMessage(testMode);</script>
   </div>
</body>
</html>
